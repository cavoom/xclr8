"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCommand = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const abstract_command_1 = require("../../../abstract-command");
const constants_1 = __importDefault(require("../../../../utils/constants"));
const jsonView = __importStar(require("../../../../view/json-view"));
const messenger_1 = __importDefault(require("../../../../view/messenger"));
const option_model_json_1 = __importDefault(require("../../../option-model.json"));
const profile_helper_1 = __importDefault(require("../../../../utils/profile-helper"));
const smapi_client_1 = __importDefault(require("../../../../clients/smapi-client"));
const zip_utils_1 = __importDefault(require("../../../../utils/zip-utils"));
const helper_js_1 = __importDefault(require("./helper.js"));
class ExportPackageCommand extends abstract_command_1.AbstractCommand {
    name() {
        return "export-package";
    }
    description() {
        return 'download the skill package to "skill-package" folder in current directory';
    }
    requiredOptions() {
        return ["skill-id", "stage"];
    }
    optionalOptions() {
        return ["profile", "debug"];
    }
    async handle(cmd) {
        let profile;
        try {
            profile = profile_helper_1.default.runtimeProfile(cmd.profile);
            // 0.check if a skill-package file exists
            if (fs_1.default.existsSync(constants_1.default.FILE_PATH.SKILL_PACKAGE.PACKAGE)) {
                throw new Error(`A ${constants_1.default.FILE_PATH.SKILL_PACKAGE.PACKAGE} folder already exists in the current working directory.`);
            }
        }
        catch (err) {
            messenger_1.default.getInstance().error(err);
            throw err;
        }
        const smapiClient = new smapi_client_1.default({
            profile,
            doDebug: cmd.debug,
        });
        // 1.request to export skill package
        return new Promise((resolve, reject) => {
            smapiClient.skillPackage.exportPackage(cmd.skillId, cmd.stage, (exportErr, exportResponse) => {
                var _a;
                if (exportErr) {
                    messenger_1.default.getInstance().error(jsonView.toString(exportErr));
                    return reject(new Error(jsonView.toString(exportErr)));
                }
                const exportId = path_1.default.basename((_a = exportResponse === null || exportResponse === void 0 ? void 0 : exportResponse.headers) === null || _a === void 0 ? void 0 : _a.location);
                // 2.poll for the skill package export status
                helper_js_1.default.pollExportStatus(smapiClient, exportId, (pollErr, pollResponse) => {
                    var _a, _b;
                    if (pollErr) {
                        messenger_1.default.getInstance().error(pollErr);
                        return reject(pollErr);
                    }
                    // 3.download skill package into local file system
                    const skillPackageLocation = (_b = (_a = pollResponse === null || pollResponse === void 0 ? void 0 : pollResponse.body) === null || _a === void 0 ? void 0 : _a.skill) === null || _b === void 0 ? void 0 : _b.location;
                    const rootPath = process.cwd();
                    const targetPath = path_1.default.join(rootPath, constants_1.default.FILE_PATH.SKILL_PACKAGE.PACKAGE);
                    zip_utils_1.default.unzipRemoteZipFile(skillPackageLocation, targetPath, false, (unzipErr) => {
                        if (unzipErr) {
                            messenger_1.default.getInstance().error(unzipErr);
                            return reject(unzipErr);
                        }
                        messenger_1.default.getInstance().info(`The skill package had been downloaded into ${targetPath}.`);
                        resolve();
                    });
                });
            });
        });
    }
}
exports.default = ExportPackageCommand;
exports.createCommand = new ExportPackageCommand(option_model_json_1.default).createCommand();
