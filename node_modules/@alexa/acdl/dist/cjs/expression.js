"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionalBranch = exports.Ensure = exports.ConfirmAction = exports.ConfirmArgs = exports.DelegateToIntent = exports.DelegateRequest = exports.Response = exports.Expect = exports.DialogExpansion = exports.InvokeApi = exports.ActionExpression = exports.FunctionExpression = exports.BlockExpression = exports.End = exports.Start = void 0;
class BaseExpression {
    constructor(prev, flow) {
        var _a, _b;
        Object.defineProperty(this, "prev", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: prev
        });
        Object.defineProperty(this, "flow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: flow
        });
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A reference to the Type Environment this Expression belongs in.
         */
        Object.defineProperty(this, "checker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The exact ASKIR Expression node which expressed this Expression.
         */
        Object.defineProperty(this, "node", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Sourece Code Location of the Call representing this Expression.
         */
        Object.defineProperty(this, "loc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Source Code URI of the code containing this Expression.
         */
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.node = flow.expression;
        this.checker = flow.checker;
        this.loc = (_a = flow.expression) === null || _a === void 0 ? void 0 : _a.loc;
        this.uri = (_b = flow.expression) === null || _b === void 0 ? void 0 : _b.uri;
    }
    isAction() {
        return this instanceof ActionExpression;
    }
    isBlock() {
        return this instanceof BlockExpression;
    }
    isConditionalBranch() {
        return this instanceof ConditionalBranch;
    }
    isConfirmAction() {
        return this instanceof ConfirmAction;
    }
    isConfirmArgs() {
        return this instanceof ConfirmArgs;
    }
    isDialogExpansion() {
        return this instanceof DialogExpansion;
    }
    isEnsure() {
        return this instanceof Ensure;
    }
    isExpect() {
        return this instanceof Expect;
    }
    isEnd() {
        return this instanceof End;
    }
    isInvokeApi() {
        return this instanceof InvokeApi;
    }
    isResponse() {
        return this instanceof Response;
    }
    isStart() {
        return this instanceof Start;
    }
    isDelegateToIntent() {
        return this instanceof DelegateToIntent;
    }
    isDelegateRequest() {
        return this instanceof DelegateRequest;
    }
    /**
     * Expressions that can come after a delegation call.
     */
    canFollowDelegation() {
        return this.isExpect() || this.isEnd() || this.isDialogExpansion() || this.isBlock() || this.isConditionalBranch();
    }
}
/**
 * Represents the Start of a Dialog Flow. This is usually used to detect the beginning
 * when traversing back through the Stack of previously received Expressions. It is
 * always the first expression in a {@link Flow.interpret} stream.
 */
class Start extends BaseExpression {
    constructor(prev, flow) {
        super(prev, flow);
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Start"
        });
    }
}
exports.Start = Start;
/**
 * Represents the End of a Dialog Flow. This Expression is the last Expression you'll ever
 * receive in a {@link Flow.interpret} stream. Use this to finalize evaluation of the Expression
 * stream.
 */
class End extends BaseExpression {
    constructor(prev, flow) {
        super(prev, flow);
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "End"
        });
    }
}
exports.End = End;
/**
 * Represents entering a Block.
 */
class BlockExpression extends BaseExpression {
    constructor(prev, flow) {
        super(prev, flow);
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Block"
        });
    }
}
exports.BlockExpression = BlockExpression;
class FunctionExpression extends BaseExpression {
    constructor(prev, flow, 
    /**
     * The Function to call.
     */
    func, 
    /**
     * Optional name-value pairs for the Arguments passed to the API.
     */
    args) {
        super(prev, flow);
        Object.defineProperty(this, "func", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: func
        });
        Object.defineProperty(this, "arguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.arguments = args;
        this.apply = flow.checker.getApply(this.node);
    }
}
exports.FunctionExpression = FunctionExpression;
/**
 * A Call to any Action (apis, built-ins, etc.).
 */
class ActionExpression extends FunctionExpression {
    constructor(prev, flow, 
    /**
     * The API's Action to call.
     */
    action, 
    /**
     * Optional name-value pairs for the Arguments passed to the API.
     */
    args) {
        super(prev, flow, action, args);
        Object.defineProperty(this, "action", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: action
        });
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Action"
        });
    }
}
exports.ActionExpression = ActionExpression;
/**
 * Invoke of an external API Action.
 *
 * ```
 * action String foo(String arg)
 * // ..
 * f = foo("hello")
 * ```
 */
class InvokeApi extends ActionExpression {
    constructor(prev, flow, 
    /**
     * The API's Action to call.
     */
    action, 
    /**
     * Name-value pairs for the Arguments passed to the API.
     */
    args) {
        super(prev, flow, action, args);
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvokeApi"
        });
    }
    getConfirmPayload() {
        var _a;
        return {
            actionName: (_a = this.action) === null || _a === void 0 ? void 0 : _a.actionName,
            arguments: this.arguments,
        };
    }
}
exports.InvokeApi = InvokeApi;
/**
 * Call to expand a Dialog.
 *
 * ```
 * dialog Foo(String arg) {}
 * // ..
 * fooDialog("hello")
 * ```
 */
class DialogExpansion extends FunctionExpression {
    constructor(prev, flow, 
    /**
     * The Dialog to call and expand the samples of in the simulation.
     */
    dialog, 
    /**
     * Name-value pairs for the Arguments passed to the Dialog.
     */
    args) {
        super(prev, flow, dialog, args);
        Object.defineProperty(this, "dialog", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dialog
        });
        Object.defineProperty(this, "args", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: args
        });
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Dialog"
        });
    }
}
exports.DialogExpansion = DialogExpansion;
/**
 * Represents an invound Request via the `expect` action.
 *
 * ```
 * expect(Invoke, my_utterance_event)
 * ```
 */
class Expect extends ActionExpression {
    constructor(prev, flow, 
    /**
     * The value of the Request Act.
     */
    act, 
    /**
     * The received Event.
     */
    event) {
        super(prev, flow);
        Object.defineProperty(this, "act", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: act
        });
        Object.defineProperty(this, "event", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: event
        });
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Expect"
        });
    }
    /**
     * @returns the type of the Act.
     */
    getActType() {
        var _a, _b;
        return (_b = (_a = this.act) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.getTypeType();
    }
    isAffirm() {
        var _a, _b, _c, _d, _e;
        return ((_c = (_b = (_a = this.act) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.getTypeType()) === null || _c === void 0 ? void 0 : _c.isAffirm()) || ((_e = (_d = this.act) === null || _d === void 0 ? void 0 : _d.type) === null || _e === void 0 ? void 0 : _e.isAffirm());
    }
    isDeny() {
        var _a, _b, _c, _d, _e;
        return ((_c = (_b = (_a = this.act) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.getTypeType()) === null || _c === void 0 ? void 0 : _c.isDeny()) || ((_e = (_d = this.act) === null || _d === void 0 ? void 0 : _d.type) === null || _e === void 0 ? void 0 : _e.isDeny());
    }
    isInvoke() {
        var _a, _b, _c, _d, _e;
        return ((_c = (_b = (_a = this.act) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.getTypeType()) === null || _c === void 0 ? void 0 : _c.isInvoke()) || ((_e = (_d = this.act) === null || _d === void 0 ? void 0 : _d.type) === null || _e === void 0 ? void 0 : _e.isInvoke());
    }
    isInform() {
        var _a, _b, _c, _d, _e;
        return ((_c = (_b = (_a = this.act) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.getTypeType()) === null || _c === void 0 ? void 0 : _c.isInform()) || ((_e = (_d = this.act) === null || _d === void 0 ? void 0 : _d.type) === null || _e === void 0 ? void 0 : _e.isInform());
    }
}
exports.Expect = Expect;
/**
 * Send a Response to the user.
 *
 * Is a Call Expression to `com.amazon.alexa.ask.conversations.response`
 *
 * ```acdl
 * response(
 *   response = my_apla_tempalte
 *   payload = Payload {
 *     key = value
 *   },
 *   act = Request { arguments = [foo.arguments.bar] },
 * })
 * ```
 */
class Response extends ActionExpression {
    constructor(prev, flow, 
    /**
     * The Apply instance for the actual Call Expression to the `response` Action.
     */
    apply, 
    /**
     * The Response template to use for this Response.
     */
    response, 
    /**
     * The Response Act value for this Response.
     */
    act, 
    /**
     * Optional nextAct value for this Response.
     */
    nextAct, 
    /**
     * Value of the Payload to be passed to the APL/A Response Template.
     */
    payload, 
    /**
     * Optional literal String representing the surface form of this Response.
     */
    surfaceForm) {
        super(prev, flow);
        Object.defineProperty(this, "flow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: flow
        });
        Object.defineProperty(this, "apply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: apply
        });
        Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: response
        });
        Object.defineProperty(this, "act", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: act
        });
        Object.defineProperty(this, "nextAct", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: nextAct
        });
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: payload
        });
        Object.defineProperty(this, "surfaceForm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: surfaceForm
        });
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Response"
        });
        Object.defineProperty(this, "actNode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "responseNode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.actNode = apply.getArgumentValue("act");
        this.responseNode = apply.getArgumentValue("response");
    }
    /**
     * If {@link Response.act} is `Request` then return the list of all the Action Arguments {@link ArgumentThing} that were individually requested.
     *
     * Individually requested arguments must exist for all required Arguments when calling an Action.
     */
    getIndividuallyRequestedArguments() {
        var _a, _b, _c;
        if ((_a = this.act) === null || _a === void 0 ? void 0 : _a.type.isRequest()) {
            const args = (_c = (_b = this.act.getProperty("arguments")) === null || _b === void 0 ? void 0 : _b.asLiteralList()) === null || _c === void 0 ? void 0 : _c.getItems();
            if ((args === null || args === void 0 ? void 0 : args.length) === 1) {
                return args.map((item) => item === null || item === void 0 ? void 0 : item.asArgument()).filter((a) => a !== undefined);
            }
        }
        return [];
    }
}
exports.Response = Response;
/**
 * A request to transfer delegation from Alexa Conversations to IM.
 */
class DelegateRequest extends ActionExpression {
    constructor(prev, flow, apply, updatedRequest) {
        super(prev, flow);
        Object.defineProperty(this, "apply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: apply
        });
        Object.defineProperty(this, "updatedRequest", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: updatedRequest
        });
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DelegateRequest"
        });
        Object.defineProperty(this, "updatedRequestNode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.updatedRequestNode = apply.getArgumentValue("updatedRequest");
    }
    getConfirmPayload() {
        var _a, _b;
        return {
            actionName: this.actionKind,
            arguments: (_b = (_a = this.checker.getThing(this.apply.getArgumentValue("updatedRequest"))) === null || _a === void 0 ? void 0 : _a.getProperty("slots")) === null || _b === void 0 ? void 0 : _b.getProperties(),
        };
    }
}
exports.DelegateRequest = DelegateRequest;
/**
 * Responds with a `Dialog.DelegateRequest` directive to the intent with the provided
 * slot values.
 *
 * Is a Call Expression to `com.amazon.alexa.ask.conversations.delegateToIntent`
 *
 * ```acdl
 * delegateToIntent<T>(
 *    getWeatherIntent,
 *    Weather {
 *       temp = 10,
 *       location = "Seattle"
 *    }
 * )
 * ```
 */
/**
 * A request to transfer delegation from Alexa Conversations to IM.
 */
class DelegateToIntent extends ActionExpression {
    constructor(prev, flow, apply, intent, slots) {
        super(prev, flow);
        Object.defineProperty(this, "apply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: apply
        });
        Object.defineProperty(this, "intent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: intent
        });
        Object.defineProperty(this, "slots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: slots
        });
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DelegateToIntent"
        });
        Object.defineProperty(this, "intentNode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "slotsNode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.intentNode = apply.getArgumentValue("intent");
        this.slotsNode = apply.getArgumentValue("slots");
    }
    getConfirmPayload() {
        var _a;
        return {
            actionName: this.actionKind,
            arguments: (_a = this.checker.getThing(this.apply.getArgumentValue("slots"))) === null || _a === void 0 ? void 0 : _a.getProperties(),
        };
    }
}
exports.DelegateToIntent = DelegateToIntent;
/**
 * An ambient Expression to Confirm Arguments that will be passed to some API Action.
 *
 * ```
 * confirmArgs([foo.arguments.bar])
 *
 * ```
 */
class ConfirmArgs extends ActionExpression {
    constructor(prev, flow, 
    /**
     * Lis
     */
    confirmArgs) {
        super(prev, flow);
        Object.defineProperty(this, "confirmArgs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: confirmArgs
        });
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ConfirmArgs"
        });
    }
}
exports.ConfirmArgs = ConfirmArgs;
/**
 * A Response to the user to to confirm that Alexa should call some API.
 */
class ConfirmAction extends ActionExpression {
    constructor(prev, flow, response, actionName, payload) {
        var _a;
        super(prev, flow);
        Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: response
        });
        Object.defineProperty(this, "actionName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: actionName
        });
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: payload
        });
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ConfirmAction"
        });
        Object.defineProperty(this, "actionNameNode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.actionNameNode = (_a = this.apply) === null || _a === void 0 ? void 0 : _a.getArgument("actionName");
    }
}
exports.ConfirmAction = ConfirmAction;
/**
 * An ambient expression informing Alexa how to request various arguments for various actions.
 */
class Ensure extends ActionExpression {
    constructor(prev, flow, requestArgs) {
        super(prev, flow);
        Object.defineProperty(this, "requestArgs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: requestArgs
        });
        Object.defineProperty(this, "actionKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Ensure"
        });
    }
    /**
     * Gets a list of all the Action Arguments {@link ArgumentThing} that were individually requested.
     *
     * Individually requested arguments must exist for all required Arguments when calling an Action.
     */
    getIndividuallyRequestedArguments() {
        var _a, _b, _c, _d;
        return ((_d = (_c = (_b = (_a = this.requestArgs) === null || _a === void 0 ? void 0 : _a.asLiteralList()) === null || _b === void 0 ? void 0 : _b.getItems()) === null || _c === void 0 ? void 0 : _c.map((item) => {
            var _a, _b, _c, _d;
            if (item === null || item === void 0 ? void 0 : item.type.isRequestArguments()) {
                const args = (_a = item.getProperty("arguments")) === null || _a === void 0 ? void 0 : _a.asLiteralList();
                if (args !== undefined && ((_b = args.getItems()) === null || _b === void 0 ? void 0 : _b.length) === 1) {
                    return ((_d = (_c = args
                        .getItems()) === null || _c === void 0 ? void 0 : _c.map((item) => item === null || item === void 0 ? void 0 : item.asArgument()).filter((a) => a !== undefined)) !== null && _d !== void 0 ? _d : []);
                }
            }
            return [];
        }).reduce((a, b) => a.concat(b), [])) !== null && _d !== void 0 ? _d : []);
    }
}
exports.Ensure = Ensure;
/**
 * Represents a fork in the Dialog Flow based on Condition. Expressions after receiving a ConditionalBranch
 * are the expressions contained within the if OR within the else. {@link Flow.interpret} will call your
 * callback once if there is no `else` and twice if there is.
 */
class ConditionalBranch extends BaseExpression {
    constructor(prev, flow, expr) {
        super(prev, flow);
        Object.defineProperty(this, "expr", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: expr
        });
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Condition"
        });
    }
}
exports.ConditionalBranch = ConditionalBranch;
//# sourceMappingURL=data:application/json;base64,