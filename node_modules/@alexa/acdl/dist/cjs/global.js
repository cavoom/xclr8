"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeGlobal = exports.mergeNamespaces = exports.defaultNamespaces = void 0;
const immutable_1 = __importDefault(require("immutable"));
const ask = __importStar(require("./ast"));
const util_1 = require("./util");
const lexical_scope_1 = require("./lexical-scope");
function defaultNamespaces() {
    return immutable_1.default.Map([
        [ask.PromptsNamespace, immutable_1.default.Map()],
        [ask.DisplayNamespace, immutable_1.default.Map()],
        [ask.SlotTypesNamespace, immutable_1.default.Map()],
    ]);
}
exports.defaultNamespaces = defaultNamespaces;
const mergeNamespaces = (a, b) => a.mergeWith(lexical_scope_1.mergeLexicalScope, b);
exports.mergeNamespaces = mergeNamespaces;
/**
 * Compute the Global scope and Namespace Index from a Project.
 */
function computeGlobal(project) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const globalExpressions = project.modules
        .map((file) => {
        var _a, _b, _c;
        return (_c = (_b = (_a = file.content) === null || _a === void 0 ? void 0 : _a.expressions) === null || _b === void 0 ? void 0 : _b.map((expression) => {
            var _a;
            return (expression.kind === "ActionDeclaration" ||
                expression.kind === "DialogDeclaration" ||
                expression.kind === "NameDeclaration" ||
                expression.kind === "TypeDeclaration" ||
                expression.kind === "EnumDeclaration") &&
                ((_a = expression.name) === null || _a === void 0 ? void 0 : _a.name)
                ? expression
                : undefined;
        })) !== null && _c !== void 0 ? _c : [];
    })
        .reduce((a, b) => a.concat(b), [])
        .filter((expr) => expr !== undefined);
    const globalScope = globalExpressions
        .map((expr) => { var _a; return immutable_1.default.Map([[(_a = expr.name) === null || _a === void 0 ? void 0 : _a.name, expr]]); })
        .concat((_b = (_a = project.responseTemplates) === null || _a === void 0 ? void 0 : _a.map((template) => immutable_1.default.Map([
        [`${template.isDisplay() ? ask.DisplayNamespace : ask.PromptsNamespace}.${template.name}`, template],
    ]))) !== null && _b !== void 0 ? _b : [])
        .concat((_d = (_c = project.slotTypes) === null || _c === void 0 ? void 0 : _c.map((slotType) => immutable_1.default.Map([[slotType.name.name, slotType]]))) !== null && _d !== void 0 ? _d : [])
        .reduce(lexical_scope_1.mergeLexicalScope, (0, lexical_scope_1.emptyLexicalScope)());
    const namespaces = globalExpressions
        .map((expression) => immutable_1.default.Map({
        [(0, util_1.getNamespace)(expression.name.name)]: immutable_1.default.Map([[(0, util_1.getName)(expression.name.name), expression]]),
    }))
        .concat((_f = (_e = project.responseTemplates) === null || _e === void 0 ? void 0 : _e.map((template) => immutable_1.default.Map([
        [template.isDisplay() ? ask.DisplayNamespace : ask.PromptsNamespace, immutable_1.default.Map([[template.name, template]])],
    ]))) !== null && _f !== void 0 ? _f : [])
        .concat((_h = (_g = project.slotTypes) === null || _g === void 0 ? void 0 : _g.map((slotType) => immutable_1.default.Map([[ask.SlotTypesNamespace, immutable_1.default.Map([[(0, util_1.getName)(slotType.name.name), slotType]])]]))) !== null && _h !== void 0 ? _h : [])
        .reduce(exports.mergeNamespaces, defaultNamespaces());
    return {
        scope: globalScope,
        namespaces,
    };
}
exports.computeGlobal = computeGlobal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dsb2JhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBEQUFrQztBQUNsQywyQ0FBNkI7QUFFN0IsaUNBQTZDO0FBQzdDLG1EQUFtRjtBQXNCbkYsU0FBZ0IsaUJBQWlCO0lBQy9CLE9BQU8sbUJBQVMsQ0FBQyxHQUFHLENBQXVCO1FBQ3pDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLG1CQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsbUJBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxtQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFORCw4Q0FNQztBQUVNLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBYSxFQUFFLENBQWEsRUFBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxpQ0FBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUFsRyxRQUFBLGVBQWUsbUJBQW1GO0FBRS9HOztHQUVHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFDLE9BQWdCOztJQUM1QyxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxPQUFPO1NBQ3RDLEdBQUcsQ0FDRixDQUFDLElBQUksRUFBRSxFQUFFOztRQUNQLE9BQUEsTUFBQSxNQUFBLE1BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsV0FBVywwQ0FBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTs7WUFDNUMsT0FBQSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssbUJBQW1CO2dCQUN0QyxVQUFVLENBQUMsSUFBSSxLQUFLLG1CQUFtQjtnQkFDdkMsVUFBVSxDQUFDLElBQUksS0FBSyxpQkFBaUI7Z0JBQ3JDLFVBQVUsQ0FBQyxJQUFJLEtBQUssaUJBQWlCO2dCQUNyQyxVQUFVLENBQUMsSUFBSSxLQUFLLGlCQUFpQixDQUFDO2lCQUN4QyxNQUFBLFVBQVUsQ0FBQyxJQUFJLDBDQUFFLElBQUksQ0FBQTtnQkFDbkIsQ0FBQyxDQUFDLFVBQVU7Z0JBQ1osQ0FBQyxDQUFDLFNBQVUsQ0FBQTtTQUFBLENBQ2YsbUNBQUksRUFBRSxDQUFBO0tBQUEsQ0FDVjtTQUNBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ2pDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDO0lBRXhDLE1BQU0sV0FBVyxHQUFHLGlCQUFpQjtTQUNsQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxXQUFDLE9BQUEsbUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsSUFBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQWlCLENBQUEsRUFBQSxDQUFDO1NBQ3hFLE1BQU0sQ0FDTCxNQUFBLE1BQUEsT0FBTyxDQUFDLGlCQUFpQiwwQ0FBRSxHQUFHLENBQzVCLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FDWCxtQkFBUyxDQUFDLEdBQUcsQ0FBQztRQUNaLENBQUMsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUM7S0FDckcsQ0FBaUIsQ0FDckIsbUNBQUksRUFBRSxDQUNSO1NBQ0EsTUFBTSxDQUFDLE1BQUEsTUFBQSxPQUFPLENBQUMsU0FBUywwQ0FBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLG1CQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFpQixDQUFDLG1DQUFJLEVBQUUsQ0FBQztTQUNuSCxNQUFNLENBQUMsaUNBQWlCLEVBQUUsSUFBQSxpQ0FBaUIsR0FBRSxDQUFDLENBQUM7SUFFbEQsTUFBTSxVQUFVLEdBQUcsaUJBQWlCO1NBQ2pDLEdBQUcsQ0FDRixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQ2IsbUJBQVMsQ0FBQyxHQUFHLENBQUM7UUFDWixDQUFDLElBQUEsbUJBQVksRUFBQyxVQUFVLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxDQUFDLEVBQUUsbUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUEsY0FBTyxFQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBaUI7S0FDdkgsQ0FBZSxDQUNuQjtTQUNBLE1BQU0sQ0FDTCxNQUFBLE1BQUEsT0FBTyxDQUFDLGlCQUFpQiwwQ0FBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUMxQyxtQkFBUyxDQUFDLEdBQUcsQ0FBQztRQUNaLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxtQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFpQixDQUFDO0tBQ2pJLENBQUMsQ0FDSCxtQ0FBSSxFQUFFLENBQ1I7U0FDQSxNQUFNLENBQ0wsTUFBQSxNQUFBLE9BQU8sQ0FBQyxTQUFTLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ2xDLG1CQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsbUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUEsY0FBTyxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBaUIsQ0FBQyxDQUFDLENBQUMsQ0FDckgsbUNBQUksRUFBRSxDQUNSO1NBQ0EsTUFBTSxDQUFDLHVCQUFlLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBRWhELE9BQU87UUFDTCxLQUFLLEVBQUUsV0FBVztRQUNsQixVQUFVO0tBQ1gsQ0FBQztBQUNKLENBQUM7QUF4REQsc0NBd0RDIn0=