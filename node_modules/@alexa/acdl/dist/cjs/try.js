"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRight = exports.isLeft = exports.right = exports.left = exports.TryMonad = exports.Try = exports.isTry = exports.isFailure = void 0;
function isFailure(a) {
    return a.kind === "Failure";
}
exports.isFailure = isFailure;
/**
 * Check if a value is an instance of `Try`.
 */
function isTry(a) {
    return a && typeof a.getOrThrow === "function";
}
exports.isTry = isTry;
/**
 * Monad for safely calling a function that can throw errors.
 *
 * @param get function so safely call
 * @param errorHandler optional handler for transforming errors
 */
function Try(get, errorHandler) {
    return new TryMonad(get, errorHandler);
}
exports.Try = Try;
/**
 * Encapsulates a computation that may throw errors.
 */
class TryMonad {
    constructor(thunk, errorHandler) {
        Object.defineProperty(this, "thunk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: thunk
        });
        Object.defineProperty(this, "errorHandler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: errorHandler
        });
    }
    map(f, err) {
        return Try(() => f(this.thunk()), err || this.errorHandler);
    }
    flatMap(f, err) {
        return Try(() => f(this.thunk()).getOrThrow(), err || this.errorHandler);
    }
    resolve(context) {
        try {
            return this.thunk();
        }
        catch (err) {
            if (this.errorHandler === undefined && err.code === undefined) {
                return undefined;
            }
            context.errors.push(...(this.errorHandler ? this.errorHandler(err) : [err]));
        }
        return undefined;
    }
    getOrDefault(t) {
        try {
            return this.getOrThrow();
        }
        catch (err) {
            return t;
        }
    }
    getOrThrow(error) {
        try {
            return this.thunk();
        }
        catch (err) {
            throw error || err;
        }
    }
}
exports.TryMonad = TryMonad;
const left = (left) => ({ left });
exports.left = left;
const right = (right) => ({ right });
exports.right = right;
const isLeft = (a) => "left" in a;
exports.isLeft = isLeft;
const isRight = (a) => "Right" in a;
exports.isRight = isRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQSxTQUFnQixTQUFTLENBQUMsQ0FBTTtJQUM5QixPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO0FBQzlCLENBQUM7QUFGRCw4QkFFQztBQU9EOztHQUVHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFDLENBQU07SUFDMUIsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQztBQUNqRCxDQUFDO0FBRkQsc0JBRUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLEdBQUcsQ0FBSSxHQUFZLEVBQUUsWUFBMkI7SUFDOUQsT0FBTyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUZELGtCQUVDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLFFBQVE7SUFDbkIsWUFBNEIsS0FBYyxFQUFrQixZQUEyQjs7Ozs7bUJBQTNEOzs7Ozs7bUJBQWdDOztJQUE4QixDQUFDO0lBRXBGLEdBQUcsQ0FBSSxDQUFjLEVBQUUsR0FBa0I7UUFDOUMsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLE9BQU8sQ0FBSSxDQUF3QixFQUFFLEdBQWtCO1FBQzVELE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxPQUFPLENBQUMsT0FBcUI7UUFDbEMsSUFBSTtZQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3JCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssU0FBUyxJQUFLLEdBQWtCLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDN0UsT0FBTyxTQUFTLENBQUM7YUFDbEI7WUFDRCxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVNLFlBQVksQ0FBSSxDQUFJO1FBQ3pCLElBQUk7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUMxQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osT0FBTyxDQUFDLENBQUM7U0FDVjtJQUNILENBQUM7SUFFTSxVQUFVLENBQUMsS0FBVztRQUMzQixJQUFJO1lBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDckI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE1BQU0sS0FBSyxJQUFJLEdBQUcsQ0FBQztTQUNwQjtJQUNILENBQUM7Q0FDRjtBQXRDRCw0QkFzQ0M7QUFpQk0sTUFBTSxJQUFJLEdBQUcsQ0FBSSxJQUFPLEVBQVcsRUFBRSxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0FBQXpDLFFBQUEsSUFBSSxRQUFxQztBQUMvQyxNQUFNLEtBQUssR0FBRyxDQUFJLEtBQVEsRUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7QUFBN0MsUUFBQSxLQUFLLFNBQXdDO0FBQ25ELE1BQU0sTUFBTSxHQUFHLENBQU8sQ0FBZSxFQUFnQixFQUFFLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztBQUE5RCxRQUFBLE1BQU0sVUFBd0Q7QUFDcEUsTUFBTSxPQUFPLEdBQUcsQ0FBTyxDQUFlLEVBQWlCLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO0FBQWpFLFFBQUEsT0FBTyxXQUEwRCJ9