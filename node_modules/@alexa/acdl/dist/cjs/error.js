"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasTerminalErrors = exports.nameNotFound = exports.typeError = exports.sortErrors = exports.filterDuplicateErrors = exports.stringifyLocation = exports.stringifyProjectError = exports.stringifyError = exports.logProjectError = exports.logProjectWarnings = exports.logProjectErrors = exports.FileError = void 0;
const path_1 = __importDefault(require("path"));
const error_factory_1 = require("./error-factory");
/**
 * Used for errors in non ACDL files, most likely JSON files
 */
class FileError extends Error {
    constructor(message, uri) {
        super(message);
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: message
        });
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: uri
        });
        this.uri = uri;
        this.message = message;
    }
}
exports.FileError = FileError;
function logProjectErrors(errors) {
    errors.forEach(logProjectError);
}
exports.logProjectErrors = logProjectErrors;
function logProjectWarnings(errors) {
    if (errors !== undefined) {
        errors.filter((error) => error.code.category === "Warning" /* ErrorCategory.Warning */).forEach(logProjectError);
    }
}
exports.logProjectWarnings = logProjectWarnings;
function logProjectError(error) {
    console.error(stringifyProjectError(error));
}
exports.logProjectError = logProjectError;
/**
 * Gets a string out of an error if it is a ProjectError or a regular Javascript Error
 */
function stringifyError(error) {
    var _a;
    const errorAny = error;
    if ((_a = errorAny.code) === null || _a === void 0 ? void 0 : _a.category) {
        return stringifyProjectError(error);
    }
    return error.message;
}
exports.stringifyError = stringifyError;
function stringifyProjectError(error) {
    const errorStringArray = [];
    if (error.code.category === "Warning" /* ErrorCategory.Warning */) {
        errorStringArray.push(error.code.category);
    }
    if (error.loc && error.uri) {
        errorStringArray.push(stringifyLocation(error.uri, error.loc));
    }
    errorStringArray.push(error.message);
    return errorStringArray.join(": ");
}
exports.stringifyProjectError = stringifyProjectError;
function stringifyLocation(errorUri, loc) {
    // print the error relative to the current working directory so that links in the terminal link directly to the file
    const uri = path_1.default.isAbsolute(errorUri) ? path_1.default.relative(process.cwd(), errorUri) : errorUri;
    if (loc) {
        return `${uri}(${loc.begin.line},${loc.begin.character})`;
    }
    return uri;
}
exports.stringifyLocation = stringifyLocation;
function filterDuplicateErrors(errors) {
    const seen = new Set();
    const e = errors.filter((err) => {
        if (err === undefined) {
            return false;
        }
        const str = `${err.message}${JSON.stringify(err.loc)}`;
        if (seen.has(str)) {
            return false;
        }
        seen.add(str);
        return true;
    });
    return e;
}
exports.filterDuplicateErrors = filterDuplicateErrors;
/**
 * Sort error array based on uri and loc
 * error without uri directly compare the loc
 * error with uri first compare uri then compare the loc
 * when loc are identical, compare the error message
 * @param errors
 * @returns
 */
function sortErrors(errors) {
    return errors.sort((a, b) => {
        if (a.uri === undefined && b.uri === undefined) {
            const result = compareLoc(a.loc, b.loc);
            return result === 0 ? compareMessage(a.message, b.message) : result;
        }
        if (a.uri === undefined) {
            return -1;
        }
        if (b.uri === undefined) {
            return 1;
        }
        if (a.uri > b.uri) {
            return 1;
        }
        if (a.uri < b.uri) {
            return -1;
        }
        const result = compareLoc(a.loc, b.loc);
        return result === 0 ? compareMessage(a.message, b.message) : result;
    });
    /**
     * compare two location
     * error without loc is placed before other errors
     * when loc is exist, compare the start and then end
     * @param firstLoc
     * @param secondLoc
     * @returns
     */
    function compareLoc(firstLoc, secondLoc) {
        if (firstLoc === undefined && secondLoc === undefined) {
            return -1;
        }
        if (firstLoc === undefined) {
            return -1;
        }
        if (secondLoc === undefined) {
            return 1;
        }
        return firstLoc.begin.line !== secondLoc.begin.line
            ? firstLoc.begin.line - secondLoc.begin.line
            : firstLoc.begin.character !== secondLoc.begin.character
                ? firstLoc.begin.character - secondLoc.begin.character
                : firstLoc.end.line !== secondLoc.end.line
                    ? firstLoc.end.line - secondLoc.end.line
                    : firstLoc.end.character - secondLoc.end.character;
    }
    function compareMessage(firstMessage, secondMessage) {
        if (firstMessage <= secondMessage) {
            return -1;
        }
        return 1;
    }
}
exports.sortErrors = sortErrors;
function typeError(actual, expected, scope, errorExpr) {
    return error_factory_1.ValidationErrorFactory.TypeError({
        expr: (0, error_factory_1.getExpressionIfLocField)(errorExpr, scope),
        attributes: {
            actualType: actual.toString(scope),
            expectedType: typeof expected === "string" ? expected : expected.toString(scope),
        },
    });
}
exports.typeError = typeError;
function nameNotFound(name, loc, node) {
    var _a, _b;
    const fqn = name.name ? [name.name] : [];
    let context = node === null || node === void 0 ? void 0 : node.context;
    while ((context === null || context === void 0 ? void 0 : context.kind) === "PropertyReference") {
        if (((_a = context.name) === null || _a === void 0 ? void 0 : _a.name) === undefined) {
            break;
        }
        fqn.push((_b = context.name) === null || _b === void 0 ? void 0 : _b.name);
        context = context.context;
    }
    return error_factory_1.ValidationErrorFactory.NameNotFound({
        expr: name,
        attributes: {
            name: fqn.join("."),
        },
    });
}
exports.nameNotFound = nameNotFound;
function hasTerminalErrors(errors) {
    return errors.some((error) => isTerminalError(error));
}
exports.hasTerminalErrors = hasTerminalErrors;
function isTerminalError(error) {
    return error.code.category !== "Warning" /* ErrorCategory.Warning */;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLG1EQUFpSTtBQWFqSTs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLEtBQUs7SUFDbEMsWUFBbUIsT0FBZSxFQUFTLEdBQVc7UUFDcEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7OzttQkFERTs7Ozs7O21CQUF3Qjs7UUFFekMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFORCw4QkFNQztBQUlELFNBQWdCLGdCQUFnQixDQUFDLE1BQXNCO0lBQ3JELE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUZELDRDQUVDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsTUFBdUI7SUFDeEQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3hCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSwwQ0FBMEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUNsRztBQUNILENBQUM7QUFKRCxnREFJQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxLQUFtQjtJQUNqRCxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUZELDBDQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixjQUFjLENBQUMsS0FBWTs7SUFDekMsTUFBTSxRQUFRLEdBQUcsS0FBWSxDQUFDO0lBQzlCLElBQUksTUFBQSxRQUFRLENBQUMsSUFBSSwwQ0FBRSxRQUFRLEVBQUU7UUFDM0IsT0FBTyxxQkFBcUIsQ0FBQyxLQUE0QixD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