"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadGeneratedInteractionModelModules = exports.loadGeneratedInteractionModelModulesSync = exports.scanPackages = exports.scanPackagesSync = exports.loadSlotTypes = exports.loadInteractionModelsContent = exports.loadInteractionModelsContentSync = exports.getInteractionModelFiles = exports.getInteractionModelFilesSync = exports.loadResponseTemplates = exports.loadResponseTemplatesSync = exports.loadBundledPackage = exports.loadBundledPackageSync = exports.loadSourceDirectory = exports.loadSourceDirectorySync = exports.loadPackageConfig = exports.loadPackageConfigSync = exports.loadPackage = exports.loadPackageSync = exports.DefaultInclude = exports.DefaultBuildDir = exports.ProjectVersion = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const ask = __importStar(require("./ast"));
const source_file_1 = require("./source-file");
const util_1 = require("./util");
const constants_1 = require("./constants");
const parse_1 = require("./parse");
const error_factory_1 = require("./error-factory");
const im_module_generator_1 = require("./im-module-generator");
const transformUIProject_1 = require("./transformUIProject");
/**
 * Enum for specifying the version of an ASK Project.
 */
var ProjectVersion;
(function (ProjectVersion) {
    /**
     * Beta 1 project version requires no package.json - everything is driven by `ask-resources.json` or file system convention.
     */
    ProjectVersion["Beta1"] = "beta1";
    /**
     * Beta 2 project is a standard NPM package driven by `package.json` or `ask.json`. Everything is driven by configuration.
     */
    ProjectVersion["Beta2"] = "beta2";
    ProjectVersion["SingleFile"] = "single";
    ProjectVersion["Latest"] = "beta2";
})(ProjectVersion = exports.ProjectVersion || (exports.ProjectVersion = {}));
/**
 * Default directory to synthesize ASKIR JSON files and other assets to during compilation.
 */
exports.DefaultBuildDir = "build";
/**
 * Default directory relative to the project root to look for ACDL files.
 */
exports.DefaultInclude = "src";
/**
 * Load a package's modules from the file system.
 *
 * package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param rootDir root directory of the package
 * @param config optional configuration for the package - it will be loaded from the file system if not provided.
 * @param isSrc set to true if this is a source package, false otherwise
 */
function loadPackageSync(rootDir, config, isSrc) {
    var _a, _b;
    config = config !== null && config !== void 0 ? config : loadPackageConfigSync(rootDir);
    const isLibrary = (_b = (_a = config === null || config === void 0 ? void 0 : config.ask) === null || _a === void 0 ? void 0 : _a.library) !== null && _b !== void 0 ? _b : false;
    if (isSrc && config === undefined) {
        // we're in a legacy configuration (no package.json file)
        const skillPackageDir = path_1.default.join(rootDir, "skill-package");
        const [modules, interactionModelFiles, responseTemplates] = [
            loadSourceDirectorySync(path_1.default.join(rootDir, "skill-package", "conversations")).filter((m) => m.content !== undefined),
            getInteractionModelFilesSync(skillPackageDir),
            loadResponseTemplatesSync(skillPackageDir),
        ];
        const interactionModels = loadInteractionModelsContentSync(interactionModelFiles);
        // Don't generate IM ASKIR modules if it's a UI skill
        const { isUISkill } = (0, transformUIProject_1.getUISkillInformation)(modules);
        const interactionModelModules = isUISkill
            ? []
            : loadGeneratedInteractionModelModulesSync(rootDir, interactionModelFiles, isSrc, isLibrary);
        const slotTypes = loadSlotTypes(interactionModels);
        return {
            interactionModels: interactionModelFiles,
            modules: [...modules, ...interactionModelModules],
            responseTemplates,
            slotTypes,
        };
    }
    if ((config === null || config === void 0 ? void 0 : config.ask) === undefined) {
        throw new Error(`'${rootDir}' is not a valid ASKIR package`);
    }
    else {
        const [interactionModelFiles, responseTemplates] = [getInteractionModelFilesSync(rootDir), loadResponseTemplatesSync(rootDir)];
        const interactionModels = loadInteractionModelsContentSync(interactionModelFiles);
        const slotTypes = loadSlotTypes(interactionModels);
        // load files from `srcDir` if this is a source package, otherwise `outDir`
        const moduleDir = isSrc ? config.ask.srcDir : config.ask.outDir;
        const absoluteModuleDir = path_1.default.isAbsolute(moduleDir) ? moduleDir : path_1.default.join(rootDir, moduleDir);
        const sourceModules = loadSourceDirectorySync(absoluteModuleDir).filter((m) => m.content !== undefined);
        const { isUISkill } = (0, transformUIProject_1.getUISkillInformation)(sourceModules);
        // Skip IM generation if it's a UI skill
        const interactionModelModules = isUISkill
            ? []
            : loadGeneratedInteractionModelModulesSync(absoluteModuleDir, interactionModelFiles, isSrc, isLibrary);
        if ((0, util_1.isDirSync)(absoluteModuleDir)) {
            return {
                config,
                modules: [...sourceModules, ...interactionModelModules],
                responseTemplates,
                slotTypes,
                interactionModels: interactionModelFiles,
            };
        }
    }
    return undefined;
}
exports.loadPackageSync = loadPackageSync;
/**
 * Load a package's modules from the file system.
 *
 * package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param rootDir root directory of the package
 * @param config optional configuration for the package - it will be loaded from the file system if not provided.
 * @param isSrc set to true if this is a source package, false otherwise
 */
async function loadPackage(rootDir, config, isSrc) {
    var _a, _b;
    config = config !== null && config !== void 0 ? config : (await loadPackageConfig(rootDir));
    const isLibrary = (_b = (_a = config === null || config === void 0 ? void 0 : config.ask) === null || _a === void 0 ? void 0 : _a.library) !== null && _b !== void 0 ? _b : false;
    if (isSrc && config === undefined) {
        // we're in a legacy configuration (no package.json file)
        const skillPackageDir = path_1.default.join(rootDir, "skill-package");
        const baseDir = path_1.default.join(rootDir, "skill-package", "conversations");
        const [modules, interactionModelFiles, responseTemplates] = await Promise.all([
            loadSourceDirectory(path_1.default.join(rootDir, "skill-package", "conversations")).then((modules) => modules.filter((m) => m.content !== undefined)),
            getInteractionModelFiles(skillPackageDir),
            loadResponseTemplates(skillPackageDir),
        ]);
        const interactionModels = await loadInteractionModelsContent(interactionModelFiles);
        // Don't generate IM ASKIR modules if it's a UI skill
        const { isUISkill } = (0, transformUIProject_1.getUISkillInformation)(modules);
        const interactionModelModules = isUISkill
            ? []
            : await loadGeneratedInteractionModelModules(baseDir, interactionModelFiles, isSrc, isLibrary);
        const slotTypes = loadSlotTypes(interactionModels);
        return {
            interactionModels: interactionModelFiles,
            modules: [...modules, ...interactionModelModules],
            responseTemplates,
            slotTypes,
        };
    }
    if ((config === null || config === void 0 ? void 0 : config.ask) === undefined) {
        throw new Error(`'${rootDir}' is not a valid ASKIR package`);
    }
    else {
        const [interactionModelFiles, responseTemplates] = await Promise.all([
            getInteractionModelFiles(rootDir),
            loadResponseTemplates(rootDir),
        ]);
        const interactionModels = await loadInteractionModelsContent(interactionModelFiles);
        const slotTypes = loadSlotTypes(interactionModels);
        // load files from `srcDir` if this is a source package, otherwise `outDir`
        const moduleDir = isSrc ? config.ask.srcDir : config.ask.outDir;
        const absoluteModuleDir = path_1.default.isAbsolute(moduleDir) ? moduleDir : path_1.default.join(rootDir, moduleDir);
        // Skip IM generation if it's a UI skill
        const sourceModules = (await loadSourceDirectory(absoluteModuleDir)).filter((m) => m.content !== undefined);
        // Don't generate IM ASKIR modules if it's a UI skill
        const { isUISkill } = (0, transformUIProject_1.getUISkillInformation)(sourceModules);
        const interactionModelModules = isUISkill
            ? []
            : await loadGeneratedInteractionModelModules(absoluteModuleDir, interactionModelFiles, isSrc, isLibrary);
        if (await (0, util_1.isDir)(absoluteModuleDir)) {
            return {
                config,
                modules: [...sourceModules, ...interactionModelModules],
                responseTemplates,
                slotTypes,
                interactionModels: interactionModelFiles,
            };
        }
    }
    return undefined;
}
exports.loadPackage = loadPackage;
/**
 * Loads a package config from a directory.
 *
 * A package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param dir root directory of the package to load.
 */
function loadPackageConfigSync(dir) {
    var _a, _b;
    const pkgJsonPath = path_1.default.join(dir, "package.json");
    const pkgJson = (0, util_1.readJsonFileSync)(pkgJsonPath);
    if (pkgJson === undefined) {
        return undefined;
    }
    if (pkgJson.ask === undefined) {
        const askJsonPath = path_1.default.join(dir, "ask.json");
        if ((0, util_1.isFileSync)(askJsonPath)) {
            pkgJson.ask = (0, util_1.readJsonFileSync)(askJsonPath);
            if (pkgJson.ask === undefined) {
                throw new Error(`invalid ASK configuration: '${askJsonPath}'`);
            }
        }
        else {
            // is not an ASK package.
            return undefined;
        }
    }
    // fill default values if fields are not specified
    pkgJson.ask.outDir = (_a = pkgJson.ask.outDir) !== null && _a !== void 0 ? _a : exports.DefaultBuildDir;
    pkgJson.ask.srcDir = (_b = pkgJson.ask.srcDir) !== null && _b !== void 0 ? _b : exports.DefaultInclude;
    // projectVersion is an internal configuration only, so we must ignore any loaded value.
    pkgJson.ask.projectVersion = ProjectVersion.Latest;
    return pkgJson;
}
exports.loadPackageConfigSync = loadPackageConfigSync;
/**
 * Loads a package config from a directory.
 *
 * A package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param dir root directory of the package to load.
 */
async function loadPackageConfig(dir) {
    var _a, _b;
    const pkgJsonPath = path_1.default.join(dir, "package.json");
    const pkgJson = await (0, util_1.readJsonFile)(pkgJsonPath);
    if (pkgJson === undefined) {
        return undefined;
    }
    if (pkgJson.ask === undefined) {
        const askJsonPath = path_1.default.join(dir, "ask.json");
        if (await (0, util_1.isFile)(askJsonPath)) {
            pkgJson.ask = await (0, util_1.readJsonFile)(askJsonPath);
            if (pkgJson.ask === undefined) {
                throw new Error(`invalid ASK configuration: '${askJsonPath}'`);
            }
        }
        else {
            // is not an ASK package.
            return undefined;
        }
    }
    // fill default values if fields are not specified
    pkgJson.ask.outDir = (_a = pkgJson.ask.outDir) !== null && _a !== void 0 ? _a : exports.DefaultBuildDir;
    pkgJson.ask.srcDir = (_b = pkgJson.ask.srcDir) !== null && _b !== void 0 ? _b : exports.DefaultInclude;
    // projectVersion is an internal configuration only, so we must ignore any loaded value.
    pkgJson.ask.projectVersion = ProjectVersion.Latest;
    return pkgJson;
}
exports.loadPackageConfig = loadPackageConfig;
/**
 * Load ACDL and ASK Module source directory.
 *
 * @param baseDir directory to recursively scan
 */
function loadSourceDirectorySync(baseDir) {
    return load(baseDir);
    function load(subDir) {
        const files = fs_extra_1.default.readdirSync(subDir);
        return files
            .map((file) => {
            file = path_1.default.join(subDir, file);
            if ((0, util_1.isDirSync)(file)) {
                return load(file);
            }
            if (file.endsWith(".acdl")) {
                return [(0, parse_1.loadACDLFileSync)(baseDir, file, undefined)];
            }
            if ((0, util_1.isGeneratedFile)(file) && file.endsWith(".json")) {
                return [];
            }
            if (file.endsWith(".json")) {
                const loadedSourceFile = (0, parse_1.loadModuleFileSync)(baseDir, file);
                if (!loadedSourceFile) {
                    return [(0, source_file_1.sourceFile)(baseDir, file, undefined)];
                }
                return [
                    (0, source_file_1.sourceFile)(loadedSourceFile.baseDir, loadedSourceFile.uri, loadedSourceFile.content, [
                        ...(loadedSourceFile.errors || []),
                        error_factory_1.ValidationErrorFactory.ACDLCompilationSkipped({
                            attributes: {
                                filePath: file,
                            },
                        }),
                    ]),
                ];
            }
            return [
                (0, source_file_1.sourceFile)(baseDir, file, new ask.Module(file, ask.ModuleSchema), [
                    error_factory_1.ValidationErrorFactory.ACDLCompilationSkipped({
                        attributes: {
                            filePath: file,
                        },
                    }),
                ]),
            ];
        })
            .reduce((a, b) => a.concat(b), []);
    }
}
exports.loadSourceDirectorySync = loadSourceDirectorySync;
/**
 * Load ACDL and ASK Module source directory.
 *
 * @param baseDir directory to recursively scan
 */
async function loadSourceDirectory(baseDir) {
    return load(baseDir);
    async function load(subDir) {
        const files = await (0, util_1.readdir)(subDir);
        return (await Promise.all(files.map(async (file) => {
            file = path_1.default.join(subDir, file);
            if (await (0, util_1.isDir)(file)) {
                return load(file);
            }
            if (file.endsWith(".acdl")) {
                return [await (0, parse_1.loadACDLFile)(baseDir, file, undefined)];
            }
            if ((0, util_1.isGeneratedFile)(file) && file.endsWith(".json")) {
                return [];
            }
            if (file.endsWith(".json")) {
                const loadedSourceFile = await (0, parse_1.loadModuleFile)(baseDir, file);
                if (!loadedSourceFile) {
                    return [(0, source_file_1.sourceFile)(baseDir, file, undefined)];
                }
                return [
                    (0, source_file_1.sourceFile)(loadedSourceFile.baseDir, loadedSourceFile.uri, loadedSourceFile.content, [
                        ...(loadedSourceFile.errors || []),
                        error_factory_1.ValidationErrorFactory.ACDLCompilationSkipped({
                            attributes: {
                                filePath: file,
                            },
                        }),
                    ]),
                ];
            }
            return [
                (0, source_file_1.sourceFile)(baseDir, file, new ask.Module(file, ask.ModuleSchema), [
                    error_factory_1.ValidationErrorFactory.ACDLCompilationSkipped({
                        attributes: {
                            filePath: file,
                        },
                    }),
                ]),
            ];
        }))).reduce((a, b) => a.concat(b), []);
    }
}
exports.loadSourceDirectory = loadSourceDirectory;
/**
 * We load this manifest file which is output by the `ac-core/bundle.js` script. We use it to
 * determine the version of a bundled `@alexa/schema` or `@alexa/ac-core` library to load.
 */
const libManifest = require("../lib/manifest.json");
/**
 * Load ASKIR folders from a package bundled within the `lib/` folder.
 *
 * @param name name of the package
 * @returns the bundled ASK Package.
 */
function loadBundledPackageSync(name) {
    const version = libManifest.versions[`@alexa/${name}`];
    if (version === undefined) {
        throw new Error(`unknown bundled package '${name}'`);
    }
    const dir = path_1.default.join(__dirname, "..", "..", "dist", "lib", `${name}-${version}`);
    return asPackage(loadSourceDirectorySync(dir));
    function asPackage(modules) {
        return {
            modules: modules.filter((m) => m.content !== undefined),
            config: {
                name: `@alexa/${name}`,
                version,
            },
        };
    }
}
exports.loadBundledPackageSync = loadBundledPackageSync;
/**
 * Load ASKIR folders from a package bundled within the `lib/` folder.
 *
 * @param name name of the package
 * @returns the bundled ASK Package.
 */
async function loadBundledPackage(name) {
    const version = libManifest.versions[`@alexa/${name}`];
    if (version === undefined) {
        throw new Error(`unknown bundled package '${name}'`);
    }
    const dir = path_1.default.join(__dirname, "..", "..", "dist", "lib", `${name}-${version}`);
    return asPackage(await loadSourceDirectory(dir));
    function asPackage(modules) {
        return {
            modules: modules.filter((m) => m.content !== undefined),
            config: {
                name: `@alexa/${name}`,
                version,
            },
        };
    }
}
exports.loadBundledPackage = loadBundledPackage;
/**
 * Load the Project's prompts from `responses/prompts`.
 *
 * @param config project configuration
 */
function loadResponseTemplatesSync(dir) {
    return ask.ResponseTemplateType.All.map((type) => {
        const promptsPath = path_1.default.join(dir, "response", getResponseTemplatePath(type));
        if ((0, util_1.isDirSync)(promptsPath)) {
            return fs_extra_1.default.readdirSync(promptsPath).map((file) => new ask.ResponseTemplate(path_1.default.resolve(promptsPath, file), file, type));
        }
        return [];
    }).reduce((a, b) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.concat(b)) !== null && _a !== void 0 ? _a : []; }, []);
}
exports.loadResponseTemplatesSync = loadResponseTemplatesSync;
/**
 * Load the Project's prompts from `responses/prompts`.
 *
 * @param config project configuration
 */
async function loadResponseTemplates(dir) {
    return (await Promise.all(ask.ResponseTemplateType.All.map(async (type) => {
        const promptsPath = path_1.default.join(dir, "response", getResponseTemplatePath(type));
        if (await (0, util_1.isDir)(promptsPath)) {
            return (await (0, util_1.readdir)(promptsPath)).map((file) => new ask.ResponseTemplate(path_1.default.resolve(promptsPath, file), file, type));
        }
        return [];
    }))).reduce((a, b) => a === null || a === void 0 ? void 0 : a.concat(b), []);
}
exports.loadResponseTemplates = loadResponseTemplates;
function getResponseTemplatePath(type) {
    if (type === ask.ResponseTemplateType.Display) {
        return constants_1.Constants.DisplayFolderName;
    }
    return constants_1.Constants.PromptsFolderName;
}
/**
 * Synchronously Load Interaction Models' file path.
 *
 * @param config project configuration
 */
function getInteractionModelFilesSync(dir) {
    const interactionModels = [];
    const imDir = path_1.default.join(dir, "interactionModels", "custom");
    if ((0, util_1.isDirSync)(imDir)) {
        const fileNames = fs_extra_1.default.readdirSync(imDir);
        for (const fileName of fileNames) {
            const file = path_1.default.parse(fileName);
            const locale = file.name;
            file.name = file.name.replace("-", "_");
            if (file.ext === ".json" && Object.values(ask.Locale).includes(file.name)) {
                const imPath = path_1.default.join(imDir, fileName);
                if ((0, util_1.isFileSync)(imPath)) {
                    interactionModels.push({
                        file: imPath,
                        locale: locale,
                    });
                }
            }
        }
    }
    return interactionModels;
}
exports.getInteractionModelFilesSync = getInteractionModelFilesSync;
/**
 * Asynchronously Load Interaction Models' file path.
 *
 * @param config project configuration
 */
async function getInteractionModelFiles(dir) {
    const interactionModels = [];
    const imDir = path_1.default.join(dir, "interactionModels", "custom");
    if (await (0, util_1.isDir)(imDir)) {
        const fileNames = await (0, util_1.readdir)(imDir);
        for (const fileName of fileNames) {
            const file = path_1.default.parse(fileName);
            const locale = file.name;
            file.name = file.name.replace("-", "_");
            if (file.ext === ".json" && Object.values(ask.Locale).includes(file.name)) {
                const imPath = path_1.default.join(imDir, fileName);
                if (await (0, util_1.isFile)(imPath)) {
                    interactionModels.push({
                        file: imPath,
                        locale: locale,
                    });
                }
            }
        }
    }
    return interactionModels;
}
exports.getInteractionModelFiles = getInteractionModelFiles;
/**
 * Synchronously load the JSON from the project's interaction model files into a locale to model map.
 *
 * @param interactionModelFiles the interaction model files to load
 */
function loadInteractionModelsContentSync(interactionModelsFiles) {
    const interactionModels = new Map();
    for (const interactionModelFile of interactionModelsFiles) {
        const model = (0, util_1.readJsonFileSync)(interactionModelFile.file);
        if (model) {
            const locale = interactionModelFile.locale.replace("-", "_");
            interactionModels.set(locale, model);
        }
    }
    return interactionModels;
}
exports.loadInteractionModelsContentSync = loadInteractionModelsContentSync;
/**
 * Asynchronously load the JSON from the project's interaction model files into a locale to model map.
 *
 * @param interactionModelFiles the interaction model files to load
 */
async function loadInteractionModelsContent(interactionModelsFiles) {
    const interactionModels = new Map();
    await Promise.all(interactionModelsFiles.map(async (interactionModelFile) => {
        const model = await (0, util_1.readJsonFile)(interactionModelFile.file);
        if (model) {
            const locale = interactionModelFile.locale.replace("-", "_");
            interactionModels.set(locale, model);
        }
    }));
    return interactionModels;
}
exports.loadInteractionModelsContent = loadInteractionModelsContent;
/**
 * Load slot types from a project's Interaction Models.
 *
 * @param models a map of locales to interaction model json
 */
function loadSlotTypes(models) {
    var _a, _b, _c;
    const typeToLocale = new Map();
    for (const [locale, model] of models) {
        // Need this to support UI interaction models https://github.com/alexa/ask-ac/issues/1187
        if (model.interactionModel === undefined) {
            model.interactionModel = {
                languageModel: model.languageModel,
            };
        }
        const types = (_a = model === null || model === void 0 ? void 0 : model.interactionModel) === null || _a === void 0 ? void 0 : _a.languageModel.types;
        const slotTypes = (_b = types === null || types === void 0 ? void 0 : types.filter((t) => (t === null || t === void 0 ? void 0 : t.name) !== undefined)) !== null && _b !== void 0 ? _b : [];
        for (const slot of slotTypes) {
            if ((0, util_1.isBuiltinSlotType)(slot.name)) {
                continue;
            }
            else if (typeToLocale.has(slot.name)) {
                (_c = typeToLocale.get(slot.name)) === null || _c === void 0 ? void 0 : _c.push(locale);
            }
            else {
                typeToLocale.set(slot.name, [locale]);
            }
        }
    }
    const slots = [];
    for (const [name, locale] of typeToLocale) {
        slots.push(new ask.SlotType(new ask.Name(`slotTypes.${name}`), locale));
    }
    return slots.length > 0 ? slots : undefined;
}
exports.loadSlotTypes = loadSlotTypes;
/**
 * Scan all folders in a directory for ask packages and return all their Module files.
 *
 * @param dir directory to scan for packages.
 */
function scanPackagesSync(dir) {
    // throw error if we can't access this directory
    try {
        fs_extra_1.default.accessSync(dir, fs_extra_1.default.constants.R_OK);
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // no such file, so return empty
            return [];
        }
        // file exists but we can't read - throw.
        throw err;
    }
    if ((0, util_1.isFileSync)(dir)) {
        // ignore files, we're only looking inside folders
        return [];
    }
    const packageJson = path_1.default.join(dir, "package.json");
    if ((0, util_1.isFileSync)(packageJson)) {
        // this folder is a NPM package
        const node_modules = path_1.default.join(dir, "node_modules");
        const config = loadPackageConfigSync(dir);
        if (config !== undefined) {
            // this package contains ASK artifacts
            return [loadPackageSync(dir, config, false), ...scanPackagesSync(node_modules)].filter((p) => p !== undefined);
        }
        // package is not an ASK package, but it may still containing dependencies in its node_modules that are, let's check them too
        return scanPackagesSync(node_modules);
    }
    // the folder is not an ASK package, it may be an NPM organization, i.e, @alexa/.., so let's check all the folders contained within.
    const ls = fs_extra_1.default.readdirSync(dir).map((d) => path_1.default.join(dir, d));
    const scan = ls.map((p) => scanPackagesSync(p));
    return scan.reduce((a, b) => a.concat(b), []);
}
exports.scanPackagesSync = scanPackagesSync;
/**
 * Scan all folders in a directory for ask packages and return all their Module files.
 *
 * @param dir directory to scan for packages.
 */
async function scanPackages(dir) {
    // throw error if we can't access this directory
    try {
        await fs_extra_1.default.access(dir, fs_extra_1.default.constants.R_OK);
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // no such file, so return empty
            return [];
        }
        // file exists but we can't read - throw.
        throw err;
    }
    if (await (0, util_1.isFile)(dir)) {
        // ignore files, we're only looking inside folders
        return [];
    }
    const packageJson = path_1.default.join(dir, "package.json");
    if (await (0, util_1.isFile)(packageJson)) {
        // this folder is a NPM package
        const node_modules = path_1.default.join(dir, "node_modules");
        const config = await loadPackageConfig(dir);
        if (config !== undefined) {
            // this package contains ASK artifacts
            return [(await loadPackage(dir, config, false)), ...(await scanPackages(node_modules))].filter((p) => p !== undefined);
        }
        // package is not an ASK package, but it may still containing dependencies in its node_modules that are, let's check them too
        return scanPackages(node_modules);
    }
    // the folder is not an ASK package, it may be an NPM organization, i.e, @alexa/.., so let's check all the folders contained within.
    const ls = (await (0, util_1.readdir)(dir)).map((d) => path_1.default.join(dir, d));
    const scan = await Promise.all(ls.map((p) => scanPackages(p)));
    return scan.reduce((a, b) => a.concat(b), []);
}
exports.scanPackages = scanPackages;
/**
 * Loads generated interaction model modules from the directory if it is a source
 * package and not a library.
 *
 * @param dir the directory to mock the source location of the modules.
 * @param imFiles the interaction model files to generate.
 * @param isSrc whether the package contains source or external modules
 * @param isLibrary whether the package is a NPM library.
 * @returns the generated interaction model modules.
 */
function loadGeneratedInteractionModelModulesSync(dir, imFiles, isSrc, isLibrary) {
    if (isSrc && !isLibrary) {
        return new im_module_generator_1.InteractionModelModuleGenerator(dir, imFiles).generateInteractionModelModulesSync();
    }
    return [];
}
exports.loadGeneratedInteractionModelModulesSync = loadGeneratedInteractionModelModulesSync;
/**
 * Loads generated interaction model modules from the directory if it is a source
 * package and not a library.
 *
 * @param dir the directory to mock the source location of the modules.
 * @param imFiles the interaction model files to generate.
 * @param isSrc whether the package contains source or external modules
 * @param isLibrary whether the package is a NPM library.
 * @returns the generated interaction model modules.
 */
async function loadGeneratedInteractionModelModules(dir, imFiles, isSrc, isLibrary) {
    if (isSrc && !isLibrary) {
        return new im_module_generator_1.InteractionModelModuleGenerator(dir, imFiles).generateInteractionModelModules();
    }
    return [];
}
exports.loadGeneratedInteractionModelModules = loadGeneratedInteractionModelModules;
//# sourceMappingURL=data:application/json;base64,