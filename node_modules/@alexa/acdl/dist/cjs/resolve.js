"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveExpr = exports.resolveModule = exports.resolveProject = void 0;
const project_1 = require("./project");
const ask = __importStar(require("./ast"));
const visit_1 = require("./visit");
/**
 * Walks over all modules in the Project and performs all type and argument inference on the tree once to avoid repeating this cost later.
 *
 * @param project
 * @returns a project where all modules
 */
function resolveProject(project) {
    const checker = project.getTypeChecker();
    return new project_1.Project({
        config: project.config,
        external: project.external,
        source: {
            ...project.source,
            modules: project.sourceModules.map((mod) => ({
                ...mod,
                content: mod.content ? resolveModule(mod.content, checker) : undefined,
            })),
        },
    });
}
exports.resolveProject = resolveProject;
function resolveModule(mod, checker) {
    var _a;
    return new ask.Module(mod.uri, mod.schema, mod.namespace, mod.imports, mod.exports, (_a = mod.expressions) === null || _a === void 0 ? void 0 : _a.map((expr) => resolveExpr(expr, checker)));
}
exports.resolveModule = resolveModule;
function resolveExpr(expr, checker) {
    var _a, _b, _c, _d;
    if (expr.kind === "Call") {
        const apply = checker.getApply(expr);
        if (apply !== undefined) {
            const args = apply === null || apply === void 0 ? void 0 : apply.getArguments();
            // resolve the generic arguments
            const typeArgs = expr.genericArguments !== undefined
                ? (_a = expr.genericArguments) === null || _a === void 0 ? void 0 : _a.map((arg) => arg === null || arg === void 0 ? void 0 : arg.clone())
                : (_b = apply === null || apply === void 0 ? void 0 : apply.getGenericArguments()) === null || _b === void 0 ? void 0 : _b.map((type) => resolveTypeReference(type === null || type === void 0 ? void 0 : type.toTypeReference(), checker));
            const annotations = (_c = expr.annotations) === null || _c === void 0 ? void 0 : _c.map((annotation) => new ask.Annotation(resolveExpr(annotation.call, checker), annotation.loc));
            return new ask.Call((_d = expr.name) === null || _d === void 0 ? void 0 : _d.clone(), typeof expr.arguments === "string" ||
                typeof expr.arguments === "number" ||
                typeof expr.arguments === "boolean" ||
                expr.arguments === null ||
                expr.arguments === undefined
                ? expr.arguments
                : ask.isListLiteral(expr.arguments)
                    ? (0, visit_1.transformEachChild)(expr.arguments, (child) => resolveExpr(child, checker))
                    : typeof args === "object"
                        ? // TODO: is this preserving order and name locations
                            Object.entries(args).map(([name, arg], i) => new ask.Argument(new ask.Name(name), i, resolveExpr(arg.value, checker), arg.loc))
                        : undefined, typeArgs, annotations, expr.loc);
        }
    }
    const child = (0, visit_1.transformEachChild)(expr, (child) => resolveExpr(child, checker));
    return child;
}
exports.resolveExpr = resolveExpr;
function resolveTypeReference(type, checker) {
    var _a, _b, _c;
    if (type === undefined) {
        return undefined;
    }
    return new ask.TypeReference((_a = type.name) === null || _a === void 0 ? void 0 : _a.clone(), (_b = type.arguments) === null || _b === void 0 ? void 0 : _b.map((arg) => resolveTypeReference(arg, checker)), (_c = type.annotations) === null || _c === void 0 ? void 0 : _c.map((ann) => ann.clone()), undefined, undefined, // place the location of the resolved type arguments on the call's name
    true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQWtDO0FBQ2xDLDJDQUE2QjtBQUU3QixtQ0FBMkM7QUFFM0M7Ozs7O0dBS0c7QUFDSCxTQUFnQixjQUFjLENBQUMsT0FBZ0I7SUFDN0MsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pDLE9BQU8sSUFBSSxpQkFBTyxDQUFDO1FBQ2pCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtRQUN0QixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDMUIsTUFBTSxFQUFFO1lBQ04sR0FBRyxPQUFPLENBQUMsTUFBTTtZQUNqQixPQUFPLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzNDLEdBQUcsR0FBRztnQkFDTixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7YUFDdkUsQ0FBQyxDQUFDO1NBQ0o7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBYkQsd0NBYUM7QUFFRCxTQUFnQixhQUFhLENBQUMsR0FBZSxFQUFFLE9BQW9COztJQUNqRSxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FDbkIsR0FBRyxDQUFDLEdBQUcsRUFDUCxHQUFHLENBQUMsTUFBTSxFQUNWLEdBQUcsQ0FBQyxTQUFTLEVBQ2IsR0FBRyxDQUFDLE9BQU8sRUFDWCxHQUFHLENBQUMsT0FBTyxFQUNYLE1BQUEsR0FBRyxDQUFDLFdBQVcsMENBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFF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