"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmapiClient = exports.SkillStage = void 0;
const url = __importStar(require("url"));
const https = __importStar(require("https"));
const fs = __importStar(require("fs-extra"));
const smapi = __importStar(require("ask-smapi-sdk"));
const CLIENT_ID = "amzn1.application-oa2-client.aad322b5faab44b980c8f87f94fbac56";
const CLIENT_CONFIRMATION = "1642d8869b829dda3311d6c6539f3ead55192e3fc767b9071c888e60ef151cf9";
/**
 * Skill Stage.
 */
var SkillStage;
(function (SkillStage) {
    SkillStage["DEVELOPMENT"] = "development";
    SkillStage["CERTIFICATION"] = "certification";
    SkillStage["LIVE"] = "live";
})(SkillStage = exports.SkillStage || (exports.SkillStage = {}));
/**
 * A SMAPI client.
 */
class SmapiClient {
    constructor(
    /**
     * LWA profile to use when making calls.
     */
    profile, 
    /**
     * Optionally specify a different SMAPI endpoint.
     */
    smapiEndpoint, 
    /**
     * Optionally specify a different LWA authorization endpoint.
     */
    lwaTokenEndpoint) {
        Object.defineProperty(this, "profile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: profile
        });
        Object.defineProperty(this, "smapiEndpoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: smapiEndpoint
        });
        Object.defineProperty(this, "lwaTokenEndpoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: lwaTokenEndpoint
        });
        /**
         * Instantiated `SkillManagementServiceClient`.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        let clientBuilder = new smapi.CustomSmapiClientBuilder();
        if (smapiEndpoint) {
            clientBuilder = clientBuilder.withApiEndpoint(smapiEndpoint);
        }
        if (lwaTokenEndpoint) {
            clientBuilder = clientBuilder.withAuthEndpoint(lwaTokenEndpoint);
        }
        this.client = clientBuilder
            .withRefreshTokenConfig({
            refreshToken: this.profile.token.refresh_token,
            /**
             * Client ID and Secret of the ASK CLI's default LWA client.
             *
             * @see https://github.com/alexa/ask-cli/blob/1d38e15fdf6bf6e23c2f30e4e01db94f3c2c39b6/lib/utils/constants.js#L445-L451
             */
            clientId: this.profile.client_id || getClientId(),
            clientSecret: this.profile.client_secret || getClientConfirmation(),
        })
            .client();
    }
    /**
     * Delete a Skill.
     *
     * @param skillId ID of the skill to delete.
     */
    deleteSkill(skillId) {
        return this.client.deleteSkillV1(skillId);
    }
    /**
     * Enables a skill for given stage.
     *
     * @param skillId Id of the skill to enable.
     * @param stage Stage to enable.
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-enablement.html#enable-a-skill
     */
    enableSkill(skillId, stage) {
        return this.client.setSkillEnablementV1(skillId, stage);
    }
    /**
     * Create an upload URL.
     *
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#create-upload-url
     */
    async createUploadUrl() {
        const location = (await this.client.createUploadUrlV1()).uploadUrl;
        if (location === undefined) {
            throw new Error(`failed to retrieve upload url`);
        }
        return location;
    }
    /**
     * Upload a Skill Package ZIP file to a URL.
     *
     * @param skillPackageZipPath path to a Skill Package ZIP on disk
     * @param uploadUrl url to upload Skill Package
     */
    async uploadSkillPackage(skillPackageZipPath, uploadUrl) {
        const parsedUrl = url.parse(uploadUrl); // TODO: use non-deprecated function
        const skillPackage = await fs.readFile(skillPackageZipPath);
        await new Promise((resolve, reject) => {
            const req = https.request({
                method: "PUT",
                port: 443,
                hostname: parsedUrl.hostname,
                path: parsedUrl.path,
                headers: {
                    "Content-Type": "application/zip",
                    "Content-Length": skillPackage.length,
                },
            }, (res) => {
                res.on("close", resolve);
                res.on("data", console.log);
            });
            req.on("error", reject);
            req.write(skillPackage);
            req.end();
        });
    }
    /**
     * Create a new Skill with a Skill Manifest and return the new Skill ID.
     *
     * @param manifest initial Skill Manifest
     */
    async createSkill(manifest) {
        const response = await this.client.createSkillForVendorV1({
            vendorId: this.profile.vendor_id,
            manifest,
        });
        const { skillId } = response;
        if (skillId === undefined) {
            throw new Error(`failed to receive a Skill ID when creating Skill`);
        }
        const waitForSuccess = async () => {
            var _a, _b, _c, _d, _e, _f;
            console.log("Checking Skill Status", skillId);
            const status = await this.client.getSkillStatusV1(skillId, "manifest");
            console.log(JSON.stringify(status, null, 2));
            if (((_b = (_a = status.manifest) === null || _a === void 0 ? void 0 : _a.lastUpdateRequest) === null || _b === void 0 ? void 0 : _b.status) === "FAILED") {
                throw new Error("Failed to create Skill");
            }
            else if (((_d = (_c = status.manifest) === null || _c === void 0 ? void 0 : _c.lastUpdateRequest) === null || _d === void 0 ? void 0 : _d.status) === "SUCCEEDED") {
            }
            else {
                console.log("Waiting for Skill Manifest Status", (_f = (_e = status.manifest) === null || _e === void 0 ? void 0 : _e.lastUpdateRequest) === null || _f === void 0 ? void 0 : _f.status);
                await new Promise((resolve) => setTimeout(resolve, 100));
                await waitForSuccess();
            }
        };
        await waitForSuccess();
        return skillId;
    }
    /**
     * Import a Skill Package from a URL and polls until the import succeeds or fails.
     *
     * @param skillId ID of the skill to deploy
     * @param skillPackageUrl URL of the uploaded skill-package
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#import-existing-skill
     */
    async importSkillPackage(skillId, skillPackageUrl) {
        return this.pollImportStatus(await this.importSkillPackageAsync(skillId, skillPackageUrl));
    }
    /**
     * Imports a Skill Package from a URIL and returns the Import ID. This method does
     * not wait until the import completed.
     *
     * @param skillId ID of the skill to deploy
     * @param skillPackageUrl URL of the uploaded skill-package
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#import-existing-skill
     */
    async importSkillPackageAsync(skillId, skillPackageUrl) {
        var _a;
        const importResponse = await this.client.callImportSkillPackageV1({ location: skillPackageUrl }, skillId);
        const importLocation = (_a = importResponse.headers.find((header) => header.key === "location")) === null || _a === void 0 ? void 0 : _a.value;
        if (!importLocation) {
            throw new Error("failed to retrieve import location from response headers");
        }
        const importId = importLocation.split("/v1/skills/imports/").pop();
        if (importId === undefined) {
            throw new Error("failed to strip import ID off of import pkg location");
        }
        return importId;
    }
    /**
     * Gets the import status of an ongoing import.
     *
     * @param importId ID of the import.
     */
    getImportStatus(importId) {
        return this.client.getImportStatusV1(importId);
    }
    /**
     * Poll the an import's status. This API will routinely check the status until it fails or succeeds.
     *
     * @param importId ID of the import to poll.
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#get-status-for-importid
     */
    async pollImportStatus(importId) {
        const response = await this.client.getImportStatusV1(importId);
        if (response.errors) {
            throw new Error(`get import status responded with errors:\n${response.errors.map((e) => JSON.stringify(e, null, 2)).join("\n")}`);
        }
        const { status } = response;
        if (status === "SUCCEEDED") {
            console.log("import suceeded");
        }
        else if (status === "IN_PROGRESS") {
            console.log(JSON.stringify(response, null, 2));
            await new Promise((resolve) => {
                setTimeout(resolve, 1000);
            });
            return this.pollImportStatus(importId);
        }
        else {
            console.log(JSON.stringify(response, null, 2));
            throw new Error(`import status: ${status}`);
        }
    }
}
exports.SmapiClient = SmapiClient;
/**
 * Returns the default client id to be used with the SMAPI SDK
 */
function getClientId() {
    return CLIENT_ID;
}
/**
 * Returns the default client confirmation to be used with the SMAPI SDK
 */
function getClientConfirmation() {
    return CLIENT_CONFIRMATION;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc21hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx5Q0FBMkI7QUFDM0IsNkNBQStCO0FBQy9CLDZDQUErQjtBQUMvQixxREFBdUM7QUFLdkMsTUFBTSxTQUFTLEdBQUcsK0RBQStELENBQUM7QUFDbEYsTUFBTSxtQkFBbUIsR0FBRyxrRUFBa0UsQ0FBQztBQUUvRjs7R0FFRztBQUNILElBQVksVUFJWDtBQUpELFdBQVksVUFBVTtJQUNwQix5Q0FBMkIsQ0FBQTtJQUMzQiw2Q0FBK0IsQ0FBQTtJQUMvQiwyQkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQUpXLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBSXJCO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLFdBQVc7SUFNdEI7SUFDRTs7T0FFRztJQUNNLE9BQW1CO0lBQzVCOztPQUVHO0lBQ00sYUFBc0I7SUFDL0I7O09BRUc7SUFDTSxnQkFBeUI7Ozs7O21CQVJ6Qjs7Ozs7O21CQUlBOzs7Ozs7bUJBSUE7O1FBakJYOztXQUVHO1FBQ0g7Ozs7O1dBQWdCO1FBZ0JkLElBQUksYUFBYSxHQUFHLElBQUksS0FBSyxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFFekQsSUFBSSxhQUFhLEVBQUU7WUFDakIsYUFBYSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUQ7UUFDRCxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLGFBQWEsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNsRTtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYTthQUN4QixzQkFBc0IsQ0FBQztZQUN0QixZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYTtZQUM5Qzs7OztlQUlHO1lBQ0gsUUFBUSxFQUFFLElBQUks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