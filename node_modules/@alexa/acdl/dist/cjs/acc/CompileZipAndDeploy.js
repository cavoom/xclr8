"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompileZipAndDeploy = void 0;
/* eslint-disable no-console */
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const validate_1 = require("../validate");
const bundle_1 = require("../bundle");
const synthesize_1 = require("../synthesize");
const project_config_1 = require("../project-config");
const project_1 = require("../project");
const error_1 = require("../error");
const smapi_1 = require("../smapi");
class CompileZipAndDeploy {
    /**
     * Compiles skill or reusable component. Will also zip the compiled ASKIR skill output if the
     * command is "package" or "deploy" and deploy the skill if the command is deploy
     * @param skipValidation true to skip validation
     * @param profileName profile name from a call to ProfileNameGetter.getProfileName
     * @param skillId skill id used if command is deploy
     * @param command compilation command which is either "" "deploy". "package" or "compile"
     */
    static async compileZipAndDeploy(skipValidation, profileName, skillId, command, askCliConfig) {
        const projectConfig = await (0, project_config_1.loadProjectConfig)(process.cwd(), profileName);
        const outDirPath = path_1.default.join(projectConfig.rootDir, projectConfig.outDir);
        const skillPackageOutputDir = path_1.default.join(outDirPath, "skill-package");
        // Remove the old generated contents
        CompileZipAndDeploy.cleanDirectory(skillPackageOutputDir);
        const project = await (0, project_1.loadProject)(projectConfig);
        const isSkill = command === "package" || command === "deploy" || project.isSkill();
        const sourceDirectory = project.config.sourceRootDir || project.config.srcDir || "";
        const absSourceDirectory = path_1.default.isAbsolute(sourceDirectory) ? sourceDirectory : path_1.default.join(process.cwd(), sourceDirectory);
        console.log(`************ Compiling ${isSkill ? "Skill" : "Module"} ************`);
        console.log(`${isSkill ? "Skill package" : "Source"} directory: ${absSourceDirectory}`);
        const errors = CompileZipAndDeploy.validateAndTerminateOnErrors(skipValidation, project, false);
        // isSkill is true for skills typically with a skill-package directory usually packaged with bundleProject
        // A module is typically a reusable component typically packaged with synthesizeProject
        if (isSkill) {
            const bundleProjectOutput = await (0, bundle_1.bundleProject)(project);
            if (!skipValidation) {
                CompileZipAndDeploy.logAndTerminateOnError(bundleProjectOutput.errors);
            }
            // The "package" command will zip the contents of the skill, deploy will both zip and deploy
            if (command === "deploy" || command === "package") {
                const zippedBundleOutput = await (0, bundle_1.zipBundleOutput)(bundleProjectOutput);
                if (command === "deploy") {
                    if (!zippedBundleOutput.skillPackageZip) {
                        throw new Error("Unable to find zip to deploy.");
                    }
                    await CompileZipAndDeploy.deploy(profileName, skillId, zippedBundleOutput.skillPackageZip, askCliConfig);
                }
            }
        }
        else {
            await (0, synthesize_1.synthesizeProject)(project);
        }
        (0, error_1.logProjectWarnings)(errors);
        console.log(`Compiled ${isSkill ? "Skill" : "Module"} Artifacts successfully,  the output is saved at ${path_1.default.join(process.cwd(), project.config.outDir)}.`);
    }
    static async initSmapi(profileName, askCliConfig) {
        const lwaProfile = askCliConfig.getLwaProfile(profileName);
        return new smapi_1.SmapiClient(lwaProfile);
    }
    /**
     * Removes a directory recursively
     * @param directoryPath path to clean
     */
    static cleanDirectory(directoryPath) {
        if (fs_1.default.existsSync(directoryPath)) {
            fs_1.default.rmSync(directoryPath, { recursive: true });
        }
    }
    /**
     * Validates the project terminating on error
     * @param skipValidation true if we should skip validations
     * @param project Project loaded with loadProject
     * @param isSkill true when validating a skill, false when validating a reusable component
     */
    static validateAndTerminateOnErrors(skipValidation, project, isSkill) {
        const errors = (0, validate_1.validateProject)(project, isSkill, skipValidation);
        CompileZipAndDeploy.logAndTerminateOnError(errors);
        return errors;
    }
    /**
     *  When there are errors (as opposed to just warnings) log the errors
     *  and terminates the process
     * @param errors errors to check
     */
    static logAndTerminateOnError(errors) {
        if (!(0, error_1.hasTerminalErrors)(errors)) {
            return;
        }
        throw errors;
    }
    /**
     * Deploys the skill
     * @param profileName profile name
     * @param skillId skill id
     * @param skillPackageZip contents to be deployed
     */
    static async deploy(profileName, skillId, skillPackageZip, askCliConfig) {
        var _a;
        const smapi = await CompileZipAndDeploy.initSmapi(profileName, askCliConfig);
        const location = await smapi.createUploadUrl();
        await smapi.uploadSkillPackage(skillPackageZip, location);
        try {
            await smapi.importSkillPackage(skillId, location);
        }
        catch (err) {
            if (typeof ((_a = err.response) === null || _a === void 0 ? void 0 : _a.message) === "string") {
                // catch errors thrown by SMAPI
                throw new Error(err.response.message);
            }
            throw err;
        }
    }
}
exports.CompileZipAndDeploy = CompileZipAndDeploy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGlsZVppcEFuZERlcGxveS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2MvQ29tcGlsZVppcEFuZERlcGxveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrQkFBK0I7QUFDL0IsZ0RBQXdCO0FBQ3hCLDRDQUFvQjtBQUNwQiwwQ0FBNEM7QUFDNUMsc0NBQXlEO0FBQ3pELDhDQUFnRDtBQUNoRCxzREFBb0Q7QUFDcEQsd0NBQWdEO0FBQ2hELG9DQUE2RjtBQUM3RixvQ0FBcUM7QUFHckMsTUFBYSxtQkFBbUI7SUFDOUI7Ozs7Ozs7T0FPRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQ3JDLGNBQXVCLEVBQ3ZCLFdBQW1CLEVBQ25CLE9BQWUsRUFDZixPQUFlLEVBQ2YsWUFBMEI7UUFFMUIsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFBLGtDQUFpQixFQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMxRSxNQUFNLFVBQVUsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFFLE1BQU0scUJBQXFCLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFckUsb0NBQW9DO1FBQ3BDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzFELE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBQSxxQkFBVyxFQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRWpELE1BQU0sT0FBTyxHQUFHLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkYsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLE1BQU0s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