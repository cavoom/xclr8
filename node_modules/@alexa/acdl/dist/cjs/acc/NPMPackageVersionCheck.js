"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NPMPackageVersionCheck = void 0;
const https = __importStar(require("https"));
// eslint-disable-next-line import/no-extraneous-dependencies
const semver_1 = __importDefault(require("semver"));
/**
 * Rest GET request for NPM registry
 */
const ACDL_NPM_REGISTRY_HTTPS_OPTIONS = {
    hostname: "registry.npmjs.org",
    port: 443,
    path: "/@alexa/acdl/latest",
    method: "GET",
};
/**
 * Checks the version of acc against the latest npm version producing a warning if there is
 * a new patch/minor version or an error following by termination if there is a new major version
 * to prevent backend backwards imcompatible changes that might happen for major versions and inform
 * of improvemnts in minor/patch versions
 */
class NPMPackageVersionCheck {
    /**
     * Performs the minor/patch and major patch checks mentioned in the class description
     * @param localAccVersion local @alexa/acdl version returned when we do acc --version
     */
    static async Check(localAccVersion) {
        return new Promise((resolve) => {
            const req = https.request(ACDL_NPM_REGISTRY_HTTPS_OPTIONS, (res) => {
                let data = "";
                res.on("data", (chunk) => {
                    data += chunk;
                });
                res.on("end", () => {
                    const latestNpmVersion = JSON.parse(data).version;
                    this.checkMajorVersion(latestNpmVersion, localAccVersion);
                    this.checkMinorAndPatchVersion(latestNpmVersion, localAccVersion);
                    resolve();
                });
            });
            req.on("error", (e) => {
                console.error(e);
                resolve();
            });
            req.end();
        });
    }
    /**
     * Produces an error followed by termination if there is a newer major version
     * @param latestNpmVersion latest npm registry version of @alexa/acdl
     * @param localAccVersion local @alexa/acdl version returned when we do acc --version
     */
    static checkMajorVersion(latestNpmVersion, localAccVersion) {
        if (semver_1.default.major(localAccVersion) < semver_1.default.major(latestNpmVersion)) {
            throw new Error(`Error: You must use the latest major version of @alexa/acdl (${latestNpmVersion}) to ensure compatibility with the Alexa Conversations infrastructure.\n` +
                ` update to the latest @alexa/acdl using: 'npm install @alexa/acdl@${latestNpmVersion}'`);
        }
    }
    /**
     * Produces a warning if there is a newer minor/patch version
     * @param latestNpmVersion latest npm registry version of @alexa/acdl
     * @param localAccVersion local @alexa/acdl version returned when we do acc --version
     */
    static checkMinorAndPatchVersion(latestNpmVersion, localAccVersion) {
        if (semver_1.default.minor(localAccVersion) < semver_1.default.minor(latestNpmVersion) ||
            (semver_1.default.minor(localAccVersion) === semver_1.default.minor(latestNpmVersion) && semver_1.default.patch(localAccVersion) < semver_1.default.patch(latestNpmVersion))) {
            console.warn(`Warning: There is a new version of acc available (${latestNpmVersion}). Using the latest version might help you discover modeling issues earlier`);
            console.warn(` update to the latest @alexa/acdl using: 'npm install @alexa/acdl@${latestNpmVersion}'`);
        }
    }
}
exports.NPMPackageVersionCheck = NPMPackageVersionCheck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTlBNUGFja2FnZVZlcnNpb25DaGVjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2MvTlBNUGFja2FnZVZlcnNpb25DaGVjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUMvQiw2REFBNkQ7QUFDN0Qsb0RBQTRCO0FBRTVCOztHQUVHO0FBQ0gsTUFBTSwrQkFBK0IsR0FBRztJQUN0QyxRQUFRLEVBQUUsb0JBQW9CO0lBQzlCLElBQUksRUFBRSxHQUFHO0lBQ1QsSUFBSSxFQUFFLHFCQUFxQjtJQUMzQixNQUFNLEVBQUUsS0FBSztDQUNkLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQWEsc0JBQXNCO0lBQ2pDOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGVBQXVCO1FBQy9DLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM3QixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLCtCQUErQixFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2pFLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztnQkFDZCxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUN2QixJQUFJLElBQUksS0FBSyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQztnQkFFSCxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7b0JBQ2pCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUM7b0JBQ2xELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztvQkFDMUQsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO29CQUNsRSxPQUFPLEVBQUUsQ0FBQztnQkFDWixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1lBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakIsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQztZQUNILEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxNQUFNLENBQUMsaUJBQWlCLENBQUMsZ0JBQXdCLEVBQUUsZUFBdUI7UUFDaEYsSUFBSSxnQkFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0VBQWdFLGdCQUFnQiwwRUFBMEU7Z0JBQ3hKLHFFQUFxRSxnQkFBZ0IsR0FBRyxDQUMzRixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxnQkFBd0IsRUFBRSxlQUF1QjtRQUN4RixJQUNFLGdCQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLGdCQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1lBQzlELENBQUMsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssZ0JBQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxnQkFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQ3BJO1lBQ0EsT0FBTyxDQUFDLElBQUksQ0FDVixxREFBcUQsZ0JBQWdCLDZFQUE2RSxDQUNuSixDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxxRUFBcUUsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1NBQ3hHO0lBQ0gsQ0FBQztDQUNGO0FBM0RELHdEQTJEQyJ9