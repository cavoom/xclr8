"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricClient = exports.MetricAction = exports.MetricActionResult = void 0;
const uuid_1 = require("uuid");
const axios_1 = __importDefault(require("axios"));
const ProfileNameGetter_1 = require("../acc/ProfileNameGetter");
const METRICS = {
    ENDPOINT: "https://client-telemetry.amazonalexa.com",
    STOREABLE_KEYS: ["skill_id", "locale", "template_url", "stage"],
};
exports.MetricActionResult = {
    SUCCESS: "Success",
    FAILURE: "Failure",
};
/**
 * Metric action includes the name and results of CLI command.
 */
class MetricAction {
    /**
     * @constructor
     * @param name - The action name.
     * @param type - The action type.
     */
    constructor(name, type) {
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "startTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "endTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "failureMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_ended", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "optionData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.endTime = null;
        this.failureMessage = "";
        this.name = name;
        this.result = null;
        this.startTime = new Date();
        this.type = type;
        this.id = (0, uuid_1.v4)();
        this.options = [];
        this.optionData = {};
        this._ended = false;
    }
    /**
     * Add option to list, store value only if in {@link METRICS.STOREABLE_KEYS}
     * @param optionName name of the option
     * @param optionValue value of the option
     */
    setOption(optionName, optionValue) {
        const schemaOption = optionName.split("-").join("_");
        this.options.push(schemaOption);
        if (METRICS.STOREABLE_KEYS.includes(schemaOption)) {
            this.optionData[schemaOption] = optionValue;
        }
    }
    /**
     * Closes action
     * @param error Error object or string indicating error.
     */
    end(error = null) {
        if (this._ended)
            return;
        // if Error object extract error message,
        // otherwise error message string or null was passed as a parameter
        const errorMessage = error && error instanceof Error ? error.message : error;
        this.result = errorMessage ? exports.MetricActionResult.FAILURE : exports.MetricActionResult.SUCCESS;
        this.failureMessage = errorMessage || "";
        this.endTime = new Date();
        this._ended = true;
    }
    /**
     * Implementation of custom toJSON method to modify serialization with JSON.stringify
     */
    toJSON() {
        return {
            end_time: this.endTime,
            failure_message: this.failureMessage,
            name: this.name,
            result: this.result,
            start_time: this.startTime,
            type: this.type,
            id: this.id,
            options: this.options,
            ...this.optionData,
        };
    }
}
exports.MetricAction = MetricAction;
/**
 * Client that communicates with telemetry endpoint.
 */
class MetricClient {
    /**
     * @constructor
     */
    constructor(currentNpmVersion, askCliConfig) {
        Object.defineProperty(this, "httpClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "serverUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "postRetries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "askCliConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.httpClient = axios_1.default.create({
            timeout: 3000,
            headers: { "Content-Type": "text/plain" },
        });
        this.serverUrl = METRICS.ENDPOINT;
        this.postRetries = 3;
        this.askCliConfig = askCliConfig;
        this.enabled = this.isEnabled();
        // initialize data
        this.data = {
            version: currentNpmVersion,
            machineId: this.getMachineId(),
            timeStarted: new Date(),
            newUser: false,
            timeUploaded: null,
            clientId: "acc",
            actions: [],
        };
    }
    /**
     * Starts action
     * @param name - The action name
     * @param type - The action type
     * @return the metric action that was started, {@link MetricAction}
     */
    startAction(name, type) {
        const action = new MetricAction(name, type);
        this.data.actions.push(action);
        return action;
    }
    /**
     * Set option for the most recently started action
     * @param optionName name of the option
     * @param optionValue value of the option
     */
    setOption(optionName, optionValue) {
        const actions = this.data.actions;
        if (actions.length) {
            actions[actions.length - 1].setOption(optionName, optionValue);
        }
    }
    /**
     * Returns current data store in the metric client
     * @return the metric data, {@link MetricClientData}
     */
    getData() {
        return this.data;
    }
    /**
     * Sends data to the metric server
     * @param error - Error object or string indicating error.
     * @returns whether data was sent successfully
     */
    async sendData(error = null) {
        if (!this.enabled) {
            this.data.actions = [];
            return { success: true };
        }
        this.data.actions.forEach((action) => action.end(error));
        try {
            await this.upload();
            this.data.actions = [];
            return { success: true };
        }
        catch (_a) {
            return { success: false };
        }
    }
    /**
     * Implementation of custom toJSON method to modify serialization with JSON.stringify
     */
    toJSON() {
        return {
            version: this.data.version,
            machine_id: this.data.machineId,
            time_started: this.data.timeStarted,
            new_user: this.data.newUser,
            time_uploaded: this.data.timeUploaded,
            client_id: this.data.clientId,
            actions: this.data.actions,
        };
    }
    async upload() {
        this.data.timeUploaded = new Date();
        const payload = JSON.stringify({ payload: this });
        const postPromise = () => this.httpClient.post(this.serverUrl, payload);
        await this.retry(this.postRetries, postPromise);
    }
    async retry(retries, func) {
        try {
            await func();
        }
        catch (error) {
            if (retries == 1)
                throw error;
            await this.retry(retries - 1, func);
        }
    }
    isEnabled() {
        if (ProfileNameGetter_1.ProfileNameGetter.isEnvProfile())
            return true;
        if (process.env.ASK_SHARE_USAGE === "false")
            return false;
        if (!this.askCliConfig.hasConfig())
            return false;
        return this.askCliConfig.getShareUsage() && !!this.getMachineId();
    }
    /**
     * gets the machine id from ~/.ask/cli_config.
     * Special cases:
     *    1) If ~/.ask/cli_config was not found or could not be parsed this.enabled will be false and
     * no machine id is retrieved since no metrics will be sent
     *    2) If ~/.ask/cli_config was found, but has no machineId we will:
     *         a) write a new uuid to ~/.ask/cli_config if possible
     *         b) diaable metrics if we cannot write to ~/.ask/cli_config
     * @returns a machine id from ~/.ask/cli_config
     */
    getMachineId() {
        if (!this.askCliConfig.hasConfig())
            return "";
        if (ProfileNameGetter_1.ProfileNameGetter.isEnvProfile())
            return "all_environmental";
        let machineId = this.askCliConfig.getMachineId();
        if (machineId) {
            return machineId;
        }
        return this.askCliConfig.createMachineId();
    }
}
exports.MetricClient = MetricClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tZXRyaWNzL21ldHJpYy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsK0JBQWdDO0FBQ2hDLGtEQUEyQztBQUczQyxnRUFBMkQ7QUFFM0QsTUFBTSxPQUFPLEdBQUc7SUFDZCxRQUFRLEVBQUUsMENBQTBDO0lBQ3BELGNBQWMsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQztDQUNoRSxDQUFDO0FBRVcsUUFBQSxrQkFBa0IsR0FBK0I7SUFDNUQsT0FBTyxFQUFFLFNBQVM7SUFDbEIsT0FBTyxFQUFFLFNBQVM7Q0FDbkIsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxZQUFZO0lBWXZCOzs7O09BSUc7SUFDSCxZQUFZLElBQVksRUFBRSxJQUFZO1FBaEJ0Qzs7Ozs7V0FBYTtRQUNiOzs7OztXQUFhO1FBQ2I7Ozs7O1dBQWdCO1FBQ2hCOzs7OztXQUFxQjtRQUNyQjs7Ozs7V0FBc0I7UUFDdEI7Ozs7O1dBQXVCO1FBQ3ZCOzs7OztXQUFXO1FBQ1g7Ozs7O1dBQWdCO1FBQ2hCOzs7OztXQUFrQjtRQUNsQjs7Ozs7V0FBb0M7UUFRbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBQSxTQUFJLEdBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJ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