"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = exports.validateLoadedModules = exports.loadProject = exports.loadProjectSync = void 0;
const path_1 = __importDefault(require("path"));
const ask = __importStar(require("./ast"));
const package_1 = require("./package");
const checker_1 = require("./checker");
const constants_1 = require("./constants");
const visit_1 = require("./visit");
const transformUIProject_1 = require("./transformUIProject");
const transform_project_1 = require("./transform-project");
const interaction_model_generator_1 = require("./interaction-model-generator");
const ast_1 = require("./ast");
/**
 * Synchronously load a Project from the file system.
 *
 * @param config project configuration
 */
function loadProjectSync(config) {
    const external = (0, package_1.scanPackagesSync)(path_1.default.join(config.rootDir, "node_modules"));
    if (config.name !== constants_1.Constants.AlexaSchemaPackageName && config.name !== constants_1.Constants.ACCorePackageName) {
        // if we're compiling a package that doesn't have `@alexa/schema` or `@alexa/ac-core`, load them from the bundled libs.
        const packages = new Set(external.map((e) => { var _a; return (_a = e.config) === null || _a === void 0 ? void 0 : _a.name; }).filter((n) => n !== undefined));
        if (!packages.has(constants_1.Constants.AlexaSchemaPackageName)) {
            external.push((0, package_1.loadBundledPackageSync)("schema"));
        }
        if (!packages.has(constants_1.Constants.ACCorePackageName)) {
            external.push((0, package_1.loadBundledPackageSync)("ac-core"));
        }
    }
    const source = (0, package_1.loadPackageSync)(config.rootDir, undefined, true);
    if (source === undefined) {
        throw new Error(`Failed to load project from '${config.rootDir}'.'`);
    }
    const project = new Project({
        config,
        source,
        external: validateLoadedModules(external),
    });
    const { isUISkill } = (0, transformUIProject_1.getUISkillInformation)(project.sourceModules);
    if (isUISkill) {
        return project;
    }
    return (0, transform_project_1.transformProject)(project);
}
exports.loadProjectSync = loadProjectSync;
/**
 * Asynchronously load a Project from the file system.
 *
 * @param config project configuration
 * @param skipFSPackageConfig true if we should use config when calling loadPackage as opposed to loading the configuration from FS
 */
async function loadProject(config, skipFSPackageConfig = false) {
    const external = await (0, package_1.scanPackages)(path_1.default.join(config.rootDir, "node_modules"));
    if (config.name !== constants_1.Constants.AlexaSchemaPackageName && config.name !== constants_1.Constants.ACCorePackageName) {
        // if we're compiling a package that doesn't have `@alexa/schema` or `@alexa/ac-core`, load them from the bundled libs.
        const packages = new Set(external.map((e) => { var _a; return (_a = e.config) === null || _a === void 0 ? void 0 : _a.name; }).filter((n) => n !== undefined));
        if (!packages.has(constants_1.Constants.AlexaSchemaPackageName)) {
            external.push(await (0, package_1.loadBundledPackage)("schema"));
        }
        if (!packages.has(constants_1.Constants.ACCorePackageName)) {
            external.push(await (0, package_1.loadBundledPackage)("ac-core"));
        }
    }
    const source = await (0, package_1.loadPackage)(config.rootDir, skipFSPackageConfig ? { ask: config, name: config.name || "", version: config.projectVersion } : undefined, true);
    if (source === undefined) {
        throw new Error(`Failed to load project from '${config.rootDir}'.'`);
    }
    const project = new Project({
        config,
        source,
        external: validateLoadedModules(external),
    });
    const { isUISkill } = (0, transformUIProject_1.getUISkillInformation)(project.sourceModules);
    if (isUISkill) {
        return project;
    }
    return (0, transform_project_1.transformProject)(project);
}
exports.loadProject = loadProject;
/**
 * validate loaded modules
 * 1. for same module with same version, ignore the second one to avoid duplicates
 * 2. for same module with different version, report error
 * @param modules
 * @returns
 */
function validateLoadedModules(modules) {
    const result = [];
    const moduleMap = new Map(); // name - version
    modules.forEach((module) => {
        var _a;
        if (((_a = module.config) === null || _a === void 0 ? void 0 : _a.name) && module.config.version) {
            if (!moduleMap.has(module.config.name)) {
                result.push(module);
                moduleMap.set(module.config.name, module.config.version);
            }
            else if (moduleMap.get(module.config.name) !== module.config.version) {
                throw new Error(`Failed to load project, found same module '${module.config.name}' with different versions '${moduleMap.get(module.config.name)}', '${module.config.version}'.`);
            }
        }
    });
    return result;
}
exports.validateLoadedModules = validateLoadedModules;
function indexModules(modules) {
    return modules.map((f) => ({ [f.uri]: f })).reduce((a, b) => ({ ...a, ...b }), {});
}
/**
 * Parsed ACDL Project.
 */
class Project {
    constructor(props) {
        var _a, _b;
        /**
         * Project Configuration.
         */
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "responseTemplates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "slotTypes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "source", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "external", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "externalIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sourceIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * List of named call declarations indicated by an {@link ask.NameDeclaration} pointing to a {@link Apply} data structure
         */
        Object.defineProperty(this, "callDeclarations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The Global TypeChecker environment for this Project.
         */
        Object.defineProperty(this, "checker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Globally cached {@link PolicyInfo} for the configured Skill.
         */
        Object.defineProperty(this, "policyInfo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Globally cached root {@link ask.DialogDeclaration} instances. By root, we mean
         * the dialogs that constitute the entry-point of the skill.
         */
        Object.defineProperty(this, "rootDialogs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.config = props.config;
        this.source = props.source;
        this.external = props.external;
        this.sourceIndex = indexModules(props.source.modules);
        this.externalIndex = indexModules(this.external.flatMap((p) => p.modules));
        this.responseTemplates = (_a = this.source.responseTemplates) !== null && _a !== void 0 ? _a : [];
        this.callDeclarations = new Map();
        const combinedSlotTypes = {};
        const allSlotTypes = [...((_b = props.source.slotTypes) !== null && _b !== void 0 ? _b : []), ...props.external.flatMap((pkg) => { var _a; return (_a = pkg.slotTypes) !== null && _a !== void 0 ? _a : []; })];
        allSlotTypes.forEach((slotType) => {
            if (slotType.name.name) {
                const existingSlotType = combinedSlotTypes[slotType.name.name];
                if (existingSlotType !== undefined) {
                    slotType = new ask.SlotType(slotType.name, [...slotType.locales, ...existingSlotType.locales]);
                }
                combinedSlotTypes[slotType.name.name] = slotType;
            }
        });
        this.slotTypes = Object.values(combinedSlotTypes).map((slotType) => new ask.SlotType(slotType.name, Array.from(new Set(slotType.locales))));
    }
    get modules() {
        return [...this.externalModules, ...this.sourceModules];
    }
    get externalModules() {
        return Object.values(this.externalIndex);
    }
    get sourceModules() {
        return Object.values(this.sourceIndex);
    }
    getModule(uri) {
        return this.sourceIndex[uri] || this.externalIndex[uri];
    }
    clearCaches() {
        this.checker = undefined;
        this.policyInfo = undefined;
        this.rootDialogs = undefined;
        this.callDeclarations = new Map();
    }
    remove(uri) {
        delete this.sourceIndex[uri];
        delete this.externalIndex[uri];
        this.clearCaches();
    }
    isSource(uri) {
        for (const src of this.config.srcDir) {
            if (uri.startsWith(path_1.default.resolve(this.config.rootDir, src))) {
                return true;
            }
        }
        return false;
    }
    update(module) {
        if (this.isSource(module.uri)) {
            this.sourceIndex[module.uri] = module;
        }
        else {
            this.externalIndex[module.uri] = module;
        }
        this.clearCaches();
    }
    getTypeChecker() {
        if (this.checker === undefined) {
            this.checker = new checker_1.TypeChecker(this);
        }
        return this.checker;
    }
    /**
     * Check whether a project is a library
     * A library should not have the main property inside ask config
     */
    isLibrary() {
        return this.config.skill === undefined && this.config.projectVersion !== package_1.ProjectVersion.Beta1;
    }
    /**
     * check whether a project is a skill
     * A skill must provide the main property inside ask config
     */
    isSkill() {
        return this.config.skill !== undefined || this.config.projectVersion === package_1.ProjectVersion.Beta1;
    }
    /**
     * Find all skill actions used in project
     * @return An array of declaration and apply of all skill actions
     */
    findSkills() {
        return this.findCallDeclarations(ast_1.AlexaConversations.skill, true);
    }
    findCallDeclarations(callName, nameRequired) {
        var _a, _b, _c, _d, _e, _f;
        const checker = this.getTypeChecker();
        const cachedCallDeclarations = this.callDeclarations.get(callName);
        if (cachedCallDeclarations !== undefined) {
            return cachedCallDeclarations;
        }
        const callDeclarations = [];
        for (const module of this.modules) {
            if ((_a = module.content) === null || _a === void 0 ? void 0 : _a.expressions) {
                for (const expression of module.content.expressions) {
                    if (expression.kind === "NameDeclaration" &&
                        ((_b = expression.expression) === null || _b === void 0 ? void 0 : _b.kind) === "Call" &&
                        ((_d = (_c = checker.getApply(expression.expression)) === null || _c === void 0 ? void 0 : _c.decl.name) === null || _d === void 0 ? void 0 : _d.name) === callName) {
                        callDeclarations.push({
                            declaration: expression,
                            apply: checker.getApply(expression.expression),
                        });
                    }
                    else if (!nameRequired && expression.kind === "Call" && ((_f = (_e = checker.getApply(expression)) === null || _e === void 0 ? void 0 : _e.decl.name) === null || _f === void 0 ? void 0 : _f.name) === callName) {
                        callDeclarations.push({
                            apply: checker.getApply(expression),
                        });
                    }
                }
            }
        }
        this.callDeclarations.set(callName, callDeclarations);
        return callDeclarations;
    }
    isRootDialog(dialog) {
        var _a;
        return ((_a = this.getRootDialogs()) === null || _a === void 0 ? void 0 : _a.find((d) => d === dialog)) !== undefined;
    }
    /**
     * Get all dialogs in the Skill.
     */
    getAllDialogs() {
        return this.modules.flatMap((module) => { var _a, _b; return ((_b = (_a = module.content) === null || _a === void 0 ? void 0 : _a.expressions) !== null && _b !== void 0 ? _b : []).flatMap((expr) => (expr.kind === "DialogDeclaration" ? [expr] : [])); });
    }
    /**
     * Get the dialogs that are the skill's entry-point.
     *
     * This is computed in various different ways.
     * 1. when skill action exist and dialogs array provided, will read dialogs in the dialog array
     * 2. if skill action not exist or dialog array not exist, will traverse all the dialogs and filter out root dialogs by
     *   Condition 1. The dialog must use Nothing return type and has no arguments
     *   Condition 2. The dialog must not been called in other dialogs
     */
    getRootDialogs() {
        var _a;
        if (this.rootDialogs === undefined) {
            const project = this;
            const checker = this.getTypeChecker();
            const skills = this.findSkills();
            if (skills.length === 1) {
                // when only one skill action provided
                const dialogs = skills[0].apply.getArgumentValueThing("dialogs");
                if (dialogs !== undefined && (dialogs === null || dialogs === void 0 ? void 0 : dialogs.isList()) && dialogs.isLiteral()) {
                    // when skill action exist and the dialogs array is not undefined
                    // The compiler prioritize all the dialogs in the dialogs array
                    const dialogItems = dialogs.getItems();
                    const allDialogs = new Set(dialogItems === null || dialogItems === void 0 ? void 0 : dialogItems.map((dialogItem) => {
                        if (dialogItem === null || dialogItem === void 0 ? void 0 : dialogItem.isDialog()) {
                            return dialogItem.origin;
                        }
                        return undefined;
                    }));
                    this.rootDialogs = Array.from(allDialogs).filter((dialog) => dialog !== undefined);
                    return this.rootDialogs.length > 0 ? this.rootDialogs : undefined;
                }
            }
            const allDialogs = this.getAllDialogs();
            // find all dialogs that have nothing return type and have no arguments
            const rootDialogCandidates = allDialogs.filter((dialog) => {
                const returnType = checker.getType(dialog.returnType);
                return (dialog.arguments === undefined || dialog.arguments.length === 0) && ((returnType === null || returnType === void 0 ? void 0 : returnType.isVoid()) || (returnType === null || returnType === void 0 ? void 0 : returnType.isNothing()));
            });
            // find all dialogs that has been called or passed as an argument in other dialogs
            const calledDialogs = new Set();
            allDialogs === null || allDialogs === void 0 ? void 0 : allDialogs.forEach((dialog) => {
                var _a;
                return (_a = dialog.samples) === null || _a === void 0 ? void 0 : _a.forEach((sample) => {
                    var _a, _b;
                    return (_b = (_a = sample.scope) === null || _a === void 0 ? void 0 : _a.expressions) === null || _b === void 0 ? void 0 : _b.forEach(function findCalledDialogs(node) {
                        if (node.kind === "Call") {
                            const apply = project.getTypeChecker().getApply(node);
                            if (apply === null || apply === void 0 ? void 0 : apply.isDialog()) {
                                calledDialogs.add(apply.decl.kind === "DialogDeclaration" ? apply.decl : apply.decl.declaration);
                                const argumentsThings = apply.getArgumentValueThingList();
                                argumentsThings.forEach((argumentThing) => {
                                    if (argumentThing === null || argumentThing === void 0 ? void 0 : argumentThing.isDialog()) {
                                        calledDialogs.add(argumentThing.origin);
                                    }
                                });
                            }
                        }
                        (0, visit_1.visitEachChild)(node, findCalledDialogs);
                    });
                });
            });
            this.rootDialogs = Array.from(rootDialogCandidates.filter((dialog) => !calledDialogs.has(dialog)));
        }
        return (_a = this.rootDialogs) !== null && _a !== void 0 ? _a : undefined;
    }
    /**
     * Read the policy definitions defined in the skill action and converts
     * the PolicyInfo into a more readable structure
     *
     * e.g.
     * ```
     * namespace test
     * policies = [ResetArguments{arguments = [getWeather.arguments.cityName, getWeather.arguments.date]}, ResetAllArguments {action = getWeather2}]
     *
     * getPolicyInfo => Map {
     *    test.getWeather: {
     *        type: "ResetArguments",
     *        actionFqn: "test.getWeather",
     *        arguments: ["cityName", "date"]
     *    },
     *    test.getWeather2: {
     *        type: "ResetAllArguments",
     *        actionFqn: "test.getWeather2",
     *        arguments: []
     *    }
     * }
     * ```
     */
    getPolicyInfo() {
        if (this.policyInfo !== undefined) {
            return this.policyInfo;
        }
        const skills = this.findSkills();
        if (skills.length !== 1) {
            return undefined;
        }
        this.policyInfo = new Map();
        const policies = skills[0].apply.getArgumentValueThing("policies");
        const policyItems = (policies === null || policies === void 0 ? void 0 : policies.isList()) && policies.isLiteral() ? policies.getItems() : [];
        policyItems === null || policyItems === void 0 ? void 0 : policyItems.forEach((item) => {
            var _a, _b, _c;
            if ((_a = item === null || item === void 0 ? void 0 : item.apply) === null || _a === void 0 ? void 0 : _a.isResetArguments()) {
                const argumentsValueThing = item.getProperty("arguments");
                if ((argumentsValueThing === null || argumentsValueThing === void 0 ? void 0 : argumentsValueThing.isLiteral()) && argumentsValueThing.isList()) {
                    const items = argumentsValueThing.getItems();
                    items === null || items === void 0 ? void 0 : items.forEach((item) => {
                        var _a, _b, _c, _d, _e;
                        if ((_b = (_a = item === null || item === void 0 ? void 0 : item.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.isAction()) {
                            const { actionName } = item.parent.parent;
                            if (actionName && ((_c = item.origin) === null || _c === void 0 ? void 0 : _c.kind) === "Name" && item.origin.name) {
                                if (!this.policyInfo.has(actionName)) {
                                    this.policyInfo.set(actionName, {
                                        type: "ResetArguments",
                                        actionFqn: actionName,
                                        arguments: [item.origin.name],
                                    });
                                }
                                else if (this.policyInfo.has(actionName)) {
                                    (_e = (_d = this.policyInfo.get(actionName)) === null || _d === void 0 ? void 0 : _d.arguments) === null || _e === void 0 ? void 0 : _e.push(item.origin.name);
                                }
                            }
                        }
                    });
                }
            }
            else if ((_b = item === null || item === void 0 ? void 0 : item.apply) === null || _b === void 0 ? void 0 : _b.isResetAllArguments()) {
                const actionThing = item.getProperty("action");
                if (actionThing === null || actionThing === void 0 ? void 0 : actionThing.isAction()) {
                    const actionName = (_c = actionThing.name) === null || _c === void 0 ? void 0 : _c.name;
                    if (actionName) {
                        this.policyInfo.set(actionName, {
                            type: "ResetAllArguments",
                            actionFqn: actionName,
                            arguments: [],
                        });
                    }
                }
            }
        });
        return this.policyInfo;
    }
    generateInteractionModels() {
        const extendCatalogActions = this.findCallDeclarations(ast_1.AlexaConversations.extendCatalog, false);
        return new interaction_model_generator_1.InteractionModelGenerator().generateInteractionModels(this.findSkills(), extendCatalogActions);
    }
}
exports.Project = Project;
//# sourceMappingURL=data:application/json;base64,