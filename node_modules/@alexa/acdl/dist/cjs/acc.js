#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCommand = void 0;
require("source-map-support/register");
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const credential_provider_node_1 = require("@aws-sdk/credential-provider-node");
const path_1 = __importDefault(require("path"));
const yargs_1 = __importDefault(require("yargs"));
const util_1 = require("./util");
const ProfileNameGetter_1 = require("./acc/ProfileNameGetter");
const Decompile_1 = require("./acc/Decompile");
const CompileZipAndDeploy_1 = require("./acc/CompileZipAndDeploy");
const NPMPackageVersionCheck_1 = require("./acc/NPMPackageVersionCheck");
const ask_cli_config_1 = require("./ask-cli-config");
const metric_client_1 = require("./metrics/metric-client");
const error_1 = require("./error");
/**
 * Processes and defines the command line arguments
 * @param localNpmVersion current npm package version
 * @returns the arguments processed by yargs
 */
function getArguments(localNpmVersion) {
    const { argv } = (0, yargs_1.default)(process.argv.slice(2))
        .scriptName("acc")
        .version(localNpmVersion)
        .usage("Usage: $0")
        .alias("h", "help")
        .help("help")
        .showHelpOnFail(true)
        // .command(["$0", "build"], "compile a single ACDL file to ASKIR", () => {})
        .command("compile", "compile ASKIR modules and, for ski", (yargs) => yargs
        .option("skip-validation", {
        type: "boolean",
        demandOption: false,
        default: false,
        description: "Force the CLI to generate ASKIR without validation.",
    })
        .option("profile", {
        type: "string",
        requiresArg: false,
        description: "ASK CLI profile to use for the Skill.",
    }))
        .command("package", "create a skill-package", (yargs) => yargs
        .option("skip-validation", {
        type: "boolean",
        demandOption: false,
        default: false,
        description: "Force the CLI to generate ASKIR without validation.",
    })
        .option("profile", {
        type: "string",
        requiresArg: false,
        description: "ASK CLI profile to use for the Skill.",
    }))
        .command("decompile", "decompile ASKIR files to ACDL files and move the ASKIR files to the build directory", (yargs) => yargs
        .option("profile", {
        type: "string",
        requiresArg: false,
        description: "ASK CLI profile to use for the Skill.",
    })
        .option("out-dir", {
        type: "string",
        requiresArg: false,
        description: "ASK CLI profile to use when deploying the Skill.",
    }))
        .command("deploy", "package and deploy the skill", (yargs) => yargs
        .option("skill-id", {
        type: "string",
        demandOption: true,
        requiresArg: true,
        description: "Skill ID to deploy",
    })
        .option("profile", {
        type: "string",
        requiresArg: true,
        description: "ASK CLI profile to use when deploying the Skill.",
        default: "default",
    })
        .option("skill-package", {
        type: "string",
        requiresArg: true,
        description: "Optional path of a pre-compiled skill-package directory. If none is provided, a skill-package will be compiled from source.",
    }))
        .command("bootstrap-lwa-secrets-manager", "store LWA refresh token credentials in a secure AWS Secret managed by AWS Secrets Manager", (yargs) => yargs
        .option("secret-id", {
        type: "string",
        requiresArg: true,
        demandOption: true,
        description: "ARN of the AWS Secrets Manager credentials to upload the ASK refresh token to",
    })
        .option("profile", {
        type: "string",
        requiresArg: true,
        description: "ASK CLI profile to use when deploying the Skill.",
        default: "default",
    })
        .option("aws-profile", {
        type: "string",
        requiresArg: true,
        description: "name of profile configured in ~/.aws/config and ~/.aws/credentials",
        default: "default",
    })
        .option("aws-region", {
        type: "string",
        requiresArg: true,
        description: "AWS region the Secret Resides in",
    }))
        .command("bootstrap", "Creates a CloudFormation stack with a Secure AWS Secret Manager and uploads your LWA credentials credential to the Secret.", (yargs) => yargs
        .option("secret-name", {
        type: "string",
        requiresArg: true,
        demandOption: false,
        description: "Name of the AWS Secret to upload the ASK credentials to.",
    })
        .option("profile", {
        type: "string",
        requiresArg: true,
        description: "ASK CLI profile to use when deploying the Skill.",
        default: "default",
    })
        .option("aws-profile", {
        type: "string",
        requiresArg: true,
        description: "Name of the AWS profile configured in ~/.aws/config and ~/.aws/credentials.",
        default: "default",
    })
        .option("regions", {
        type: "string",
        requiresArg: true,
        description: "AWS Regions to create the CFN stacks and AWS secrets into.",
    })
        .option("client_id", {
        type: "string",
        requiresArg: true,
        description: "The login-with-amazon client id to store in the AWS secret.",
    })
        .option("client_secret", {
        type: "string",
        requiresArg: true,
        description: "The login-with-amazon client secret to store in the AWS secret.",
    })
        .option("skip-stack", {
        type: "boolean",
        default: false,
        description: "Skips creating a CloudFormation Stack and creates the AWS Secret. This may lead to dangling resources.",
    }))
        .option("verbose", {
        alias: "v",
        type: "boolean",
        description: "Run with verbose logging",
        default: false,
    })
        .option("skip-validation", {
        type: "boolean",
        demandOption: false,
        default: false,
        description: "Force the CLI to generate ASKIR without validation.",
    })
        .option("profile", {
        type: "string",
        requiresArg: false,
        description: "ASK CLI profile to use for the Skill.",
    })
        .parserConfiguration({
        "camel-case-expansion": false,
    })
        .strict();
    return argv;
}
/**
 * Runs the command
 * @param command command to run
 * @param argv command line arguments
 * @param localNpmVersion current npm package version
 * @param askCliConfig config file information
 * A promossed that resolves when the command is done
 */
async function runCommand(command, argv, localNpmVersion, askCliConfig) {
    await NPMPackageVersionCheck_1.NPMPackageVersionCheck.Check(localNpmVersion);
    if (command === "bootstrap-lwa-secrets-manager") {
        await bootstrapLwa();
    }
    else if (command === "bootstrap") {
        await bootstrap();
    }
    else if (command === "decompile") {
        const profile = ProfileNameGetter_1.ProfileNameGetter.getProfileName(argv["profile"]);
        await Decompile_1.Decompile.decompile(process.cwd(), argv["out-dir"], profile);
    }
    else {
        // command === "compile" || command === "package" || command === "deploy" || !command
        const profile = ProfileNameGetter_1.ProfileNameGetter.getProfileName(argv["profile"]);
        await CompileZipAndDeploy_1.CompileZipAndDeploy.compileZipAndDeploy(argv["skip-validation"], profile, argv["skill-id"], command, askCliConfig);
    }
    /**
     * Uploads a login-with-amazon (LWA) profile to AWS secrets manager.
     *
     * TODO: get secret ID from the CFN stack output - https://github.com/aws/aws-cdk/issues/1773
     */
    async function bootstrapLwa() {
        var _a;
        // @see https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-region.html#setting-region-config-file
        process.env.AWS_SDK_LOAD_CONFIG = "true";
        const smapi = await CompileZipAndDeploy_1.CompileZipAndDeploy.initSmapi(argv["profile"] || "default", askCliConfig);
        const credentials = await (0, credential_provider_node_1.defaultProvider)({
            profile: (_a = argv["aws-profile"]) !== null && _a !== void 0 ? _a : "default",
        });
        const secretManager = new client_secrets_manager_1.SecretsManager({ credentials, region: argv["aws-region"] });
        // store the profile as JSON in secrets manager
        await secretManager.putSecretValue({
            SecretId: argv["secret-id"],
            SecretString: JSON.stringify(smapi.profile),
        });
    }
    /**
     * Uploads a login-with-amazon (LWA) profile to AWS secrets manager.
     *
     * TODO: get secret ID from the CFN stack output - https://github.com/aws/aws-cdk/issues/1773
     */
    async function bootstrap() {
        var _a, _b, _c, _d;
        // @see https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-region.html#setting-region-config-file
        process.env.AWS_SDK_LOAD_CONFIG = "true";
        const regions = (_b = (_a = argv.regions) === null || _a === void 0 ? void 0 : _a.split(",")) !== null && _b !== void 0 ? _b : [];
        const skipStack = argv["skip-stack"];
        // If the user doesn't provide regions, then SecretsManager will
        // use the default AWS CLI region instead of undefined
        if (regions.length === 0) {
            regions.push(undefined);
        }
        const smapi = await CompileZipAndDeploy_1.CompileZipAndDeploy.initSmapi(argv["profile"] || "default", askCliConfig);
        const clientId = argv.client_id;
        const clientSecret = argv.client_secret;
        if (clientId) {
            smapi.profile.client_id = clientId;
        }
        if (clientSecret) {
            smapi.profile.client_secret = clientSecret;
        }
        const credentials = await (0, credential_provider_node_1.defaultProvider)({
            profile: (_c = argv["aws-profile"]) !== null && _c !== void 0 ? _c : "default",
        })();
        const secretName = (_d = argv["secret-name"]) !== null && _d !== void 0 ? _d : `ask-config-${smapi.profile.vendor_id}`;
        const CfnTemplate = {
            AWSTemplateFormatVersion: "2010-09-09",
            Resources: {
                AskConfigSecret: {
                    Type: "AWS::SecretsManager::Secret",
                    Properties: {
                        Name: secretName,
                        Description: "Secret creation for Alexa Skills Kit.",
                    },
                },
            },
        };
        const stackParams = {
            StackName: secretName,
            TemplateBody: JSON.stringify(CfnTemplate),
        };
        // Create or update the secret in each region
        for (const region of regions) {
            const cloudformation = new client_cloudformation_1.CloudFormation({ credentials, region });
            const secretManager = new client_secrets_manager_1.SecretsManager({ credentials, region });
            // Grab the region from cloudformation if user did not input any regions
            const awsRegion = cloudformation.config.region;
            // Create the CFN stack to store the AWS Secret. If the stack already exists,
            // the CFN API returns an AlreadyExistsException
            try {
                if (skipStack) {
                    await secretManager.createSecret({ Name: secretName });
                    console.log(`Created secret ${secretName} in ${awsRegion}.`);
                }
                else {
                    const stackId = (await cloudformation.createStack(stackParams)).StackId;
                    console.log(`Starting creation of ${secretName} Stack in ${awsRegion}.`);
                    await pollStackCreation(cloudformation, stackId, awsRegion);
                }
            }
            catch (err) {
                const resource = skipStack ? "Secret" : "Stack";
                if (err.code === "AlreadyExistsException") {
                    console.log(`${secretName} ${resource} already exists in ${awsRegion}. Skipping creation.`);
                }
                else {
                    console.log(`Error creating ${resource}: ${secretName} in ${awsRegion}.`);
                    throw err;
                }
            }
            // Store the ASK profile as JSON in secrets manager
            try {
                await secretManager.putSecretValue({
                    SecretId: secretName,
                    SecretString: JSON.stringify(smapi.profile),
                });
                console.log(`Successfully uploaded LWA credentials to AWS secret ${secretName} in ${awsRegion}.`);
            }
            catch (err) {
                console.log(`Failed uploading LWA credentials to AWS secret ${secretName} in ${awsRegion}.`);
                throw err;
            }
        }
        // Polls the stack creation until the status is complete
        // Throws an error if there is an unexpected status
        async function pollStackCreation(cloudformation, stackId, region) {
            try {
                const stacks = (await cloudformation.describeStacks({ StackName: stackId })).Stacks;
                if (stacks === undefined) {
                    throw new Error("Error creating the CloudFormation stack. Stack doesn't exist.");
                }
                const stack = stacks[0];
                const status = stack.StackStatus;
                if (status === "CREATE_COMPLETE") {
                    console.log(`Created ${secretName} Stack in ${region}`);
                }
                else if (status === "REVIEW_IN_PROGRESS" || status === "CREATE_IN_PROGRESS") {
                    console.log(`Stack(${region}) status: ${status}`);
                    await new Promise((resolve) => {
                        setTimeout(resolve, 2000);
                    });
                    await pollStackCreation(cloudformation, stackId, region);
                }
                else {
                    // Occurs when the stack fails to create with a CREATE_FAILED status
                    throw new Error(`Error creating ${secretName} Stack in ${region}. Encountered ${status} status. Status reason: ${stack.StackStatusReason}.`);
                }
            }
            catch (err) {
                console.log(err);
                console.log(`You may need to manually delete the Stack(${region}) from CloudFormation.`);
                throw err;
            }
        }
    }
}
exports.runCommand = runCommand;
/**
 * Reads the closest package.json looking for a version
 * @param currentDir directory to start looking for package.json from
 * @returns promise with the version resolved when package.json is read
 */
async function getPkgManifestVersion(currentDir) {
    const potentialPkgPath = path_1.default.resolve(currentDir, "package.json");
    if (await (0, util_1.isFile)(potentialPkgPath)) {
        return (0, util_1.readAndParseMandatoryJSONFileSync)(potentialPkgPath).version;
    }
    const nextDir = path_1.default.resolve(currentDir, "..");
    if (nextDir === currentDir) {
        // if we get to the root nextDir will be currentDir so return a default
        return "0.0.0";
    }
    return getPkgManifestVersion(nextDir);
}
/**
 * acc entrypoint that runs the command issuing metrics
 */
async function main() {
    let localNpmVersion;
    try {
        localNpmVersion = await getPkgManifestVersion(__dirname);
    }
    catch (err) {
        console.error(err);
        process.exit(1);
    }
    const askCliConfig = new ask_cli_config_1.AskCliConfig();
    const argv = getArguments(localNpmVersion);
    const command = typeof argv._[0] === "string" ? argv._[0] : "";
    const metrics = new metric_client_1.MetricClient(localNpmVersion, askCliConfig);
    metrics.startAction(command, "");
    try {
        await runCommand(command, argv, localNpmVersion, askCliConfig);
        console.log("SUCCESS");
        await metrics.sendData();
    }
    catch (err) {
        if (Array.isArray(err)) {
            (0, error_1.logProjectErrors)(err);
            // Arrays of ParseErrors correspond to acdl errors. Errors under the
            // control of the skill developer are not considered a failure
            await metrics.sendData();
        }
        else {
            console.error(err);
            if (err.uri) {
                // This is a FileError like JSON parsing issue. Errors under the
                // control of the skill developer are not considered a failure
                await metrics.sendData();
            }
            else {
                await metrics.sendData((0, error_1.stringifyError)(err));
            }
        }
        console.log("FAILURE");
        process.exit(1);
    }
}
main();
//# sourceMappingURL=data:application/json;base64,