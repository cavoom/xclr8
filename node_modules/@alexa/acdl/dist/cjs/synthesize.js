"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.synthesizeProject = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const compile_1 = require("./compile");
const ast_1 = require("./ast");
/**
 * Write an Assembly to the outDir.
 *
 * @param assembly to synthesize
 * @param outDir directory to synthesize assembly to
 */
async function synthesizeProject(project) {
    const outDirPath = path_1.default.isAbsolute(project.config.outDir)
        ? project.config.outDir
        : path_1.default.join(project.config.rootDir, project.config.outDir);
    await fs_extra_1.default.mkdir(outDirPath, { recursive: true });
    const compiledProject = (0, compile_1.compileProject)(project);
    await Promise.all(Object.entries(compiledProject.modules).map(async ([relativeFilePath, compiledModule]) => {
        var _a;
        const outputFile = path_1.default.join(outDirPath, relativeFilePath);
        const outputDir = path_1.default.dirname(outputFile);
        (_a = compiledModule.expressions) === null || _a === void 0 ? void 0 : _a.forEach((expr) => {
            var _a;
            if (expr.kind === "QualifiedNameDeclaration" &&
                ((_a = expr.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call" &&
                (expr.expression.name === ast_1.AlexaConversations.apl || expr.expression.name === ast_1.AlexaConversations.apla)) {
                const templatePath = expr.expression.arguments.path.arguments;
                if (templatePath) {
                    // update the path in the ASKIR to be relative from the directory the file is output from
                    /*
                     * Given the following file system:
                     * ```
                     * response/prompts/AlexaConversationsBye/document.json
                     * assets/my-template/document.json
                     * src/dialog.acdl
                     * src/local.json
                     * ```
                     *
                     * And the ACDL declarations:
                     * ```acdl
                     * bye = apla("../response/prompts/AlexaConversationsBye/document.json")
                     * my_template = apla("../assets/my-template/document.json")
                     * local = apla("./local.json")
                     * ```
                     *
                     * The first two paths, `bye` and `my_template` remain un-changed since
                     * they are the same relative path from `build/` as they are from `src/
                     *
                     * The `local` path is updated since we do not copy `local.json` to `build/` and
                     * the relative path from `build/` to `src/local.json` is `../src/local.json`
                     *
                     * Note: if a developer uses the `local` variant of storing templates, their `.npmignore`
                     * configuration should make sure that `src/` is included in the package or else the
                     * `.tgz` output by `npm pack` will not contain the templates and is thus broken.
                     */
                    const moduleFilePath = path_1.default.dirname(path_1.default.join(project.config.rootDir, project.config.srcDir, relativeFilePath));
                    const absoluteTemplatePath = path_1.default.resolve(moduleFilePath, templatePath);
                    const relativeFromBuildPath = path_1.default.relative(outputDir, absoluteTemplatePath);
                    expr.expression.arguments.path.arguments = relativeFromBuildPath;
                }
            }
        });
        await fs_extra_1.default.mkdir(outputDir, { recursive: true });
        await fs_extra_1.default.writeFile(outputFile, JSON.stringify(compiledModule, null, 2));
    }));
}
exports.synthesizeProject = synthesizeProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGhlc2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zeW50aGVzaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdEQUEwQjtBQUMxQixnREFBd0I7QUFHeEIsdUNBQXlDO0FBQ3pDLCtCQUF5QztBQUV6Qzs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxPQUFnQjtJQUN0RCxNQUFNLFVBQVUsR0FBRyxjQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU07UUFDdkIsQ0FBQyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU3RCxNQUFNLGtCQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sZUFBZSxHQUFHLElBQUEsd0JBQWMsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUVoRCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUU7O1FBQ3ZGLE1BQU0sVUFBVSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDM0QsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUzQyxNQUFBLGNBQWMsQ0FBQyxXQUFXLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFOztZQUMzQyxJQUNFLElBQUksQ0FBQyxJQUFJLEtBQUssMEJBQTBCO2dCQUN4QyxDQUFBLE1BQUEsSUFBSSxDQUFDLFVBQVUsMENBQUUsSUFBSSxNQUFLLE1BQU07Z0JBQ2hDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssd0JBQWtCLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLHdCQUFrQixDQUFDLElBQUksQ0FBQyxFQUNyRztnQkFDQSxNQUFNLFlBQVksR0FBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDdkUsSUFBSSxZQUFZLEVBQUU7b0JBQ2hCLHlGQUF5RjtvQkFFekY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBeUJHO29CQUVILE1BQU0sY0FBYyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7b0JBQ2hILE1BQU0sb0JBQW9CLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ3hFLE1BQU0scUJBQXFCLEdBQUcsY0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztvQkFDNUUsSUFBSSxDQUFDLFVBQWtCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUM7aUJBQzNFO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sa0JBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxrQkFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNKLENBQUM7QUEvREQsOENBK0RDIn0=