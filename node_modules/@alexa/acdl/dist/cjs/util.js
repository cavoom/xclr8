"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDirectoriesSync = exports.getDirectories = exports.isAmazonBuiltin = exports.isGeneratedFile = exports.typesToNameString = exports.isNotUndefined = exports.isBuiltinSlotType = exports.zipDirectory = exports.log = exports.sanitize = exports.stringifyTypeParameter = exports.stringifyTypeReference = exports.isQualifiedNamePattern = exports.getName = exports.getNamespace = exports.safeFs = exports.safeFsSync = exports.lstat = exports.stat = exports.statSync = exports.isDir = exports.isDirSync = exports.isFile = exports.isFileSync = exports.readFile = exports.readFileSync = exports.readJsonFile = exports.readJsonFileSync = exports.readAndParseMandatoryJSONFileSync = exports.parseJSON = exports.readdir = exports.exists = exports.existsSync = exports.trimScheme = exports.time = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const archiver_1 = __importDefault(require("archiver"));
const ask = __importStar(require("./ast"));
const constants_1 = require("./constants");
const error_1 = require("./error");
function time(description, f) {
    // const start = new Date().getTime();
    const result = f();
    if (typeof result.then === "function") {
        return result.then((result) => {
            emit();
            return result;
        });
    }
    emit();
    return result;
    function emit() {
        // console.log(description, `${new Date().getTime() - start}ms`);
    }
}
exports.time = time;
function trimScheme(uri) {
    if (uri.startsWith("file://")) {
        return uri.slice("file://".length);
    }
    return uri;
}
exports.trimScheme = trimScheme;
/**
 * Asynchronously check if a file exists
 */
function existsSync(file) {
    try {
        fs_extra_1.default.accessSync(file, fs_extra_1.default.constants.R_OK);
        return true;
    }
    catch (err) {
        if (err.code === "ENOENT") {
            return false;
        }
        throw err;
    }
}
exports.existsSync = existsSync;
/**
 * Asynchronously check if a file exists
 */
async function exists(file) {
    try {
        await fs_extra_1.default.access(file, fs_extra_1.default.constants.R_OK);
        return true;
    }
    catch (err) {
        if (err.code === "ENOENT") {
            return false;
        }
        throw err;
    }
}
exports.exists = exists;
async function readdir(dir) {
    return fs_extra_1.default.readdir(dir);
}
exports.readdir = readdir;
/**
 * Parses JSON throwing an error that includes the path if the JSON is invalid
 * @param jsonText text to be parsed
 * @param path path the text came from
 */
function parseJSON(jsonText, path) {
    try {
        return JSON.parse(jsonText);
    }
    catch (error) {
        throw new error_1.FileError(`Error parsing JSON in "${path}": ${error.message}.`, path);
    }
}
exports.parseJSON = parseJSON;
/**
 * Reads a file and parses the JSON throwing an error that includes the path if
 * cannot read file or if the JSON is invalid
 * @param path path of file to read
 * @returns the JSON object read from the file
 */
function readAndParseMandatoryJSONFileSync(path) {
    const fileContents = readJsonFileSync(path);
    if (!fileContents) {
        throw new error_1.FileError(`Error reading file "${path}".`, path);
    }
    return fileContents;
}
exports.readAndParseMandatoryJSONFileSync = readAndParseMandatoryJSONFileSync;
function readJsonFileSync(filePath) {
    const file = readFileSync(filePath);
    if (file === undefined) {
        return undefined;
    }
    return parseJSON(file, filePath);
}
exports.readJsonFileSync = readJsonFileSync;
async function readJsonFile(filePath) {
    const file = await readFile(filePath);
    if (file === undefined) {
        return undefined;
    }
    return parseJSON(file, filePath);
}
exports.readJsonFile = readJsonFile;
function readFileSync(path) {
    if (existsSync(path)) {
        return fs_extra_1.default.readFileSync(path).toString("utf8");
    }
    return undefined;
}
exports.readFileSync = readFileSync;
async function readFile(path) {
    if (await exists(path)) {
        return (await fs_extra_1.default.readFile(path)).toString("utf8");
    }
    return undefined;
}
exports.readFile = readFile;
function isFileSync(path) {
    var _a;
    return (_a = statSync(path)) === null || _a === void 0 ? void 0 : _a.isFile();
}
exports.isFileSync = isFileSync;
async function isFile(path) {
    var _a;
    return (_a = (await stat(path))) === null || _a === void 0 ? void 0 : _a.isFile();
}
exports.isFile = isFile;
function isDirSync(path) {
    var _a;
    return ((_a = statSync(path)) === null || _a === void 0 ? void 0 : _a.isDirectory()) === true;
}
exports.isDirSync = isDirSync;
async function isDir(path) {
    var _a;
    return ((_a = (await stat(path))) === null || _a === void 0 ? void 0 : _a.isDirectory()) === true;
}
exports.isDir = isDir;
function statSync(path) {
    return safeFsSync(() => fs_extra_1.default.statSync(path));
}
exports.statSync = statSync;
async function stat(path) {
    return safeFs(() => fs_extra_1.default.stat(path));
}
exports.stat = stat;
async function lstat(path) {
    return safeFs(() => fs_extra_1.default.lstat(path));
}
exports.lstat = lstat;
function safeFsSync(f) {
    try {
        return f();
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // file doesn't exist, so stat is undefined
            return undefined;
        }
        // we can't read the file, throw the error
        throw err;
    }
}
exports.safeFsSync = safeFsSync;
async function safeFs(f) {
    try {
        const t = f();
        if (t.then && t.catch) {
            return await t;
        }
        return t;
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // file doesn't exist, so stat is undefined
            return undefined;
        }
        // we can't read the file, throw the error
        throw err;
    }
}
exports.safeFs = safeFs;
function getNamespace(fqn) {
    return fqn.slice(0, fqn.lastIndexOf("."));
}
exports.getNamespace = getNamespace;
function getName(fqn) {
    return fqn.slice(fqn.lastIndexOf(".") + 1);
}
exports.getName = getName;
function isQualifiedNamePattern(name) {
    // poor man's algorithm for now - TODO: use regex from spec
    return name !== undefined && name.includes(".");
}
exports.isQualifiedNamePattern = isQualifiedNamePattern;
function stringifyTypeReference(ref) {
    var _a;
    if (ref === undefined) {
        return ask.AlexaSchema.Thing;
    }
    return `${(_a = ref.name) === null || _a === void 0 ? void 0 : _a.name}${ref.arguments ? `<${ref.arguments.map((arg) => stringifyTypeReference(arg))}>` : ""}`;
}
exports.stringifyTypeReference = stringifyTypeReference;
function stringifyTypeParameter(param) {
    return `T${param.constraints ? ` : ${param.constraints.map(stringifyTypeReference).join(", ")}` : ""}`;
}
exports.stringifyTypeParameter = stringifyTypeParameter;
function sanitize(a) {
    if (a === undefined) {
        return undefined;
    }
    if (a === null) {
        return a;
    }
    if (typeof a === "object") {
        if (Array.isArray(a)) {
            if (a.length === 0) {
                return undefined;
            }
        }
        else if (Object.keys(a).length === 0) {
            return undefined;
        }
    }
    return a;
}
exports.sanitize = sanitize;
function log(a, keepLoc) {
    if (a === undefined) {
        console.log("");
    }
    else if (typeof a === "string") {
        console.log(a);
    }
    else {
        console.log(JSON.stringify(a, (k, v) => (k === "loc" && keepLoc !== true ? undefined : k === "parent" ? undefined : v), 2));
    }
}
exports.log = log;
function zipDirectory(source, out) {
    const archive = (0, archiver_1.default)("zip", { zlib: { level: 9 } });
    const stream = fs_extra_1.default.createWriteStream(out);
    return new Promise((resolve, reject) => {
        archive
            .directory(source, false)
            .on("error", (err) => reject(err))
            .pipe(stream);
        stream.on("close", () => resolve(undefined));
        archive.finalize();
    });
}
exports.zipDirectory = zipDirectory;
function isBuiltinSlotType(slotName) {
    return slotName.startsWith("AMAZON.");
}
exports.isBuiltinSlotType = isBuiltinSlotType;
function isNotUndefined(value) {
    return value !== undefined;
}
exports.isNotUndefined = isNotUndefined;
/**
 * Stringifies a type array to their short type names
 */
function typesToNameString(types) {
    return types.map((type) => `"${type.shortName}"`).join(", ");
}
exports.typesToNameString = typesToNameString;
/**
 * Returns if this file is generated ASKIR module.
 */
function isGeneratedFile(fileName) {
    return fileName.includes(constants_1.GeneratedInteractionModelModule.uriPrefix);
}
exports.isGeneratedFile = isGeneratedFile;
/**
 * returns if the string starts with AMAZON.
 */
function isAmazonBuiltin(name) {
    return name.startsWith(constants_1.Constants.BuiltinIntentPrefix);
}
exports.isAmazonBuiltin = isAmazonBuiltin;
/**
 * gets all directories recursively under parentDirectoryPath
 * @param parentDirectoryPath path of parentDirectory
 * @returns an array of all directories recursively under parentDirectoryPath
 */
async function getDirectories(parentDirectoryPath) {
    return (await fs_extra_1.default.readdir(parentDirectoryPath, { withFileTypes: true }))
        .filter((dir) => dir.isDirectory())
        .map((dir) => dir.name);
}
exports.getDirectories = getDirectories;
/**
 * gets all directories recursively under parentDirectoryPath
 * @param parentDirectoryPath path of parentDirectory
 * @returns an array of all directories recursively under parentDirectoryPath
 */
function getDirectoriesSync(parentDirectoryPath) {
    return fs_extra_1.default
        .readdirSync(parentDirectoryPath, { withFileTypes: true })
        .filter((dir) => dir.isDirectory())
        .map((dir) => dir.name);
}
exports.getDirectoriesSync = getDirectoriesSync;
//# sourceMappingURL=data:application/json;base64,