import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ConditionExprContext } from "./ACDLParser";
import { CorrectionExprContext } from "./ACDLParser";
import { CallExprContext } from "./ACDLParser";
import { LiteralExprContext } from "./ACDLParser";
import { IsExprContext } from "./ACDLParser";
import { ListIndexContext } from "./ACDLParser";
import { PropertyReferenceContext } from "./ACDLParser";
import { InExprContext } from "./ACDLParser";
import { BinaryExprContext } from "./ACDLParser";
import { IdentifierExprContext } from "./ACDLParser";
import { ParenthesizedExprContext } from "./ACDLParser";
import { LineContext } from "./ACDLParser";
import { JsdocContext } from "./ACDLParser";
import { SingleLineExprContext } from "./ACDLParser";
import { ModuleContext } from "./ACDLParser";
import { ModuleExpressionContext } from "./ACDLParser";
import { KeywordContext } from "./ACDLParser";
import { IdentifierContext } from "./ACDLParser";
import { QualifiedNameContext } from "./ACDLParser";
import { NamespaceDeclarationContext } from "./ACDLParser";
import { ImportDeclarationContext } from "./ACDLParser";
import { EnumDeclarationContext } from "./ACDLParser";
import { EnumItemContext } from "./ACDLParser";
import { TypeReferenceContext } from "./ACDLParser";
import { TypeArgumentsContext } from "./ACDLParser";
import { TypeDeclarationContext } from "./ACDLParser";
import { TypeArgumentDeclarationsContext } from "./ACDLParser";
import { TypeArgumentDeclarationContext } from "./ACDLParser";
import { TypeConstraintContext } from "./ACDLParser";
import { TypePropertiesContext } from "./ACDLParser";
import { TypePropertyContext } from "./ACDLParser";
import { ArgumentDeclarationsContext } from "./ACDLParser";
import { ArgumentDeclarationContext } from "./ACDLParser";
import { StandardArgumentDeclarationContext } from "./ACDLParser";
import { FunctionArgumentDeclarationContext } from "./ACDLParser";
import { ArgumentDefaultContext } from "./ACDLParser";
import { ActionDeclarationContext } from "./ACDLParser";
import { InteractionDeclarationContext } from "./ACDLParser";
import { DialogDeclarationContext } from "./ACDLParser";
import { DialogScopeContext } from "./ACDLParser";
import { FunctionSignatureContext } from "./ACDLParser";
import { SampleDeclarationContext } from "./ACDLParser";
import { BlockContext } from "./ACDLParser";
import { BlockExpressionContext } from "./ACDLParser";
import { QualifiedNameDeclarationContext } from "./ACDLParser";
import { NameDeclarationContext } from "./ACDLParser";
import { ExpressionContext } from "./ACDLParser";
import { LiteralContext } from "./ACDLParser";
import { NullContext } from "./ACDLParser";
import { NothingContext } from "./ACDLParser";
import { VoidContext } from "./ACDLParser";
import { NumberContext } from "./ACDLParser";
import { StringContext } from "./ACDLParser";
import { String_contentContext } from "./ACDLParser";
import { BoolContext } from "./ACDLParser";
import { AnnotationContext } from "./ACDLParser";
import { AnnotationListContext } from "./ACDLParser";
import { CallContext } from "./ACDLParser";
import { CallArgumentsContext } from "./ACDLParser";
import { CallArgumentContext } from "./ACDLParser";
import { ObjectContext } from "./ACDLParser";
import { ObjectKeyValueContext } from "./ACDLParser";
import { ListContext } from "./ACDLParser";
import { ConditionContext } from "./ACDLParser";
import { OtherwiseContext } from "./ACDLParser";
import { CorrectionContext } from "./ACDLParser";
import { RelationalContext } from "./ACDLParser";
import { EqualityContext } from "./ACDLParser";
/**
 * This interface defines a complete listener for a parse tree produced by
 * `ACDLParser`.
 */
export interface ACDLParserListener extends ParseTreeListener {
    /**
     * Enter a parse tree produced by the `conditionExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterConditionExpr?: (ctx: ConditionExprContext) => void;
    /**
     * Exit a parse tree produced by the `conditionExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitConditionExpr?: (ctx: ConditionExprContext) => void;
    /**
     * Enter a parse tree produced by the `correctionExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterCorrectionExpr?: (ctx: CorrectionExprContext) => void;
    /**
     * Exit a parse tree produced by the `correctionExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitCorrectionExpr?: (ctx: CorrectionExprContext) => void;
    /**
     * Enter a parse tree produced by the `callExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterCallExpr?: (ctx: CallExprContext) => void;
    /**
     * Exit a parse tree produced by the `callExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitCallExpr?: (ctx: CallExprContext) => void;
    /**
     * Enter a parse tree produced by the `literalExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterLiteralExpr?: (ctx: LiteralExprContext) => void;
    /**
     * Exit a parse tree produced by the `literalExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitLiteralExpr?: (ctx: LiteralExprContext) => void;
    /**
     * Enter a parse tree produced by the `isExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterIsExpr?: (ctx: IsExprContext) => void;
    /**
     * Exit a parse tree produced by the `isExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitIsExpr?: (ctx: IsExprContext) => void;
    /**
     * Enter a parse tree produced by the `listIndex`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterListIndex?: (ctx: ListIndexContext) => void;
    /**
     * Exit a parse tree produced by the `listIndex`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitListIndex?: (ctx: ListIndexContext) => void;
    /**
     * Enter a parse tree produced by the `propertyReference`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterPropertyReference?: (ctx: PropertyReferenceContext) => void;
    /**
     * Exit a parse tree produced by the `propertyReference`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitPropertyReference?: (ctx: PropertyReferenceContext) => void;
    /**
     * Enter a parse tree produced by the `inExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterInExpr?: (ctx: InExprContext) => void;
    /**
     * Exit a parse tree produced by the `inExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitInExpr?: (ctx: InExprContext) => void;
    /**
     * Enter a parse tree produced by the `binaryExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterBinaryExpr?: (ctx: BinaryExprContext) => void;
    /**
     * Exit a parse tree produced by the `binaryExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitBinaryExpr?: (ctx: BinaryExprContext) => void;
    /**
     * Enter a parse tree produced by the `identifierExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterIdentifierExpr?: (ctx: IdentifierExprContext) => void;
    /**
     * Exit a parse tree produced by the `identifierExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitIdentifierExpr?: (ctx: IdentifierExprContext) => void;
    /**
     * Enter a parse tree produced by the `parenthesizedExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterParenthesizedExpr?: (ctx: ParenthesizedExprContext) => void;
    /**
     * Exit a parse tree produced by the `parenthesizedExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitParenthesizedExpr?: (ctx: ParenthesizedExprContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.line`.
     * @param ctx the parse tree
     */
    enterLine?: (ctx: LineContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.line`.
     * @param ctx the parse tree
     */
    exitLine?: (ctx: LineContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.jsdoc`.
     * @param ctx the parse tree
     */
    enterJsdoc?: (ctx: JsdocContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.jsdoc`.
     * @param ctx the parse tree
     */
    exitJsdoc?: (ctx: JsdocContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.singleLineExpr`.
     * @param ctx the parse tree
     */
    enterSingleLineExpr?: (ctx: SingleLineExprContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.singleLineExpr`.
     * @param ctx the parse tree
     */
    exitSingleLineExpr?: (ctx: SingleLineExprContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.module`.
     * @param ctx the parse tree
     */
    enterModule?: (ctx: ModuleContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.module`.
     * @param ctx the parse tree
     */
    exitModule?: (ctx: ModuleContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.moduleExpression`.
     * @param ctx the parse tree
     */
    enterModuleExpression?: (ctx: ModuleExpressionContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.moduleExpression`.
     * @param ctx the parse tree
     */
    exitModuleExpression?: (ctx: ModuleExpressionContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.keyword`.
     * @param ctx the parse tree
     */
    enterKeyword?: (ctx: KeywordContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.keyword`.
     * @param ctx the parse tree
     */
    exitKeyword?: (ctx: KeywordContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.identifier`.
     * @param ctx the parse tree
     */
    enterIdentifier?: (ctx: IdentifierContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.identifier`.
     * @param ctx the parse tree
     */
    exitIdentifier?: (ctx: IdentifierContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.qualifiedName`.
     * @param ctx the parse tree
     */
    enterQualifiedName?: (ctx: QualifiedNameContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.qualifiedName`.
     * @param ctx the parse tree
     */
    exitQualifiedName?: (ctx: QualifiedNameContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.namespaceDeclaration`.
     * @param ctx the parse tree
     */
    enterNamespaceDeclaration?: (ctx: NamespaceDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.namespaceDeclaration`.
     * @param ctx the parse tree
     */
    exitNamespaceDeclaration?: (ctx: NamespaceDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.importDeclaration`.
     * @param ctx the parse tree
     */
    enterImportDeclaration?: (ctx: ImportDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.importDeclaration`.
     * @param ctx the parse tree
     */
    exitImportDeclaration?: (ctx: ImportDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.enumDeclaration`.
     * @param ctx the parse tree
     */
    enterEnumDeclaration?: (ctx: EnumDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.enumDeclaration`.
     * @param ctx the parse tree
     */
    exitEnumDeclaration?: (ctx: EnumDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.enumItem`.
     * @param ctx the parse tree
     */
    enterEnumItem?: (ctx: EnumItemContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.enumItem`.
     * @param ctx the parse tree
     */
    exitEnumItem?: (ctx: EnumItemContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeReference`.
     * @param ctx the parse tree
     */
    enterTypeReference?: (ctx: TypeReferenceContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeReference`.
     * @param ctx the parse tree
     */
    exitTypeReference?: (ctx: TypeReferenceContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeArguments`.
     * @param ctx the parse tree
     */
    enterTypeArguments?: (ctx: TypeArgumentsContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeArguments`.
     * @param ctx the parse tree
     */
    exitTypeArguments?: (ctx: TypeArgumentsContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeDeclaration`.
     * @param ctx the parse tree
     */
    enterTypeDeclaration?: (ctx: TypeDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeDeclaration`.
     * @param ctx the parse tree
     */
    exitTypeDeclaration?: (ctx: TypeDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeArgumentDeclarations`.
     * @param ctx the parse tree
     */
    enterTypeArgumentDeclarations?: (ctx: TypeArgumentDeclarationsContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeArgumentDeclarations`.
     * @param ctx the parse tree
     */
    exitTypeArgumentDeclarations?: (ctx: TypeArgumentDeclarationsContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeArgumentDeclaration`.
     * @param ctx the parse tree
     */
    enterTypeArgumentDeclaration?: (ctx: TypeArgumentDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeArgumentDeclaration`.
     * @param ctx the parse tree
     */
    exitTypeArgumentDeclaration?: (ctx: TypeArgumentDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeConstraint`.
     * @param ctx the parse tree
     */
    enterTypeConstraint?: (ctx: TypeConstraintContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeConstraint`.
     * @param ctx the parse tree
     */
    exitTypeConstraint?: (ctx: TypeConstraintContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeProperties`.
     * @param ctx the parse tree
     */
    enterTypeProperties?: (ctx: TypePropertiesContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeProperties`.
     * @param ctx the parse tree
     */
    exitTypeProperties?: (ctx: TypePropertiesContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.typeProperty`.
     * @param ctx the parse tree
     */
    enterTypeProperty?: (ctx: TypePropertyContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.typeProperty`.
     * @param ctx the parse tree
     */
    exitTypeProperty?: (ctx: TypePropertyContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.argumentDeclarations`.
     * @param ctx the parse tree
     */
    enterArgumentDeclarations?: (ctx: ArgumentDeclarationsContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.argumentDeclarations`.
     * @param ctx the parse tree
     */
    exitArgumentDeclarations?: (ctx: ArgumentDeclarationsContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.argumentDeclaration`.
     * @param ctx the parse tree
     */
    enterArgumentDeclaration?: (ctx: ArgumentDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.argumentDeclaration`.
     * @param ctx the parse tree
     */
    exitArgumentDeclaration?: (ctx: ArgumentDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.standardArgumentDeclaration`.
     * @param ctx the parse tree
     */
    enterStandardArgumentDeclaration?: (ctx: StandardArgumentDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.standardArgumentDeclaration`.
     * @param ctx the parse tree
     */
    exitStandardArgumentDeclaration?: (ctx: StandardArgumentDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.functionArgumentDeclaration`.
     * @param ctx the parse tree
     */
    enterFunctionArgumentDeclaration?: (ctx: FunctionArgumentDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.functionArgumentDeclaration`.
     * @param ctx the parse tree
     */
    exitFunctionArgumentDeclaration?: (ctx: FunctionArgumentDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.argumentDefault`.
     * @param ctx the parse tree
     */
    enterArgumentDefault?: (ctx: ArgumentDefaultContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.argumentDefault`.
     * @param ctx the parse tree
     */
    exitArgumentDefault?: (ctx: ArgumentDefaultContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.actionDeclaration`.
     * @param ctx the parse tree
     */
    enterActionDeclaration?: (ctx: ActionDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.actionDeclaration`.
     * @param ctx the parse tree
     */
    exitActionDeclaration?: (ctx: ActionDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.interactionDeclaration`.
     * @param ctx the parse tree
     */
    enterInteractionDeclaration?: (ctx: InteractionDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.interactionDeclaration`.
     * @param ctx the parse tree
     */
    exitInteractionDeclaration?: (ctx: InteractionDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.dialogDeclaration`.
     * @param ctx the parse tree
     */
    enterDialogDeclaration?: (ctx: DialogDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.dialogDeclaration`.
     * @param ctx the parse tree
     */
    exitDialogDeclaration?: (ctx: DialogDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.dialogScope`.
     * @param ctx the parse tree
     */
    enterDialogScope?: (ctx: DialogScopeContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.dialogScope`.
     * @param ctx the parse tree
     */
    exitDialogScope?: (ctx: DialogScopeContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.functionSignature`.
     * @param ctx the parse tree
     */
    enterFunctionSignature?: (ctx: FunctionSignatureContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.functionSignature`.
     * @param ctx the parse tree
     */
    exitFunctionSignature?: (ctx: FunctionSignatureContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.sampleDeclaration`.
     * @param ctx the parse tree
     */
    enterSampleDeclaration?: (ctx: SampleDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.sampleDeclaration`.
     * @param ctx the parse tree
     */
    exitSampleDeclaration?: (ctx: SampleDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.block`.
     * @param ctx the parse tree
     */
    enterBlock?: (ctx: BlockContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.block`.
     * @param ctx the parse tree
     */
    exitBlock?: (ctx: BlockContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.blockExpression`.
     * @param ctx the parse tree
     */
    enterBlockExpression?: (ctx: BlockExpressionContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.blockExpression`.
     * @param ctx the parse tree
     */
    exitBlockExpression?: (ctx: BlockExpressionContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.qualifiedNameDeclaration`.
     * @param ctx the parse tree
     */
    enterQualifiedNameDeclaration?: (ctx: QualifiedNameDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.qualifiedNameDeclaration`.
     * @param ctx the parse tree
     */
    exitQualifiedNameDeclaration?: (ctx: QualifiedNameDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.nameDeclaration`.
     * @param ctx the parse tree
     */
    enterNameDeclaration?: (ctx: NameDeclarationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.nameDeclaration`.
     * @param ctx the parse tree
     */
    exitNameDeclaration?: (ctx: NameDeclarationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    enterExpression?: (ctx: ExpressionContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.expression`.
     * @param ctx the parse tree
     */
    exitExpression?: (ctx: ExpressionContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.literal`.
     * @param ctx the parse tree
     */
    enterLiteral?: (ctx: LiteralContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.literal`.
     * @param ctx the parse tree
     */
    exitLiteral?: (ctx: LiteralContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.null`.
     * @param ctx the parse tree
     */
    enterNull?: (ctx: NullContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.null`.
     * @param ctx the parse tree
     */
    exitNull?: (ctx: NullContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.nothing`.
     * @param ctx the parse tree
     */
    enterNothing?: (ctx: NothingContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.nothing`.
     * @param ctx the parse tree
     */
    exitNothing?: (ctx: NothingContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.void`.
     * @param ctx the parse tree
     */
    enterVoid?: (ctx: VoidContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.void`.
     * @param ctx the parse tree
     */
    exitVoid?: (ctx: VoidContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.number`.
     * @param ctx the parse tree
     */
    enterNumber?: (ctx: NumberContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.number`.
     * @param ctx the parse tree
     */
    exitNumber?: (ctx: NumberContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.string`.
     * @param ctx the parse tree
     */
    enterString?: (ctx: StringContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.string`.
     * @param ctx the parse tree
     */
    exitString?: (ctx: StringContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.string_content`.
     * @param ctx the parse tree
     */
    enterString_content?: (ctx: String_contentContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.string_content`.
     * @param ctx the parse tree
     */
    exitString_content?: (ctx: String_contentContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.bool`.
     * @param ctx the parse tree
     */
    enterBool?: (ctx: BoolContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.bool`.
     * @param ctx the parse tree
     */
    exitBool?: (ctx: BoolContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.annotation`.
     * @param ctx the parse tree
     */
    enterAnnotation?: (ctx: AnnotationContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.annotation`.
     * @param ctx the parse tree
     */
    exitAnnotation?: (ctx: AnnotationContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.annotationList`.
     * @param ctx the parse tree
     */
    enterAnnotationList?: (ctx: AnnotationListContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.annotationList`.
     * @param ctx the parse tree
     */
    exitAnnotationList?: (ctx: AnnotationListContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.call`.
     * @param ctx the parse tree
     */
    enterCall?: (ctx: CallContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.call`.
     * @param ctx the parse tree
     */
    exitCall?: (ctx: CallContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.callArguments`.
     * @param ctx the parse tree
     */
    enterCallArguments?: (ctx: CallArgumentsContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.callArguments`.
     * @param ctx the parse tree
     */
    exitCallArguments?: (ctx: CallArgumentsContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.callArgument`.
     * @param ctx the parse tree
     */
    enterCallArgument?: (ctx: CallArgumentContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.callArgument`.
     * @param ctx the parse tree
     */
    exitCallArgument?: (ctx: CallArgumentContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.object`.
     * @param ctx the parse tree
     */
    enterObject?: (ctx: ObjectContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.object`.
     * @param ctx the parse tree
     */
    exitObject?: (ctx: ObjectContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.objectKeyValue`.
     * @param ctx the parse tree
     */
    enterObjectKeyValue?: (ctx: ObjectKeyValueContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.objectKeyValue`.
     * @param ctx the parse tree
     */
    exitObjectKeyValue?: (ctx: ObjectKeyValueContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.list`.
     * @param ctx the parse tree
     */
    enterList?: (ctx: ListContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.list`.
     * @param ctx the parse tree
     */
    exitList?: (ctx: ListContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.condition`.
     * @param ctx the parse tree
     */
    enterCondition?: (ctx: ConditionContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.condition`.
     * @param ctx the parse tree
     */
    exitCondition?: (ctx: ConditionContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.otherwise`.
     * @param ctx the parse tree
     */
    enterOtherwise?: (ctx: OtherwiseContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.otherwise`.
     * @param ctx the parse tree
     */
    exitOtherwise?: (ctx: OtherwiseContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.correction`.
     * @param ctx the parse tree
     */
    enterCorrection?: (ctx: CorrectionContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.correction`.
     * @param ctx the parse tree
     */
    exitCorrection?: (ctx: CorrectionContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.relational`.
     * @param ctx the parse tree
     */
    enterRelational?: (ctx: RelationalContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.relational`.
     * @param ctx the parse tree
     */
    exitRelational?: (ctx: RelationalContext) => void;
    /**
     * Enter a parse tree produced by `ACDLParser.equality`.
     * @param ctx the parse tree
     */
    enterEquality?: (ctx: EqualityContext) => void;
    /**
     * Exit a parse tree produced by `ACDLParser.equality`.
     * @param ctx the parse tree
     */
    exitEquality?: (ctx: EqualityContext) => void;
}
//# sourceMappingURL=ACDLParserListener.d.ts.map