"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadASKIRProject = exports.loadProjectConfig = exports.loadProjectConfigSync = void 0;
const path_1 = __importDefault(require("path"));
const package_1 = require("./package");
const project_1 = require("./project");
const transformUIProject_1 = require("./transformUIProject");
const util_1 = require("./util");
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
function loadProjectConfigSync(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = (0, package_1.loadPackageConfigSync)(rootDir);
    if (pkgJson !== undefined) {
        return getProjectConfig(rootDir, pkgJson);
    }
    const askResources = (0, util_1.readJsonFileSync)(path_1.default.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path_1.default.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if ((0, util_1.existsSync)(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: package_1.ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
exports.loadProjectConfigSync = loadProjectConfigSync;
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
async function loadProjectConfig(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = await (0, package_1.loadPackageConfig)(rootDir);
    if (pkgJson !== undefined) {
        return getProjectConfig(rootDir, pkgJson);
    }
    const askResources = await (0, util_1.readJsonFile)(path_1.default.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path_1.default.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if (await (0, util_1.exists)(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: package_1.ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
exports.loadProjectConfig = loadProjectConfig;
/**
 * Gets a project corresponding to ASKIR for validation. The ASKIRCompilerService can call this.
 * If the project is a UI project it will be transformed to the version that can be compiled
 * in the frontend/handled in the backend.
 * @param locale locale to load the project
 * @param rootDir root of the project
 * @returnsa project corresponding to ASKIR for validation. The ASKIRCompilerService can call this
 */
async function loadASKIRProject(locale, rootDir = process.cwd()) {
    let projectConfig = undefined;
    const pkgJson = await (0, package_1.loadPackageConfig)(rootDir);
    if (pkgJson !== undefined) {
        projectConfig = getProjectConfig(rootDir, pkgJson);
    }
    if (!projectConfig) {
        const skillPackagePath = path_1.default.join(rootDir, "skill-package");
        const skillPackageConversationsPath = path_1.default.join(skillPackagePath, "conversations");
        const conversationsPath = path_1.default.join(rootDir, "conversations");
        let packageRootDir = undefined;
        if ((await (0, util_1.exists)(skillPackagePath)) && (await (0, util_1.exists)(skillPackageConversationsPath))) {
            packageRootDir = skillPackagePath;
        }
        else if (await (0, util_1.exists)(conversationsPath)) {
            packageRootDir = rootDir;
        }
        if (!packageRootDir) {
            throw new Error("Either package.json with ask section, ./skill-package/conversations or ./conversations folder must be present");
        }
        projectConfig = {
            srcDir: "conversations/" + locale + "/",
            name: "in-memory",
            rootDir: packageRootDir,
            outDir: "build",
            projectVersion: package_1.ProjectVersion.Beta1,
        };
    }
    let project = await (0, project_1.loadProject)(projectConfig, true);
    const uiSkillInformation = await (0, transformUIProject_1.getUISkillInformation)(project.sourceModules);
    if (!uiSkillInformation.isUISkill) {
        throw new Error("This is not a UI skill");
    }
    if (!new Set(uiSkillInformation.localesUsed).has(locale)) {
        throw new Error(`Locale ${locale} not found in skill locales: ${Array.from(uiSkillInformation.localesUsed.keys()).join(",")}`);
    }
    return (0, transformUIProject_1.transformUIProject)(project, uiSkillInformation.localesUsed, false);
}
exports.loadASKIRProject = loadASKIRProject;
function getProjectConfig(rootDir, packageConfig) {
    return {
        ...packageConfig.ask,
        name: packageConfig.name,
        rootDir,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvamVjdC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLHVDQUFrSTtBQUNsSSx1Q0FBK0M7QUFDL0MsNkRBQStFO0FBQy9FLGlDQUEwRTtBQTBDMUU7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsU0FBZ0IscUJBQXFCLENBQUMsVUFBa0IsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFVBQWtCLFNBQVM7O0lBQ2hHLE1BQU0sT0FBTyxHQUFHLElBQUEsK0JBQXFCLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFFL0MsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ3pCLE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsTUFBTSxZQUFZLEdBQUcsSUFBQSx1QkFBZ0IsRUFBd0IsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBQ3ZHLE1BQU0sZ0JBQWdCLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBQSxNQUFBLE1BQUEsTUFBQSxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUUsUUFBUSwwQ0FBRyxPQUFPLENBQUMsMENBQUUsYUFBYSwwQ0FBRSxHQUFHLG1DQUFJLGVBQWUsQ0FBQyxDQUFDO0lBQ3RILElBQUksSUFBQSxpQkFBVSxFQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDaEMsT0FBTztZQUNMLE9BQU87WUFDUCxNQUFNLEVBQUUsZUFBZTtZQUN2QixNQUFNLEVBQUUsT0FBTztZQUNmLGNBQWMsRUFBRSx3QkFBYyxDQUFDLEtBQUs7WUFDcEMsYUFBYSxFQUFFLGdCQUFnQjtTQUNoQyxDQUFDO0tBQ0g7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLDRGQUE0RixPQUFPLEdBQUcsQ0FBQyxD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