"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationErrorFactory = exports.getExpressionIfLocField = void 0;
const prelude_1 = require("./ast/prelude");
const constants_1 = require("./constants");
/**
 * Get the first expression in @param expressions that has a truthy `loc` field, or fallback to the last expression provided. Used to get expression when calling error factories.
 */
const getExpressionIfLocField = (...expressions) => expressions.find((expr) => expr === null || expr === void 0 ? void 0 : expr.loc) || expressions[expressions.length - 1];
exports.getExpressionIfLocField = getExpressionIfLocField;
const createErrorFactory = (code, getMessage) => (input = {}) => {
    const { expr, attributes, overrideMessage } = input;
    return {
        uri: expr === null || expr === void 0 ? void 0 : expr.uri,
        loc: expr === null || expr === void 0 ? void 0 : expr.loc,
        attributes,
        code,
        message: overrideMessage !== null && overrideMessage !== void 0 ? overrideMessage : getMessage(attributes || {}),
    };
};
function createError(code, category = "SemanticError" /* ErrorCategory.SemanticError */) {
    return { code, category };
}
// Module expressions can also be an skill, SkillLevelResponses, enum and  MFT's interaction. Mentioning only
// the top 4 in the message and covering the rest with etc.
const declarationExpected = `Expressions in a module must be declarations for dialogs, types, actions, events, or calls to global actions.`;
const ValidationErrorFactoryNoName = {
    /*
     * ========== SYNTAX ERRORS ===========
     */
    SyntaxError: createErrorFactory(createError(1000, "SyntaxError" /* ErrorCategory.SyntaxError */), () => "Syntax error"),
    /**
     * Unexpected operator.
     *
     * Supports:
     * `!`, `&&`, `||`, `<`, `<=`, `=`, `>`, `>=`.
     */
    UnexpectedOperator: createErrorFactory(createError(1001, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ constructorName }) => `Encountered unexpected expression while parsing "${constructorName}"`),
    UnexpectedOperatorWithText: createErrorFactory(createError(1002, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ expressionText, constructorName }) => `Encountered unexpected expression: "${expressionText}" while parsing "${constructorName}"`),
    UnexpectedBooleanOperator: createErrorFactory(createError(1003, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ expressionText }) => `Unknown operator: "${expressionText}"`),
    MissingUtteranceClosingBrace: createErrorFactory(createError(1004, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ utterance }) => `Utterance '${utterance}' is missing '}' after '{'`),
    MissingUtteranceOpeningBrace: createErrorFactory(createError(1004, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ utterance }) => `Utterance '${utterance}' is missing '{' before '}'`),
    EmptyUtteranceBraces: createErrorFactory(createError(1004, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ utterance }) => `Utterance '${utterance}' is missing variable between empty braces`),
    /*
     * Import errors
     */
    InvalidImport: createErrorFactory(createError(1004, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ importName }) => `cannot find import: ${importName}`),
    InvalidImportNamespace: createErrorFactory(createError(1005, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ importName }) => `could not find namespace: ${importName}`),
    /*
     * Type Errors
     */
    TypeError: createErrorFactory(createError(1006, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ actualType, expectedType }) => `Type '${actualType}' is not assignable to '${expectedType}'.`),
    TypeErrorDialogLastExpr: createErrorFactory(createError(1007, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ dialogName, expectedType, actualType }) => `The dialog '${dialogName}' expects the last expression to be of type '${expectedType}' but received '${actualType}'`),
    TypeErrorRequiredTypeArguments: createErrorFactory(createError(1008, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ typeDeclarationName, numArguments }) => `type '${typeDeclarationName}' requires ${numArguments} type argument${numArguments > 1 ? "s" : ""}.`),
    TypeErrorListType: createErrorFactory(createError(1009, "SyntaxError" /* ErrorCategory.SyntaxError */), () => "expected list type"),
    TypeErrorListItem: createErrorFactory(createError(1010, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ actualType, expectedType }) => `list item of type ${actualType} is not assignable to ${expectedType}.`),
    TypeErrorIncomparableExpr: createErrorFactory(createError(1011, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ leftExpr, rightExpr }) => `Incomparable expression: left expression evaluates to type '${leftExpr}' while right expression evaluates to type '${rightExpr}'.`),
    TypeErrorWhenBoolean: createErrorFactory(createError(1012, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ whenType, whenCondition }) => `Type '${whenType}' is not assignable to '${whenCondition}' for the if condition, please make sure the expression returns boolean type.`),
    /*
     * Miscellaneous
     */
    UnexpectedBooleanExpression: createErrorFactory(createError(1013, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ expressionText }) => `invalid boolean expression: ${expressionText}`),
    UnknownProperty: createErrorFactory(createError(1014, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ propertyName, typeName }) => `property '${propertyName}' does not exist on type: '${typeName}'`),
    UnknownPropertyIndex: createErrorFactory(createError(1015, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ index }) => `unknown property at position ${index}`),
    NameNotFound: createErrorFactory(createError(1016, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ name }) => `name not found: '${name}'`),
    DeclarationExpected: createErrorFactory(createError(1017, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ text }) => text ? `${declarationExpected} Expression: '${text}'.` : declarationExpected),
    /*
     * ========== SEMANTIC ERRORS ==========
     */
    /*
     * Arguments
     */
    MissingArguments: createErrorFactory(createError(2000), ({ args }) => `missing required arguments: ${args}`),
    UnknownArgument: createErrorFactory(createError(2001), ({ argumentName, callName }) => `'${argumentName}' is unknown argument in ${callName}.`),
    UnknownArgumentIndex: createErrorFactory(createError(2002), ({ index }) => `unknown argument at position ${index}`),
    DuplicateArgument: createErrorFactory(createError(2003), ({ argumentName }) => `Duplicate argument: '${argumentName}'`),
    /*
     * Missing properties
     */
    MissingProperties: createErrorFactory(createError(2004), ({ properties }) => `missing required properties: ${properties}`),
    MissingPropertiesOnType: createErrorFactory(createError(2005), ({ typeName, requiredProperties }) => `missing properties on type ${typeName}: ${requiredProperties}`),
    MissingPropertiesOnUtteranceType: createErrorFactory(createError(2006), ({ utterance, propertyName, typeName }) => `utterance '${utterance}' is missing required property '${propertyName}' on type '${typeName}'`),
    /*
     * Circular references
     */
    CircularReferenceDialog: createErrorFactory(createError(2007), ({ dialogName }) => `dialog '${dialogName}' circularly references itself.`),
    CircularReferenceName: createErrorFactory(createError(2008), ({ name }) => `name '${name}' circularly references itself.`),
    CircularReferenceType: createErrorFactory(createError(2009), ({ typeName }) => `type '${typeName}' circularly references itself.`),
    /*
     * I/O
     */
    FileNotFound: createErrorFactory(createError(2010), ({ filePath }) => `no document.json found at path '${filePath}'.`),
    FileReadError: createErrorFactory(createError(2011), ({ documentPath }) => `Failed to read file: ${documentPath}`),
    InvalidFileTypeApla: createErrorFactory(createError(2012), ({ filePath, fileType }) => `document at path "${filePath}" must have type "${constants_1.APLFileType.APL_A}" or "${constants_1.APLFileType.APLA}" but is ${fileType}.`),
    InvalidFileTypeApl: createErrorFactory(createError(2013), ({ filePath, fileType }) => `document at path "${filePath}" must have type "${constants_1.APLFileType.APL}" but is ${fileType}.`),
    PathNotAccessible: createErrorFactory(createError(2014), ({ filePath }) => `path '${filePath}' not accessible.`),
    TooLargeIR: createErrorFactory(createError(2015), ({ filePath }) => `The compiled output '${filePath}' is too large which might lead to deploy fail. Please split the ACDL file and re-compile to reduce the generated file size.`),
    /*
     * Call context
     */
    InvalidCallContextModuleNameDeclaration: createErrorFactory(createError(2016), ({ actionName }) => `action '${actionName}' is only valid as a name declaration in a module`),
    InvalidCallContextInModule: createErrorFactory(createError(2017), ({ callType }) => `A call to ${callType} is not allowed at the module scope, it must be within a dialog sample.`),
    InvalidCallContextInCondition: createErrorFactory(createError(2018), ({ callType }) => `A call to ${callType} is not allowed to be nested in a condition expression. You must declare it as a name.`),
    InvalidCallContextComparison: createErrorFactory(createError(2019), ({ callType, contextType }) => `The ${callType} comparison cannot be be passed as ${contextType}.`),
    InvalidCallContextType: createErrorFactory(createError(2020), ({ callType, contextType }) => `The ${callType} computation cannot be be passed as ${contextType}.`),
    InvalidCallContextTypeInline: createErrorFactory(createError(2021), ({ callType, contextType }) => `A call to ${callType} is not allowed to be passed in-line as ${contextType}. You must declare it as a name.`),
    /*
     * Annotations
     */
    InvalidAnnotationTarget: createErrorFactory(createError(2022), ({ annotatedType, annotationTarget, expectedAnnotationTargets }) => `'${annotatedType}' does not support 'AnnotationTarget.${annotationTarget}', only [${expectedAnnotationTargets}] are supported.`),
    InvalidAnnotationMultiple: createErrorFactory(createError(2023), ({ annotatedType }) => `'${annotatedType}' does not allow multiple applications.`),
    InvalidAnnotationCall: createErrorFactory(createError(2024), ({ annotationTarget }) => `an annotation cannot be called within a dialog sample. '${annotationTarget}' is annotated with '${prelude_1.AlexaConversations.annotation}' and therefore cannot be used like a user-defined or built-in action within a sample.`),
    InvalidAnnotationNameDeclarationVariations: createErrorFactory(createError(2025), () => `Locale annotation is not allowed on a NameDeclaration whose value is a 'variations' action.`),
    InvalidAnnotationNameDeclarationNameReference: createErrorFactory(createError(2026), () => `Annotation is not allowed on a NameDeclaration whose value is a NameReference.`),
    InvalidAnnotationReusableDialog: createErrorFactory(createError(2027), () => `Locale annotation is not allowed on a reusable dialog.`),
    InvalidAnnotationReusableDialogSample: createErrorFactory(createError(2028), () => `Locale annotation is not allowed on a sample in reusable dialog.`),
    InvalidAnnotationMetaAnnotation: createErrorFactory(createError(2029), ({ annotationType }) => `'${annotationType}' is not a valid annotation type. It must be annotated with the '${prelude_1.AlexaConversations.annotation}' meta-annotation.`),
    InvalidAnnotationMetaAnnotationReturnType: createErrorFactory(createError(2030), () => `the return type of an action annotated with '@annotation' must have a return type of '${prelude_1.AlexaSchema.Void}'.`),
    InvalidAnnotationValidateArg: createErrorFactory(createError(2031), () => `cannot apply 'validateArg' annotation to an action without any arguments.`),
    InvalidAnnotationValidateArgCondition: createErrorFactory(createError(2032), ({ actionArguments, actionName }) => `the 'condition' must reference at least one of the arguments (${actionArguments}) from action '${actionName}'.`),
    /*
     * Conditions
     */
    ConditionWhenMustCompareApiResponse: createErrorFactory(createError(2033), () => "The if condition must either be based on the last API Invocation's result or be an ACDL action meant to be used in conditions like: length(), in(), isInCatalog(), etc."),
    EmptyConditionBlock: createErrorFactory(createError(2034), () => "A condition block cannot be empty."),
    InvalidFirstExprInConditionBlock: createErrorFactory(createError(2035), () => "First expression in conditional block can be either an API Call, Alexa Response or a Conditional Expression."),
    InvalidFirstResponseInConditionBlock: createErrorFactory(createError(2036), () => "Only Notify Alexa Response is supported as first expression in conditional block."),
    ExprRequiredInConditionBlock: createErrorFactory(createError(2037), () => "At least one Api Invocation, Alexa Response, or another Conditional Expression is expected in the conditional block."),
    /*
     * Dialog Flow
     */
    InvalidDialogActArgument: createErrorFactory(createError(2038), ({ dialogAct }) => `'${dialogAct}' is not a valid Dialog Act. Please use one of 'Request', 'ConfirmArgs', 'ConfirmAction', 'Notify', 'Offer', 'ReqAlt', 'Bye', 'ReqMore'.`),
    MissingAffirmORDenyEventAfterConfirmAction: createErrorFactory(createError(2039), ({ actionName }) => `Confirmed action '${actionName}' must have a corresponding Affirm or Deny event.`),
    MissingApiInvocationAfterConfirmAction: createErrorFactory(createError(2040), ({ actionName }) => `Action '${actionName}' is confirmed here but it is not used afterwards. Please make sure to use this action after action is confirmed.`),
    MissingApiInvocationAfterConfirmArgs: createErrorFactory(createError(2041), ({ actionName }) => `The arguments of Action '${actionName}' are confirmed here but this action is not used afterwards. Please make sure to use this action after arguments are confirmed.`),
    MissingAffirmORDenyEventAfterConfirmArgs: createErrorFactory(createError(2042), ({ actionName }) => `User must Affirm or Deny this request to Confirm Arguments for action '${actionName}'.`),
    MissingAffirmORDenyEventAfterConfirmArgsBeforeCall: createErrorFactory(createError(2043), ({ calledActionName, confirmedActionName }) => `This call to '${calledActionName}' occurs before the user has Affirmed or Denied the request to Confirm Arguments for action '${confirmedActionName}'.`),
    MissingAffirmORDenyEventAfterConfirmArgsBeforeExpect: createErrorFactory(createError(2044), ({ actionName, requestAct }) => `User must Affirm or Deny the previous Confirm Arguments request for action '${actionName}' before expecting an '${requestAct}' event.`),
    InvalidNotifyActionNameUnusedAction: createErrorFactory(createError(2045), ({ actionName }) => `Action '${actionName}' is not used before. Please use this action before Notify.`),
    InvalidNotifyActionNameLastAction: createErrorFactory(createError(2046), ({ currentActionName, previousActionName }) => `Action '${currentActionName}' is not consistent with the previous Api Invocation '${previousActionName}'. Only the last Api Invocation could be Notified here.`),
    InvalidNotifyActionNameAlreadyNotified: createErrorFactory(createError(2047), ({ actionName }) => `Action '${actionName}' is already notified before. An Api Call can only be notified once.`),
    InvalidNextAct: createErrorFactory(createError(2048), ({ responseAct }) => `The next act ${responseAct} used in the response event expression is invalid. Please use one of 'Offer', 'ReqMore', 'ReqAlt', or 'Bye'.`),
    InvalidNextActNotify: createErrorFactory(createError(2049), ({ responseAct }) => `The act cannot be of type ${responseAct}, it must be of type Notify when nextAct is not null.`),
    InvalidReqAltFirstAct: createErrorFactory(createError(2050), () => "The ReqAlt act can not be the first dialog act."),
    InvalidReqAltNextAct: createErrorFactory(createError(2051), () => `The ReqAlt could only be used as nextAct when 'success = false' in Notify Act.`),
    MissingRequestPromptForRequiredApiArgument: createErrorFactory(createError(2052, "Warning" /* ErrorCategory.Warning */), ({ argumentName, actionName }) => `The Sample is missing a Request prompt for the required argument '${argumentName}' in API invocation '${actionName}'.`),
    MissingRequestPromptForMultipleArguments: createErrorFactory(createError(2053), ({ argumentName }) => `The argument '${argumentName}' is requested with other arguments in the list, please provide Request prompt for this argument individually in the same Sample.`),
    MissingRequestPromptForConfirmArgs: createErrorFactory(createError(2054), ({ argumentName }) => `The Sample has a ConfirmArgs prompt to confirm the argument '${argumentName}', but the corresponding Request prompt is not provided in the same Sample.`),
    MissingExpectInvokeEvent: createErrorFactory(createError(2055), ({ dialogName }) => `Sample must start with an expect call of Invoke event in dialog ${dialogName}.`),
    /*
     * Invalid welcome
     */
    InvalidWelcomeAction: createErrorFactory(createError(2056), () => "the welcome action must be a user-defined API"),
    InvalidWelcomeActionReturnValue: createErrorFactory(createError(2057), () => "the welcome action cannot return Nothing or Void."),
    TooManyWelcomeCalls: createErrorFactory(createError(2058), ({ welcomeCallCount }) => `global welcome action can only be called once in a skill, but was called ${welcomeCallCount} times.`),
    /*
     * Load context
     */
    InvalidLoadContextMultipleCall: createErrorFactory(createError(2059), ({ actionName }) => `the loadContext action, '${actionName}', can only be called once per dialog sample.`),
    InvalidLoadContextNotFirstCall: createErrorFactory(createError(2060), ({ actionName }) => `the loadContext action, '${actionName}', must be the first API call in a dialog sample.`),
    InvalidLoadContextActionArguments: createErrorFactory(createError(2061), ({ actionName }) => `the loadContext action, '${actionName}', cannot have any arguments.`),
    InvalidLoadContextActionGenericArguments: createErrorFactory(createError(2062), ({ actionName }) => `the loadContext action, '${actionName}', cannot have any generic arguments.`),
    InvalidLoadContextActionReturnType: createErrorFactory(createError(2063), ({ actionName }) => `the loadContext action, '${actionName}', must have a return type of '${prelude_1.AlexaConversations.TaskContextProjection}'.`),
    InvalidLoadContextActionNoActionReference: createErrorFactory(createError(2064), () => "the loadContext action must reference a user-defined action."),
    /*
     * Save context
     */
    InvalidSaveContextActionGenericArguments: createErrorFactory(createError(2065), ({ actionName }) => `the saveContext action, '${actionName}', cannot have any generic arguments.`),
    InvalidSaveContextActionReturnType: createErrorFactory(createError(2066), ({ actionName }) => `the saveContext action, '${actionName}', must have a return type of '${prelude_1.AlexaSchema.Void}' or '${prelude_1.AlexaSchema.Nothing}'.`),
    InvalidSaveContextActionArgumentType: createErrorFactory(createError(2067), ({ actionName }) => `the saveContext action, '${actionName}', must have exactly one argument of type '${prelude_1.AlexaConversations.TaskContextProjection}'.`),
    InvalidSaveContextActionNoActionReference: createErrorFactory(createError(2068), () => "the saveContext action must reference a user-defined action."),
    /*
     * Track actions
     */
    InvalidTrackActionsEmptyList: createErrorFactory(createError(2069), () => "the 'trackActions' list cannot be empty, please specify at least one action to track in your task context projection."),
    InvalidTrackActionsLoadContext: createErrorFactory(createError(2070), ({ actionName }) => `the 'trackActions' list cannot contain the loadContext action, '${actionName}'.`),
    InvalidTrackActionsSaveContext: createErrorFactory(createError(2071), ({ actionName }) => `the 'trackActions' list cannot contain the saveContext action, '${actionName}'.`),
    InvalidTrackActionsBuiltIn: createErrorFactory(createError(2072), ({ actionName }) => `the 'trackActions' list cannot contain built-in action, '${actionName}', please specify a user-defined action.`),
    /*
     * Invalid Event
     */
    InvalidEvent: createErrorFactory(createError(2073), ({ requestAct }) => `'${requestAct}' event must follow Alexa response.`),
    InvalidEventInvoke: createErrorFactory(createError(2074), ({ requestAct }) => `'${requestAct}' event must either be the first event in a dialog or follow response with 'Notify', 'Offer', 'ReqMore', or 'ReqAlt' Acts.`),
    InvalidEventAffirmOrDeny: createErrorFactory(createError(2075), ({ requestAct }) => `'${requestAct}' event must follow response with 'ConfirmArgs', 'ConfirmAction', 'Offer' Acts or 'confirmAction'.`),
    InvalidEventInform: createErrorFactory(createError(2076), ({ requestAct }) => `'${requestAct}' event must follow response with 'Request', 'ReqAlt' or 'Offer' Acts.`),
    InvalidEventFollowingConfirmAction: createErrorFactory(createError(2077), ({ requestAct }) => `'${requestAct}' cannot follow 'ConfirmAction', it must be 'Affirm' or 'Deny'.`),
    InvalidEventResponse: createErrorFactory(createError(2078), ({ responseAct, requestAct, suggestions }) => `'${responseAct}' cannot follow '${requestAct}', it must be ${suggestions}.`),
    InvalidFirstEvent: createErrorFactory(createError(2079), ({ dialogAct }) => `'${dialogAct}' can not be the first event in a Dialog, only 'Invoke' can.`),
    /*
     * Locale
     */
    InvalidLocaleInSampleDialog: createErrorFactory(createError(2080), ({ dialogName, locale }) => `Dialog '${dialogName}' does not support locale '${locale}' which is required by the current sample.`),
    InvalidLocaleInSampleAction: createErrorFactory(createError(2081), ({ actionName, locale }) => `Action '${actionName}' does not support locale '${locale}' which is required by the current sample.`),
    InvalidLocaleInSampleType: createErrorFactory(createError(2082), ({ typeName, locale }) => `Type '${typeName}' does not support locale '${locale}' which is required by the current sample.`),
    InvalidLocaleInSampleNameOrProperty: createErrorFactory(createError(2083), ({ name, locale }) => `'${name}' does not support locale '${locale}' which is required by the current sample.`),
    MissingLocale: createErrorFactory(createError(2084), () => "At least one locale needs to be specified."),
    DuplicateLocale: createErrorFactory(createError(2085), ({ locale, variationItem }) => `Locale '${locale}' is already used in '${variationItem}'.`),
    MissingSampleForLocale: createErrorFactory(createError(2086), ({ dialogName, locale }) => `The dialog '${dialogName}' is missing a sample for locale '${locale}'.`),
    MissingSkillResponseForLocale: createErrorFactory(createError(2087), ({ skillResponseName, locale }) => `Skill response '${skillResponseName}' is not available for locale '${locale}'.`),
    MissingInteractionModelForLocale: createErrorFactory(createError(2088), ({ locale }) => `Interaction Model for locale '${locale}' does not exist.`),
    MissingSlotTypeForLocale: createErrorFactory(createError(2089), ({ slotTypeName, locale }) => `SlotType '${slotTypeName}' does not exist in Interaction Model for locale '${locale}'.`),
    MissingSlotTypeForLocaleTypeDependency: createErrorFactory(createError(2090), ({ typeName, slotTypeName, locale }) => `Type '${typeName}' depends on the slotType '${slotTypeName}', which does not exist in Interaction Model for locale '${locale}'.`),
    /*
     * Payload
     */
    InvalidPayloadType: createErrorFactory(createError(2091), () => "The payload in Alexa Response must be ObjectLiteral or null."),
    InvalidPayloadPropertyValue: createErrorFactory(createError(2092), () => "The value assigned to payload property can only be a name directly referring to an api result or a property received from an event."),
    MismatchedPayloadPropertyValueActionArgument: createErrorFactory(createError(2093), ({ propertyName, actionName }) => `The property value of '${propertyName}' in payload does not match the argument value in the subsequent api call to '${actionName}'.`),
    MismatchedPayloadPropertyValuePreviouslyConfirmed: createErrorFactory(createError(2094), ({ argumentName, actionName }) => `The argument '${argumentName}' does not match the payload previously confirmed for call to '${actionName}'.`),
    MismatchedConfirmArgsPayloadProperty: createErrorFactory(createError(2095), ({ propertyName }) => `The property '${propertyName}' in the payload does not match any entity in the 'arguments' List in current Alexa Response.`),
    MissingConfirmedArgsInPayload: createErrorFactory(createError(2096), ({ argumentName }) => `The Argument '${argumentName}' used in ConfirmArgs Act is missing in the payload.`),
    /*
     * Nothing value
     */
    IllegalNothingValueBoolean: createErrorFactory(createError(2097), () => "illegal 'nothing' value, please specify a valid Boolean expression for the 'condition'."),
    IllegalNothingValueResponsePrompt: createErrorFactory(createError(2098), () => "illegal 'nothing' value, please specify a valid Response prompt."),
    IllegalNothingValueActionArgument: createErrorFactory(createError(2099), ({ actionName }) => `illegal 'nothing' value, please specify an Argument of action '${actionName}'.`),
    /*
     * API Argument
     */
    InvalidApiArgument: createErrorFactory(createError(2100), () => "Invalid API invocation argument. The argument of an API invocation could only refer to an API result or entity produced by an event."),
    InvalidApiArgumentDefaultValue: createErrorFactory(createError(2102), () => "The default value for Argument can only be 'nothing'."),
    InvalidApiArgumentRedeclare: createErrorFactory(createError(2103), ({ argumentName }) => `Cannot re-declare argument '${argumentName}'.`),
    /*
     * Mismatched action arguments
     */
    MismatchedActionArgumentsValidateArguments: createErrorFactory(createError(2104), ({ argumentName, actualActionName, expectedActionName }) => `argument '${argumentName}' is an argument of the action '${actualActionName}' action but this 'validateArg' annotation is validating '${expectedActionName}'.`),
    MismatchedActionArgumentsListValue: createErrorFactory(createError(2105), ({ argumentValue, actionName }) => `The value ${argumentValue} in the arguments list should always belong to the prior actionName: ${actionName}.`),
    MismatchedActionCarryOverArguments: createErrorFactory(createError(2106), ({ carryOverValue, actionName }) => `The value ${carryOverValue} in the carryOverArguments list should always belong to the prior actionName: ${actionName}.`),
    MismatchedActionArgumentsList: createErrorFactory(createError(2107), ({ actionNames }) => `The items in the 'arguments' list should be from the same Action, but they are from the following different Actions: ${actionNames}.`),
    /*
     * Miscellaneous
     */
    ExpectedLiteralValue: createErrorFactory(createError(2108), () => "the list of arguments in a 'validateArg' annotation must be a literal list value."),
    ExpectedNonEmptyList: createErrorFactory(createError(2109), ({ actionName }) => `must provide at least one argument from action '${actionName}'.`),
    InvalidEnsureArgOrder: createErrorFactory(createError(2110), ({ firstArgument, argumentsFlow }) => `There exist order conflict for argument ${firstArgument},  ${argumentsFlow}.`),
    InvalidEnsureArgOptional: createErrorFactory(createError(2111), ({ argumentName, actionName }) => `The argument '${argumentName}' of action '${actionName}' is optional and can't be used in EnsureArgOrder.`),
    InvalidAplaDocumentName: createErrorFactory(createError(2112), ({ documentName }) => `'${documentName}' is not valid document name, please use '${constants_1.Constants.APLADocumentFileName}'.`),
    InvalidAplDocumentName: createErrorFactory(createError(2113), ({ documentName }) => `'${documentName}' is not valid document name, please use '${constants_1.Constants.APLADocumentFileName}'.`),
    InvalidVariationsArgumentSkillLevelResponses: createErrorFactory(createError(2114), () => "Argument of type 'SkillLevelResponses' can't be used in variations action call."),
    InvalidVariationsArgumentResponsePrompts: createErrorFactory(createError(2115), () => "prompts cannot be directly used as an argument of variations action call. Please use apla or apl action to import prompt."),
    InvalidPolicy: createErrorFactory(createError(2116), ({ actionName }) => `action '${actionName}' also use the ResetAllArguments policy. An action can only use either 'ResetArguments' policy or 'ResetAllArguments' policy.`),
    InvalidPolicyWithPolicyName: createErrorFactory(createError(2117), ({ actionName, policyName }) => `action '${actionName}' also use the ResetAllArguments policy '${policyName}'. An action can only use either 'ResetArguments' policy or 'ResetAllArguments' policy.`),
    ResetArgument: createErrorFactory(createError(2118), ({ argumentName }) => `The argument '${argumentName}' has already been reset and cannot be used again.`),
    InvalidBooleanExpressionTypeLiteral: createErrorFactory(createError(2119), ({ typeName }) => `invalid type literal, ''${typeName}'', in 'validateArg' condition expression. Valid expressions are: primitive 'String', 'Number', 'Boolean' or 'List' literals or boolean comparison actions ('&&', '||', '!', '==', '!=', '<', '<=', '>', '>=', 'exists', 'length', 'size', 'is', 'in' and 'getListItem').`),
    InvalidBooleanExpressionAction: createErrorFactory(createError(2120), ({ actionName }) => `invalid action, '${actionName}', in 'validateArg' condition expression. Valid expressions are: primitive 'String', 'Number', 'Boolean' or 'List' literals or boolean comparison actions ('&&', '||', '!', '==', '!=', '<', '<=', '>', '>=', 'exists', 'length', 'size', 'is', 'in' and 'getListItem').`),
    InvalidRequestAct: createErrorFactory(createError(2121), ({ actName }) => `The request act ${actName} used in the expect event expression is invalid. Please use one of 'Invoke', 'Inform', 'Affirm', or 'Deny'.`),
    InformUtteranceSampleMissingSlot: createErrorFactory(createError(2122), () => "Each string in the list of samples used for an Inform utterance event must include at least one slot enclosed in curly braces."),
    MismatchedArgsInReqAlt: createErrorFactory(createError(2123), ({ reqAltActionName, notifyActionName }) => `'${reqAltActionName}' must match '${notifyActionName}' used in the 'Notify' act. When the nextAct is a 'ReqAlt', the arguments must be from the same action specified in the 'Notify' act.`),
    MissingAplaInResponse: createErrorFactory(createError(2124), ({ type }) => `The type '${type}' is not an APL-A.'`),
    InvalidLastExpressionInSample: createErrorFactory(createError(2125), () => "The last expression of a sample block must be a response or delegation call."),
    InvalidLastExpressionInSampleFromDialogCall: createErrorFactory(createError(2126), () => "The last expression of a sample must be a response call, delegation call, or a dialog return value that follows a response call."),
    MissingRequiredPrompts: createErrorFactory(createError(2127), ({ promptName }) => `Required prompt '${promptName}' is missing. Please make sure there is an APL-A prompt file at response/prompts/${promptName}.`),
    EmptyEnumDeclaration: createErrorFactory(createError(2128), ({ enumName }) => `enum '${enumName}' must have at least one item.`),
    DuplicateEnumItem: createErrorFactory(createError(2129), ({ enumItemName }) => `cannot re-declare enum item: '${enumItemName}'.`),
    DuplicateNameDeclaration: createErrorFactory(createError(2130), ({ name }) => `cannot re-declare name: '${name}'`),
    DuplicateNameDeclarationInModule: createErrorFactory(createError(2131), ({ name, filesLength, fileNames }) => `cannot re-declare name: '${name}'.${filesLength > 0 ? ` The duplicate declaration(s) can be found in file(s): ${fileNames}.` : ""}`),
    RequiredArgExistAfterOptionalArg: createErrorFactory(createError(2132), ({ argumentName }) => `Required argument '${argumentName}' cannot be declared after optional argument.`),
    EmptySample: createErrorFactory(createError(2133), ({ dialogName }) => `The dialog '${dialogName}' must have at least one expression.`),
    DuplicateProperty: createErrorFactory(createError(2134), ({ propertyName }) => `duplicate property '${propertyName}'`),
    DuplicatePropertyRedeclared: createErrorFactory(createError(2135), ({ propertyName }) => `Cannot re-declare property '${propertyName}'.`),
    IdentifierExpected: createErrorFactory(createError(2136), () => "Identifier expected"),
    VarArgsMustBeLast: createErrorFactory(createError(2137), () => "variable arguments must be the last declaration in an argument declaration list"),
    UndefinedCatalogUndefinedType: createErrorFactory(createError(2138), ({ propertyName }) => `property '${propertyName}' is illegal in utterance samples. Utterance sample types ${constants_1.ValidationErrorMessages.MustBeBackedByCatalog}`),
    UndefinedCatalogCustomType: createErrorFactory(createError(2139), ({ propertyName, propertyType }) => `property '${propertyName}' of type '${propertyType}' is illegal in utterance samples. Utterance sample types ${constants_1.ValidationErrorMessages.MustBeBackedByCatalog}`),
    InvalidNamespace: createErrorFactory(createError(2140), ({ prefix }) => `namespace cannot begin with the reserved word '${prefix}'`),
    InvalidNameDeclaration: createErrorFactory(createError(2141), ({ name, nothingTypeName, voidTypeName }) => `Invalid to initialize name ${name} of type ${nothingTypeName} or ${voidTypeName}`),
    EmptyUtteranceSet: createErrorFactory(createError(2142), ({ actionName }) => `The list of samples for the ${actionName}() action cannot be empty. Please make sure there are no empty sample lists.`),
    InvalidUtteranceItem: createErrorFactory(createError(2143), () => "Only literal string is allowed in utterance samples."),
    InvalidUtteranceArg: createErrorFactory(createError(2144), () => "utterance samples must be an inline or a name reference to a literal list of strings"),
    EmptyDialog: createErrorFactory(createError(2145), ({ dialogName }) => `The dialog '${dialogName}' must have at least one sample.`),
    SkillNotFound: createErrorFactory(createError(2146), ({ skillName }) => `skill '${skillName}' not found.`),
    AmbiguousNameReference: createErrorFactory(createError(2147), ({ name, possibleName }) => `Can not resolve name '${name}', it could be ${possibleName}.`),
    InvalidSkillExpression: createErrorFactory(createError(2148), ({ skillName }) => `skill '${skillName}' must be a call expression to '${prelude_1.AlexaConversations.skill}'.`),
    CouldNotInferAnonymousType: createErrorFactory(createError(2149), () => "could not infer anonymous type"),
    CouldNotInferGenericArguments: createErrorFactory(createError(2150), ({ argumentName }) => `could not infer generic arguments for action: ${argumentName}`),
    PositionalArgumentAfterName: createErrorFactory(createError(2151), () => `Positional arguments are not allowed after named arguments.`),
    InvalidSkillCallContextNameDeclaration: createErrorFactory(createError(2152), () => `the '${prelude_1.AlexaConversations.skill}' action must be a name declaration.`),
    InvalidSkillCallContextModuleScope: createErrorFactory(createError(2153), () => `the '${prelude_1.AlexaConversations.skill}' action can only be declared at the module scope.`),
    NoDialogsInSkill: createErrorFactory(createError(2154), () => "The skill must have at least one dialog."),
    NoDeployableDialog: createErrorFactory(createError(2155), () => "The skill does not contain any deployable dialog."),
    NoDeployableDialogForLocale: createErrorFactory(createError(2156), ({ locale }) => `There's no deployable dialog for locale '${locale}'.`),
    TooManySkillDeclarations: createErrorFactory(createError(2157), ({ skillNames }) => `there can only be one skill declaration, but found others: ${skillNames}.`),
    InvalidReferableAnnotation: createErrorFactory(createError(2158), ({ typeName, propertyName }) => `The property '${propertyName}' on type '${typeName}' is not a valid referable type. Referable types ${constants_1.ValidationErrorMessages.MustBeBackedByCatalog}`),
    NameNotFoundInUtteranceValue: createErrorFactory(createError(2159), ({ value }) => `value '${value}' corresponds to a type not found.`),
    ArgumentMustReferToActionArgument: createErrorFactory(createError(2160), ({ argumentName }) => `Argument ${argumentName} must refer to an action argument`),
    ArgumentMustReferToActionArgumentWithUtteranceType: createErrorFactory(createError(2161), ({ argumentName, typeName }) => `Argument '${argumentName}' with type '${typeName}' must refer to an action argument with a type that can be retrieved in an utterance. Types ${constants_1.ValidationErrorMessages.MustBeBackedByCatalog}`),
    ExpectedNonEmptyArgumentList: createErrorFactory(createError(2162), () => `Must provide at least one argument`),
    UtteranceEventTypeMustReferToWrapper: createErrorFactory(createError(2163), ({ typeName, action }) => `The type '${typeName}' used with action '${action}' is invalid. The type should contain at least one property that must be backed by a catalog`),
    ExpectedEmptyRequestActType: createErrorFactory(createError(2164), ({ typeName, actType }) => `Request act '${actType}' does not require a type. Remove use of '${typeName}'.`),
    InvokedActionNotOffered: createErrorFactory(createError(2165), ({ offeredAction, invokedAction }) => `Expected offered action '${offeredAction}' instead of '${invokedAction}'`),
    EmptyUtteranceString: createErrorFactory(createError(2166), () => `An utterance cannot be an empty string. It must contain at least one character.`),
    InvalidBuiltinCatalog: createErrorFactory(createError(2167), ({ argName }) => `the argument "${argName}" provided to action builtinCatalog is not a valid built in type.`),
    InvalidCatalogTypeParameter: createErrorFactory(createError(2168), ({ typeName }) => `the type parameter "${typeName}" of action builtinCatalog must be a primitive type.`),
    CatalogTypeMustBeString: createErrorFactory(createError(2169), () => "Catalog must be of type String."),
    InvalidCatalogSubType: createErrorFactory(createError(2170), ({ typeName, catalogName }) => `the type ${typeName} is not a valid subtype of the catalog ${catalogName}.`),
    InvalidDialogCall: createErrorFactory(createError(2171, "SyntaxError" /* ErrorCategory.SyntaxError */), ({ dialogName }) => `The Dialog ${dialogName} can not be called at the module scope.`),
    ComplexUtteranceType: createErrorFactory(createError(2172), ({ propertyName, typeName }) => `property '${propertyName}' of type '${typeName}' is illegal in utterance samples. Utterance sample types ${constants_1.ValidationErrorMessages.MustBeBackedByCatalog}`),
    ACDLCompilationSkipped: createErrorFactory(createError(2173, "Warning" /* ErrorCategory.Warning */), ({ filePath }) => `acdl compilation skipped for '${filePath}'.`),
    NonMatchingInteractionModelIntents: createErrorFactory(createError(2174, "Warning" /* ErrorCategory.Warning */), ({ intentName }) => `Intent ${intentName} does not have the same structure in each interaction model. Skipping Generation.`),
    InvalidApiReturnType: createErrorFactory(createError(2175), ({ apiName, unbackedMessage }) => `The API "${apiName}" is invalid. The return type ${unbackedMessage}`),
    ApiArgumentWithNoCatalog: createErrorFactory(createError(2176), ({ argName, apiName, unbackedMessage }) => `The value provided to the "${argName}" argument of the "${apiName}" API ${unbackedMessage}`),
    InvalidNamespacesProvidedToGetAllNames: createErrorFactory(createError(2177), ({ namespaces }) => `The namespace(s) ${namespaces} provided to action getAllNames cannot be found.`),
    IntentNotGenerated: createErrorFactory(createError(2178, "Warning" /* ErrorCategory.Warning */), ({ intentName }) => `The intent "${intentName}" was not generated. If you want to generate it, ensure the intent is defined in every interaction model locale.`),
    InvalidExpressionAfterDelegation: createErrorFactory(createError(2179), ({ callName, directiveName }) => `The call "${callName}" is not allowed after the "${directiveName}" action call. Only an expect call can follow "${directiveName}".`),
    InvalidChainedDirective: createErrorFactory(createError(2180), ({ directiveName }) => `The "${directiveName}" action cannot be called consecutively.`),
    InvalidDelegationSlots: createErrorFactory(createError(2181), ({ callName }) => `The slots provided to the "${callName}" call must originate from an event or api call.`),
    InvalidDelegationActionConfirmation: createErrorFactory(createError(2171), () => `The delegation action confirmation is not supported.`),
    InvalidDelegationArgumentType: createErrorFactory(createError(2182), ({ callName }) => `The type of the slots in "${callName}" has to match the type of the intent and cannot be "Thing".`),
    InvalidCatalogCallContext: createErrorFactory(createError(2183), ({ callName }) => `The call to "${callName}" is only allowed at the module scope.`),
};
/**
 * Add the key defined in {@link ValidationErrorFactoryNoName} as the name field in the {@link Error} value
 */
const handler = {
    get(target, prop) {
        const current = Reflect.get(target, prop);
        return (input) => {
            const validationErrorNoName = current(input);
            validationErrorNoName.code.name = prop;
            return { ...validationErrorNoName, code: { ...validationErrorNoName.code, name: prop } };
        };
    },
};
// Proxy to preserve functionality of IDE "go to definition"
// @ts-ignore Typescript does not like proxies...
exports.ValidationErrorFactory = new Proxy(ValidationErrorFactoryNoName, handler);
//# sourceMappingURL=data:application/json;base64,