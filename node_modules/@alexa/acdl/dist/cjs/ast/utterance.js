"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUtteranceSlotNames = exports.Utterance = exports.isUtterance = void 0;
const guard_1 = require("./guard");
const tree_1 = require("./tree");
exports.isUtterance = (0, guard_1.guard)("Utterance");
/**
 * Represents a parsed Utterance sample
 *
 * ```
 * "hi my name is {name}"
 * ```
 */
class Utterance extends tree_1.Tree {
    constructor(
    /**
     * Full text of the utterance sample.
     */
    text, 
    /**
     * Name references in the utterances sample, e.g. `{name}`.
     */
    names, loc) {
        super("Utterance", loc);
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: text
        });
        Object.defineProperty(this, "names", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: names
        });
        this.setAsParentOn(names);
    }
    clone() {
        var _a;
        return new Utterance(this.text, (_a = this.names) === null || _a === void 0 ? void 0 : _a.map((n) => n.clone()), this.loc);
    }
}
exports.Utterance = Utterance;
/**
 * Parse Utterance Names from a piece of text.
 *
 * E.g `i want a {size} pizza with {cheese}` -> ["size", "cheese"]
 *
 * @param text utterance text
 * @returns array of slo
 */
function parseUtteranceSlotNames(text) {
    const groups = [];
    const regex = /{([A-Za-z_0-9]+)}/gi;
    let match;
    while ((match = regex.exec(text)) !== null) {
        groups.push(match[1]);
    }
    if (groups.length > 0) {
        return groups;
    }
    return undefined;
}
exports.parseUtteranceSlotNames = parseUtteranceSlotNames;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR0ZXJhbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FzdC91dHRlcmFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUNBQThCO0FBRzlCLGlDQUE0QjtBQUVmLFFBQUEsV0FBVyxHQUFHLElBQUEsYUFBSyxFQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRTlDOzs7Ozs7R0FNRztBQUNILE1BQWEsU0FBVSxTQUFRLFdBQXVCO0lBQ3BEO0lBQ0U7O09BRUc7SUFDTSxJQUFZO0lBQ3JCOztPQUVHO0lBQ00sS0FBYyxFQUN2QixHQUFvQjtRQUVwQixLQUFLLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7OzttQkFQZjs7Ozs7O21CQUlBOztRQUlULElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLEtBQUs7O1FBQ1YsT0FBTyxJQUFJLFNBQVMsQ0FDbEIsSUFBSSxDQUFDLElBQUksRUFDVCxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQ2pDLElBQUksQ0FBQyxHQUFHLENBQ1QsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXZCRCw4QkF1QkM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQUMsSUFBWTtJQUNsRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcscUJBQXFCLENBQUM7SUFDcEMsSUFBSSxLQUE2QixDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZCO0lBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNyQixPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQVhELDBEQVdDIn0=