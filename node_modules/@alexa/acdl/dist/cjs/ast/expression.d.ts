import { ActionDeclaration } from "./action";
import { ArgumentDeclaration, Argument } from "./argument";
import { Call } from "./call";
import { Condition } from "./condition";
import { DialogDeclaration } from "./dialog";
import { NameReference } from "./name-reference";
import { NameDeclaration } from "./name-declaration";
import { PropertyReference } from "./property-reference";
import { Sample } from "./sample";
import { TypeDeclaration } from "./type";
import { EnumDeclaration } from "./enum";
import { InteractionDeclaration } from "./interaction";
import { Correction } from "./correction";
/**
 * All Expressions in the language.
 */
export type Expression = ActionDeclaration | Argument | ArgumentDeclaration | Call | Condition | Correction | InteractionDeclaration | DialogDeclaration | EnumDeclaration | NameDeclaration | NameReference | PropertyReference | Sample | TypeDeclaration;
export declare const isExpresion: (node: any) => node is Argument | Correction | ActionDeclaration | ArgumentDeclaration | Call<import("./call").CallContext> | Condition | InteractionDeclaration | DialogDeclaration | EnumDeclaration | NameDeclaration<import("./name-declaration").Named> | NameReference | PropertyReference | Sample | TypeDeclaration;
export declare function isExpression(a: any): a is Expression;
//# sourceMappingURL=expression.d.ts.map