"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Argument = exports.isArgument = exports.ArgumentDeclaration = exports.isArgumentDeclaration = void 0;
const guard_1 = require("./guard");
const tree_1 = require("./tree");
exports.isArgumentDeclaration = (0, guard_1.guard)("ArgumentDeclaration");
/**
 * The arguments for action or dialog.
 */
class ArgumentDeclaration extends tree_1.Tree {
    constructor(
    /**
     * Name of argument.
     */
    name, 
    /**
     * Type of the argument.
     */
    type, 
    /**
     * Default value for the argument, if value is not passed from caller.
     */
    defaultExpression, 
    /**
     * Annotations attached to this Argument Declaration.
     */
    annotations, comment, loc) {
        super("ArgumentDeclaration", loc);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "defaultExpression", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: defaultExpression
        });
        Object.defineProperty(this, "annotations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: annotations
        });
        Object.defineProperty(this, "comment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: comment
        });
        this.setAsParentOn(name);
        this.setAsParentOn(type);
        this.setAsParentOn(defaultExpression);
        this.setAsParentOn(annotations);
    }
    clone() {
        var _a, _b, _c, _d;
        return new ArgumentDeclaration((_a = this.name) === null || _a === void 0 ? void 0 : _a.clone(), (_b = this.type) === null || _b === void 0 ? void 0 : _b.clone(), (_c = this.defaultExpression) === null || _c === void 0 ? void 0 : _c.clone(), (_d = this.annotations) === null || _d === void 0 ? void 0 : _d.map((a) => a.clone()), this.comment, this.loc);
    }
}
exports.ArgumentDeclaration = ArgumentDeclaration;
exports.isArgument = (0, guard_1.guard)("Argument");
/**
 * Represents named argument.
 * Left side of the expression is name of the argument and right side of the expression is expression assigned to
 * argument.
 * Example 1:
 * <code>
 *    findParkingAPI(parkingRequest = findParkingRequest)
 * </code>
 * parkingRequest is name and findParkingRequest is NameExpr assigned to parkingRequest argument.
 * Example 2:
 * <code>
 *     action Restaurant findRestaurant(City cityName)
 *
 *     findRestaurant(city)
 * </code>
 * cityName is the name and city is the NameExpr assigned to the cityName argument.
 * Type of the NamedArgumentExpr should be the same as the type of expression assigned to argument.
 */
class Argument extends tree_1.Tree {
    constructor(
    /**
     * Name of the Argument.
     */
    name, 
    /**
     * Index of the argument if provided positionally.
     */
    index, 
    /**
     * Expression for the argument value.ÃŸ
     */
    value, loc) {
        super("Argument", loc);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "index", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: index
        });
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
        });
        this.setAsParentOn(name);
        this.setAsParentOn(value);
    }
    clone() {
        var _a, _b;
        return new Argument((_a = this.name) === null || _a === void 0 ? void 0 : _a.clone(), this.index, (_b = this.value) === null || _b === void 0 ? void 0 : _b.clone(), this.loc);
    }
}
exports.Argument = Argument;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJndW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXN0L2FyZ3VtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLG1DQUE4QjtBQUk5QixpQ0FBNEI7QUFRZixRQUFBLHFCQUFxQixHQUFHLElBQUEsYUFBSyxFQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFbEU7O0dBRUc7QUFDSCxNQUFhLG1CQUFvQixTQUFRLFdBQWtFO0lBQ3pHO0lBQ0U7O09BRUc7SUFDTSxJQUFXO0lBQ3BCOztPQUVHO0lBQ00sSUFBb0I7SUFDN0I7O09BRUc7SUFDTSxpQkFBOEI7SUFDdkM7O09BRUc7SUFDTSxXQUEwQixFQUMxQixPQUFnQixFQUN6QixHQUFvQjtRQUVwQixLQUFLLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7Ozs7O21CQWhCekI7Ozs7OzttQkFJQTs7Ozs7O21CQUlBOzs7Ozs7bUJBSUE7Ozs7OzttQkFDQTs7UUFJVCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLEtBQUs7O1FBQ1YsT0FBTyxJQUFJLG1CQUFtQixDQUM1QixNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLEtBQUssRUFBRSxFQUNsQixNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLEtBQUssRUFBRSxFQUNsQixNQUFBLElBQUksQ0FBQyxpQkFBaUIsMENBQUUsS0FBSyxFQUFFLEVBQy9CLE1BQUEsSUFBSSxDQUFDLFdBQVcsMENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFDdkMsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsR0FBRyxDQUNELENBQUM7SUFDWixDQUFDO0NBQ0Y7QUF0Q0Qsa0RBc0NDO0FBRVksUUFBQSxVQUFVLEdBQUcsSUFBQSxhQUFLLEVBQUMsVUFBVSxDQUFDLENBQUM7QUFFNUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsV0FBc0I7SUFDbEQ7SUFDRTs7T0FFRztJQUNNLElBQVc7SUFDcEI7O09BRUc7SUFDTSxLQUFjO0lBQ3ZCOztPQUVHO0lBQ00sS0FBcUIsRUFDOUIsR0FBb0I7UUFFcEIsS0FBSyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQzs7Ozs7bUJBWGQ7Ozs7OzttQkFJQTs7Ozs7O21CQUlBOztRQUlULElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sS0FBSzs7UUFDVixPQUFPLElBQUksUUFBUSxDQUFDLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQVMsQ0FBQztJQUM3RixDQUFDO0NBQ0Y7QUF4QkQsNEJBd0JDIn0=