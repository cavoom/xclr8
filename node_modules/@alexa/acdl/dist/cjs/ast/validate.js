"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logValidationErrors = exports.validateModuleSchema = exports.tryValidateModuleSchema = void 0;
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const Module_json_1 = __importDefault(require("@alexa/ask-expressions-spec/schemas/Module.json"));
// The webpack method for require.resolve returns a numerical module identifier.
// The `eval` here is present to preserve the node.js behavior of returning a filepath when bundling with webpack.
// eslint-disable-next-line no-eval
const schemaDir = path_1.default.resolve(path_1.default.dirname(eval('require.resolve("@alexa/ask-expressions-spec/package.json")')), "schemas");
const schemas = fs_extra_1.default.readdirSync(schemaDir).reduce((acc, schemaPathRelative) => {
    if (schemaPathRelative.endsWith(".json") && schemaPathRelative !== "Module.json") {
        const schemaPath = path_1.default.join(schemaDir, schemaPathRelative);
        return [...acc, JSON.parse(fs_extra_1.default.readFileSync(schemaPath, "utf-8"))];
    }
    return acc;
}, []);
const ajv = (0, ajv_formats_1.default)(new ajv_1.default({ schemas, strict: false }));
const validator = ajv.compile(Module_json_1.default);
/**
 * Validates a Module according to a JSON schema.
 *
 * @param module
 */
function tryValidateModuleSchema(module) {
    validator(module);
    return validator.errors;
}
exports.tryValidateModuleSchema = tryValidateModuleSchema;
function validateModuleSchema(module, uri) {
    const errors = tryValidateModuleSchema(module);
    if (errors) {
        logValidationErrors(errors);
        throw new Error(`invalid ASK Module${uri ? `: '${uri}'` : ""}`);
    }
}
exports.validateModuleSchema = validateModuleSchema;
function logValidationErrors(errors) {
    for (const e of errors) {
        console.log(e);
    }
}
exports.logValidationErrors = logValidationErrors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXN0L3ZhbGlkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhDQUFxQztBQUNyQyw4REFBcUM7QUFDckMsd0RBQTBCO0FBQzFCLGdEQUF3QjtBQUN4QixrR0FBMkU7QUFFM0UsZ0ZBQWdGO0FBQ2hGLGtIQUFrSDtBQUNsSCxtQ0FBbUM7QUFDbkMsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyw2REFBNkQsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDN0gsTUFBTSxPQUFPLEdBQUcsa0JBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBUSxFQUFFLGtCQUFrQixFQUFFLEVBQUU7SUFDaEYsSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksa0JBQWtCLEtBQUssYUFBYSxFQUFFO1FBQ2hGLE1BQU0sVUFBVSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDNUQsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuRTtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRVAsTUFBTSxHQUFHLEdBQUcsSUFBQSxxQkFBVSxFQUFDLElBQUksYUFBRyxDQUFDLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBWSxDQUFDLENBQUM7QUFFNUM7Ozs7R0FJRztBQUNILFNBQWdCLHVCQUF1QixDQUFDLE1BQVc7SUFDakQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xCLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUMxQixDQUFDO0FBSEQsMERBR0M7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxNQUFXLEVBQUUsR0FBWTtJQUM1RCxNQUFNLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxJQUFJLE1BQU0sRUFBRTtRQUNWLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNqRTtBQUNILENBQUM7QUFORCxvREFNQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLE1BQXFCO0lBQ3ZELEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaEI7QUFDSCxDQUFDO0FBSkQsa0RBSUMifQ==