"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseTemplate = exports.ResponseTemplateType = void 0;
const tree_1 = require("./tree");
/**
 * Types of response templates supported by the compiler.
 */
var ResponseTemplateType;
(function (ResponseTemplateType) {
    /**
     * APL display template
     */
    ResponseTemplateType["Display"] = "display";
    /**
     * APL-A prompt template.
     */
    ResponseTemplateType["Prompt"] = "prompt";
})(ResponseTemplateType = exports.ResponseTemplateType || (exports.ResponseTemplateType = {}));
(function (ResponseTemplateType) {
    ResponseTemplateType.All = [
        ResponseTemplateType.Display,
        ResponseTemplateType.Prompt,
    ];
})(ResponseTemplateType = exports.ResponseTemplateType || (exports.ResponseTemplateType = {}));
/**
 * Node type to represent an externally loaded response template.
 *
 * This node will be removed in Beta 2 when we have generated prompts and the
 * ability to require them from disk.
 */
class ResponseTemplate extends tree_1.Tree {
    constructor(
    /**
     * URI of the folder containing the APLA `document.json` file.
     */
    templateUri, 
    /**
     * Name of the prompt.
     *
     * Example:
     * ```
     * // name: `hello`
     * response/prompts/hello/document.json
     * ```
     */
    name, type, loc) {
        super("ResponseTemplate", loc);
        Object.defineProperty(this, "templateUri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: templateUri
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
    }
    get uri() {
        return this.templateUri;
    }
    /**
     * Check if this is an APL Display Response Template.
     */
    isDisplay() {
        return this.type === ResponseTemplateType.Display;
    }
    /**
     * Check if this is an APLA Prompt Response Template.
     */
    isPrompt() {
        return this.type === ResponseTemplateType.Prompt;
    }
    clone() {
        return new ResponseTemplate(this.templateUri, this.name, this.type, this.loc);
    }
}
exports.ResponseTemplate = ResponseTemplate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UtdGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXN0L3Jlc3BvbnNlLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGlDQUE0QjtBQUU1Qjs7R0FFRztBQUNILElBQVksb0JBU1g7QUFURCxXQUFZLG9CQUFvQjtJQUM5Qjs7T0FFRztJQUNILDJDQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gseUNBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQVRXLG9CQUFvQixHQUFwQiw0QkFBb0IsS0FBcEIsNEJBQW9CLFFBUy9CO0FBRUQsV0FBaUIsb0JBQW9CO0lBQ3RCLHdCQUFHLEdBQWdFO1FBQzlFLG9CQUFvQixDQUFDLE9BQU87UUFDNUIsb0JBQW9CLENBQUMsTUFBTTtLQUM1QixDQUFDO0FBQ0osQ0FBQyxFQUxnQixvQkFBb0IsR0FBcEIsNEJBQW9CLEtBQXBCLDRCQUFvQixRQUtwQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBYSxnQkFBd0UsU0FBUSxXQUFtQztJQUM5SDtJQUNFOztPQUVHO0lBQ00sV0FBbUI7SUFDNUI7Ozs7Ozs7O09BUUc7SUFDTSxJQUFZLEVBQ1osSUFBTyxFQUNoQixHQUFvQjtRQUVwQixLQUFLLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7Ozs7O21CQWR0Qjs7Ozs7O21CQVVBOzs7Ozs7bUJBQ0E7O0lBSVgsQ0FBQztJQUVELElBQVcsR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztJQUNwRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxRQUFRO1FBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztJQUNuRCxDQUFDO0lBRU0sS0FBSztRQUNWLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEYsQ0FBQztDQUNGO0FBM0NELDRDQTJDQyJ9