import { ArgumentDeclaration } from "./argument";
import { Module } from "./module";
import { Sample } from "./sample";
import { Tree } from "./tree";
import { TypeParameter, TypeReference } from "./type";
import { SourceLocation } from "./source-location";
import { Name } from "./name";
import { Annotation } from "./annotation";
export declare const isDialogDeclaration: (node: any) => node is DialogDeclaration;
/**
 * Declare a Dialog.
 */
export declare class DialogDeclaration extends Tree<"DialogDeclaration", Module> {
    /**
     * Name of the Dialog Declaration.
     */
    readonly name?: Name | undefined;
    /**
     * List of samples defined in the dialog.
     */
    readonly samples?: Sample[] | undefined;
    /**
     * Return type for dialog.
     */
    readonly returnType?: TypeReference | undefined;
    /**
     * Type parameters.
     */
    readonly genericArguments?: TypeParameter[] | undefined;
    /**
     * Annotations attached to this Dialog Declaration.
     */
    readonly annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined;
    readonly comment?: String | undefined;
    /**
     * Parameters to the dialog.
     */
    readonly arguments?: ArgumentDeclaration[];
    constructor(
    /**
     * Name of the Dialog Declaration.
     */
    name?: Name | undefined, 
    /**
     * Parameters to the dialog.
     */
    args?: ArgumentDeclaration[], 
    /**
     * List of samples defined in the dialog.
     */
    samples?: Sample[] | undefined, 
    /**
     * Return type for dialog.
     */
    returnType?: TypeReference | undefined, 
    /**
     * Type parameters.
     */
    genericArguments?: TypeParameter[] | undefined, 
    /**
     * Annotations attached to this Dialog Declaration.
     */
    annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined, comment?: String | undefined, loc?: SourceLocation);
    clone(): this;
}
//# sourceMappingURL=dialog.d.ts.map