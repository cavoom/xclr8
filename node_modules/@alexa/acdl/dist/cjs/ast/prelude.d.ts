import { AnnotatedNode } from "./annotation";
export declare const AlexaSchemaNamespace = "com.amazon.alexa.schema";
/**
 * Statically known names of root types in Alexa schema (`@alexa/schema`)
 */
export declare enum AlexaSchema {
    Argument = "com.amazon.alexa.schema.Argument",
    Arguments = "com.amazon.alexa.schema.Arguments",
    ArgumentProperties = "com.amazon.alexa.schema.ArgumentProperties",
    ArgumentProperty = "com.amazon.alexa.schema.ArgumentProperty",
    ArgumentValues = "com.amazon.alexa.schema.ArgumentValues",
    Boolean = "com.amazon.alexa.schema.Boolean",
    Event = "com.amazon.alexa.schema.Event",
    Function = "com.amazon.alexa.schema.Function",
    List = "com.amazon.alexa.schema.List",
    Nothing = "com.amazon.alexa.schema.Nothing",
    Number = "com.amazon.alexa.schema.Number",
    Optional = "com.amazon.alexa.schema.Optional",
    Properties = "com.amazon.alexa.schema.Properties",
    Property = "com.amazon.alexa.schema.Property",
    ReturnValue = "com.amazon.alexa.schema.ReturnValue",
    String = "com.amazon.alexa.schema.String",
    Thing = "com.amazon.alexa.schema.Thing",
    Time = "com.amazon.alexa.schema.Time",
    Tuple = "com.amazon.alexa.schema.Tuple",
    Type = "com.amazon.alexa.schema.Type",
    Void = "com.amazon.alexa.schema.Void"
}
/**
 * Namespace given to Slot Types imported from an Interaction Model JSON file.
 */
export declare const SlotTypesNamespace = "slotTypes";
/**
 * Namespace given to APL/A prompts loaded from `response/prompts`.
 */
export declare const PromptsNamespace = "prompts";
/**
 * Namespace given to APL display templates loaded from `response/display`.
 */
export declare const DisplayNamespace = "displays";
/**
 * Namespace of the Alexa Conversations Core Library.
 */
export declare const AlexaConversationsNamespace = "com.amazon.alexa.ask.conversations";
/**
 * Statically known names of alexa conversation actions (`@alexa/ac-core`)
 */
export declare enum AlexaConversations {
    Action = "com.amazon.alexa.ask.conversations.Action",
    ActionContext = "com.amazon.alexa.ask.conversations.ActionContext",
    ActionContextValues = "com.amazon.alexa.ask.conversations.ActionContextValues",
    Affirm = "com.amazon.alexa.ask.conversations.Affirm",
    And = "com.amazon.alexa.ask.conversations.and",
    annotation = "com.amazon.alexa.ask.conversations.annotation",
    AnnotationTarget = "com.amazon.alexa.ask.conversations.AnnotationTarget",
    apl = "com.amazon.alexa.ask.conversations.apl",
    APL = "com.amazon.alexa.ask.conversations.APL",
    apla = "com.amazon.alexa.ask.conversations.apla",
    APLA = "com.amazon.alexa.ask.conversations.APLA",
    Args = "com.amazon.alexa.ask.conversations.Args",
    Argument = "com.amazon.alexa.ask.conversations.Argument",
    Arguments = "com.amazon.alexa.ask.conversations.Arguments",
    builtinCatalog = "com.amazon.alexa.ask.conversations.builtinCatalog",
    Bye = "com.amazon.alexa.ask.conversations.Bye",
    catalog = "com.amazon.alexa.ask.conversations.catalog",
    Catalog = "com.amazon.alexa.ask.conversations.Catalog",
    CatalogItem = "com.amazon.alexa.ask.conversations.CatalogItem",
    confirmAction = "com.amazon.alexa.ask.conversations.confirmAction",
    ConfirmAction = "com.amazon.alexa.ask.conversations.ConfirmAction",
    confirmArgs = "com.amazon.alexa.ask.conversations.confirmArgs",
    ConfirmArgs = "com.amazon.alexa.ask.conversations.ConfirmArgs",
    ConfirmArguments = "com.amazon.alexa.ask.conversations.ConfirmArguments",
    delegateRequest = "com.amazon.alexa.ask.conversations.delegateRequest",
    delegateToIntent = "com.amazon.alexa.ask.conversations.delegateToIntent",
    Deny = "com.amazon.alexa.ask.conversations.Deny",
    Dialog = "com.amazon.alexa.ask.conversations.Dialog",
    ensure = "com.amazon.alexa.ask.conversations.ensure",
    EnsureArgOrder = "com.amazon.alexa.ask.conversations.EnsureArgOrder",
    Enumeration = "com.amazon.alexa.ask.conversations.Enumeration",
    Eq = "com.amazon.alexa.ask.conversations.equal",
    events = "com.amazon.alexa.ask.conversations.events",
    exists = "com.amazon.alexa.ask.conversations.exists",
    expect = "com.amazon.alexa.ask.conversations.expect",
    extendCatalog = "com.amazon.alexa.ask.conversations.extendCatalog",
    generated = "com.amazon.alexa.ask.conversations.generated",
    getAllNames = "com.amazon.alexa.ask.conversations.getAllNames",
    getListItem = "com.amazon.alexa.ask.conversations.getListItem",
    Gt = "com.amazon.alexa.ask.conversations.greater",
    Gte = "com.amazon.alexa.ask.conversations.greaterEqual",
    Inform = "com.amazon.alexa.ask.conversations.Inform",
    intent = "com.amazon.alexa.ask.conversations.intent",
    IntentEvent = "com.amazon.alexa.ask.conversations.IntentEvent",
    IntentRequest = "com.amazon.alexa.ask.conversations.IntentRequest",
    InvocationName = "com.amazon.alexa.ask.conversations.InvocationName",
    Invoke = "com.amazon.alexa.ask.conversations.Invoke",
    in = "com.amazon.alexa.ask.conversations.in",
    is = "com.amazon.alexa.ask.conversations.is",
    isInCatalog = "com.amazon.alexa.ask.conversations.isInCatalog",
    length = "com.amazon.alexa.ask.conversations.length",
    listBasedCatalog = "com.amazon.alexa.ask.conversations.listBasedCatalog",
    ListBasedCatalog = "com.amazon.alexa.ask.conversations.ListBasedCatalog",
    locale = "com.amazon.alexa.ask.conversations.locale",
    Locale = "com.amazon.alexa.ask.conversations.Locale",
    Lt = "com.amazon.alexa.ask.conversations.less",
    Lte = "com.amazon.alexa.ask.conversations.lessEqual",
    MultiModalResponse = "com.amazon.alexa.ask.conversations.MultiModalResponse",
    MultiModalEvent = "com.amazon.alexa.ask.conversations.MultiModalEvent",
    multiModalEvent = "com.amazon.alexa.ask.conversations.multiModalEvent",
    Neq = "com.amazon.alexa.ask.conversations.notEqual",
    Not = "com.amazon.alexa.ask.conversations.not",
    Notify = "com.amazon.alexa.ask.conversations.Notify",
    Offer = "com.amazon.alexa.ask.conversations.Offer",
    Or = "com.amazon.alexa.ask.conversations.or",
    Path = "com.amazon.alexa.ask.conversations.Path",
    received = "com.amazon.alexa.ask.conversations.received",
    referable = "com.amazon.alexa.ask.conversations.referable",
    ReqAlt = "com.amazon.alexa.ask.conversations.ReqAlt",
    ReqMore = "com.amazon.alexa.ask.conversations.ReqMore",
    Request = "com.amazon.alexa.ask.conversations.Request",
    RequestArguments = "com.amazon.alexa.ask.conversations.RequestArguments",
    ResetAllArguments = "com.amazon.alexa.ask.conversations.ResetAllArguments",
    ResetArguments = "com.amazon.alexa.ask.conversations.ResetArguments",
    response = "com.amazon.alexa.ask.conversations.response",
    ResponseAct = "com.amazon.alexa.ask.conversations.ResponseAct",
    RequestAct = "com.amazon.alexa.ask.conversations.RequestAct",
    size = "com.amazon.alexa.ask.conversations.size",
    skill = "com.amazon.alexa.ask.conversations.skill",
    Skill = "com.amazon.alexa.ask.conversations.Skill",
    SkillLevelResponses = "com.amazon.alexa.ask.conversations.SkillLevelResponses",
    surfaceForm = "com.amazon.alexa.ask.conversations.surfaceForm",
    taskContextProjection = "com.amazon.alexa.ask.conversations.taskContextProjection",
    TaskContextProjection = "com.amazon.alexa.ask.conversations.TaskContextProjection",
    TaskContextProjectionInfo = "com.amazon.alexa.ask.conversations.TaskContextProjectionInfo",
    TaskContextProjectionType = "com.amazon.alexa.ask.conversations.TaskContextProjectionType",
    touch = "com.amazon.alexa.ask.conversations.touch",
    Type = "com.amazon.alexa.ask.conversations.Type",
    userSays = "com.amazon.alexa.ask.conversations.userSays",
    Utterance = "com.amazon.alexa.ask.conversations.Utterance",
    UtteranceEvent = "com.amazon.alexa.ask.conversations.UtteranceEvent",
    utterances = "com.amazon.alexa.ask.conversations.utterances",
    variations = "com.amazon.alexa.ask.conversations.variations",
    welcome = "com.amazon.alexa.ask.conversations.welcome",
    when = "com.amazon.alexa.ask.conversations.when",
    validateArg = "com.amazon.alexa.ask.conversations.validateArg"
}
export declare function ActionTypeName(n: number): string;
export declare function DialogTypeName(n: number): string;
export declare function FunctionTypeName(n: number): string;
export declare const OPERATOR_ACTIONS_SET: Set<string>;
export declare enum AnnotationTarget {
    /**
     * Annotation is allowed on an `action` declaration.
     */
    Action = "Action",
    /**
     * Annotation is allowed on a `argument declaration` expression.
     */
    Argument = "Argument",
    /**
     * Annotation is allowed on a `call` expression.
     */
    Call = "Call",
    /**
     * Annotation is allowed on a `condition` expression.
     */
    Condition = "Condition",
    /**
     * Annotation is allowed on a `dialog` declaration.
     */
    Dialog = "Dialog",
    /**
     * Annotation is allowed on a `enum` declaration.
     */
    Enum = "Enum",
    /**
     * Annotation is allowed on a `enum` declaration's item.
     */
    EnumItem = "EnumItem",
    /**
     * Annotation is allowed on a `interaction` declaration.
     */
    Interaction = "Interaction",
    /**
     * Annotation is allowed on a `property` declaration.
     */
    Property = "Property",
    /**
     * Annotation is allowed on a `property reference` expression.
     */
    PropertyReference = "PropertyReference",
    /**
     * Annotation is allowed on a `name` declaration.
     */
    NameDeclaration = "NameDeclaration",
    /**
     * Annotation is allowed on a `name reference` expression.
     */
    NameReference = "NameReference",
    /**
     * Annotation is allowed on a `sample` block.
     */
    Sample = "Sample",
    /**
     * Annotation is allowed on a `type` declaration.
     */
    Type = "Type",
    /**
     * Annotation is allowed on a `type reference` expression.
     */
    TypeReference = "TypeReference"
}
export declare namespace AnnotationTarget {
    function from<Kind extends AnnotatedNode["kind"]>(kind: Kind): AnnotationTarget;
}
export declare function isAnnotationTarget(a: any): a is AnnotationTarget;
export declare enum AlexaConversationPrompts {
    Bye = "AlexaConversationsBye",
    OutOfDomain = "AlexaConversationsOutOfDomain",
    ProvideHelp = "AlexaConversationsProvideHelp",
    RequestMore = "AlexaConversationsRequestMore",
    Welcome = "AlexaConversationsWelcome"
}
export declare const BuiltinsNamespace = "com.amazon.ask.types.builtins.AMAZON";
export declare enum BuiltIns {
    NUMBER = "com.amazon.ask.types.builtins.AMAZON.NUMBER",
    FOUR_DIGIT_NUMBER = "com.amazon.ask.types.builtins.AMAZON.FOUR_DIGIT_NUMBER",
    Ordinal = "com.amazon.ask.types.builtins.AMAZON.Ordinal",
    Actor = "com.amazon.ask.types.builtins.AMAZON.Actor",
    AdministrativeArea = "com.amazon.ask.types.builtins.AMAZON.AdministrativeArea",
    AggregateRating = "com.amazon.ask.types.builtins.AMAZON.AggregateRating",
    Airline = "com.amazon.ask.types.builtins.AMAZON.Airline",
    Airport = "com.amazon.ask.types.builtins.AMAZON.Airport",
    Anaphor = "com.amazon.ask.types.builtins.AMAZON.Anaphor",
    Animal = "com.amazon.ask.types.builtins.AMAZON.Animal",
    Artist = "com.amazon.ask.types.builtins.AMAZON.Artist",
    AT_CITY = "com.amazon.ask.types.builtins.AMAZON.AT_CITY",
    AT_REGION = "com.amazon.ask.types.builtins.AMAZON.AT_REGION",
    Athlete = "com.amazon.ask.types.builtins.AMAZON.Athlete",
    Author = "com.amazon.ask.types.builtins.AMAZON.Author",
    Book = "com.amazon.ask.types.builtins.AMAZON.Book",
    BookSeries = "com.amazon.ask.types.builtins.AMAZON.BookSeries",
    BroadcastChannel = "com.amazon.ask.types.builtins.AMAZON.BroadcastChannel",
    City = "com.amazon.ask.types.builtins.AMAZON.City",
    CivicStructure = "com.amazon.ask.types.builtins.AMAZON.CivicStructure",
    Color = "com.amazon.ask.types.builtins.AMAZON.Color",
    Comic = "com.amazon.ask.types.builtins.AMAZON.Comic",
    Corporation = "com.amazon.ask.types.builtins.AMAZON.Corporation",
    Country = "com.amazon.ask.types.builtins.AMAZON.Country",
    CreativeWorkType = "com.amazon.ask.types.builtins.AMAZON.CreativeWorkType",
    DATE = "com.amazon.ask.types.builtins.AMAZON.DATE",
    DayOfWeek = "com.amazon.ask.types.builtins.AMAZON.DayOfWeek",
    DE_CITY = "com.amazon.ask.types.builtins.AMAZON.DE_CITY",
    DE_FIRST_NAME = "com.amazon.ask.types.builtins.AMAZON.DE_FIRST_NAME",
    DE_REGION = "com.amazon.ask.types.builtins.AMAZON.DE_REGION",
    Decimal = "com.amazon.ask.types.builtins.AMAZON.Decimal",
    Dessert = "com.amazon.ask.types.builtins.AMAZON.Dessert",
    DeviceType = "com.amazon.ask.types.builtins.AMAZON.DeviceType",
    Director = "com.amazon.ask.types.builtins.AMAZON.Director",
    Drink = "com.amazon.ask.types.builtins.AMAZON.Drink",
    DURATION = "com.amazon.ask.types.builtins.AMAZON.DURATION",
    EducationalOrganization = "com.amazon.ask.types.builtins.AMAZON.EducationalOrganization",
    EUROPE_CITY = "com.amazon.ask.types.builtins.AMAZON.EUROPE_CITY",
    EventType = "com.amazon.ask.types.builtins.AMAZON.EventType",
    Festival = "com.amazon.ask.types.builtins.AMAZON.Festival",
    FictionalCharacter = "com.amazon.ask.types.builtins.AMAZON.FictionalCharacter",
    FinancialService = "com.amazon.ask.types.builtins.AMAZON.FinancialService",
    FirstName = "com.amazon.ask.types.builtins.AMAZON.FirstName",
    Food = "com.amazon.ask.types.builtins.AMAZON.Food",
    FoodEstablishment = "com.amazon.ask.types.builtins.AMAZON.FoodEstablishment",
    Game = "com.amazon.ask.types.builtins.AMAZON.Game",
    GB_CITY = "com.amazon.ask.types.builtins.AMAZON.GB_CITY",
    GB_FIRST_NAME = "com.amazon.ask.types.builtins.AMAZON.GB_FIRST_NAME",
    GB_REGION = "com.amazon.ask.types.builtins.AMAZON.GB_REGION",
    Genre = "com.amazon.ask.types.builtins.AMAZON.Genre",
    Landform = "com.amazon.ask.types.builtins.AMAZON.Landform",
    LandmarksOrHistoricalBuildings = "com.amazon.ask.types.builtins.AMAZON.LandmarksOrHistoricalBuildings",
    Language = "com.amazon.ask.types.builtins.AMAZON.Language",
    Literal = "com.amazon.ask.types.builtins.AMAZON.Literal",
    LocalBusiness = "com.amazon.ask.types.builtins.AMAZON.LocalBusiness",
    LocalBusinessType = "com.amazon.ask.types.builtins.AMAZON.LocalBusinessType",
    MedicalOrganization = "com.amazon.ask.types.builtins.AMAZON.MedicalOrganization",
    Month = "com.amazon.ask.types.builtins.AMAZON.Month",
    Movie = "com.amazon.ask.types.builtins.AMAZON.Movie",
    MovieTheater = "com.amazon.ask.types.builtins.AMAZON.MovieTheater",
    MusicAlbum = "com.amazon.ask.types.builtins.AMAZON.MusicAlbum",
    MusicCreativeWorkType = "com.amazon.ask.types.builtins.AMAZON.MusicCreativeWorkType",
    MusicEvent = "com.amazon.ask.types.builtins.AMAZON.MusicEvent",
    MusicGroup = "com.amazon.ask.types.builtins.AMAZON.MusicGroup",
    Musician = "com.amazon.ask.types.builtins.AMAZON.Musician",
    MusicPlaylist = "com.amazon.ask.types.builtins.AMAZON.MusicPlaylist",
    MusicRecording = "com.amazon.ask.types.builtins.AMAZON.MusicRecording",
    MusicVenue = "com.amazon.ask.types.builtins.AMAZON.MusicVenue",
    MusicVideo = "com.amazon.ask.types.builtins.AMAZON.MusicVideo",
    Organization = "com.amazon.ask.types.builtins.AMAZON.Organization",
    PartySize = "com.amazon.ask.types.builtins.AMAZON.PartySize",
    Person = "com.amazon.ask.types.builtins.AMAZON.Person",
    PhoneNumber = "com.amazon.ask.types.builtins.AMAZON.PhoneNumber",
    PostalAddress = "com.amazon.ask.types.builtins.AMAZON.PostalAddress",
    Professional = "com.amazon.ask.types.builtins.AMAZON.Professional",
    ProfessionalType = "com.amazon.ask.types.builtins.AMAZON.ProfessionalType",
    RadioChannel = "com.amazon.ask.types.builtins.AMAZON.RadioChannel",
    Region = "com.amazon.ask.types.builtins.AMAZON.Region",
    RelativePosition = "com.amazon.ask.types.builtins.AMAZON.RelativePosition",
    Residence = "com.amazon.ask.types.builtins.AMAZON.Residence",
    Room = "com.amazon.ask.types.builtins.AMAZON.Room",
    ScreeningEvent = "com.amazon.ask.types.builtins.AMAZON.ScreeningEvent",
    Service = "com.amazon.ask.types.builtins.AMAZON.Service",
    SocialMediaPlatform = "com.amazon.ask.types.builtins.AMAZON.SocialMediaPlatform",
    SoftwareApplication = "com.amazon.ask.types.builtins.AMAZON.SoftwareApplication",
    SoftwareGame = "com.amazon.ask.types.builtins.AMAZON.SoftwareGame",
    Sport = "com.amazon.ask.types.builtins.AMAZON.Sport",
    SportsEvent = "com.amazon.ask.types.builtins.AMAZON.SportsEvent",
    SportsTeam = "com.amazon.ask.types.builtins.AMAZON.SportsTeam",
    StreetAddress = "com.amazon.ask.types.builtins.AMAZON.StreetAddress",
    StreetName = "com.amazon.ask.types.builtins.AMAZON.StreetName",
    TelevisionChannel = "com.amazon.ask.types.builtins.AMAZON.TelevisionChannel",
    TIME = "com.amazon.ask.types.builtins.AMAZON.TIME",
    TVEpisode = "com.amazon.ask.types.builtins.AMAZON.TVEpisode",
    TVSeason = "com.amazon.ask.types.builtins.AMAZON.TVSeason",
    US_CITY = "com.amazon.ask.types.builtins.AMAZON.US_CITY",
    US_FIRST_NAME = "com.amazon.ask.types.builtins.AMAZON.US_FIRST_NAME",
    US_STATE = "com.amazon.ask.types.builtins.AMAZON.US_STATE",
    VideoGame = "com.amazon.ask.types.builtins.AMAZON.VideoGame",
    VisualModeTrigger = "com.amazon.ask.types.builtins.AMAZON.VisualModeTrigger",
    WeatherCondition = "com.amazon.ask.types.builtins.AMAZON.WeatherCondition",
    WrittenCreativeWorkType = "com.amazon.ask.types.builtins.AMAZON.WrittenCreativeWorkType"
}
/**
 * Represents the `com.amazon.alexa.ask.conversations.Locale` enum.
 * @see https://developer.amazon.com/en-US/docs/alexa/custom-skills/develop-skills-in-multiple-languages.html
 */
export declare enum Locale {
    en_US = "en_US",
    en_GB = "en_GB",
    en_AU = "en_AU",
    en_CA = "en_CA",
    en_IN = "en_IN",
    de_DE = "de_DE",
    es_US = "es_US",
    ja_JP = "ja_JP",
    ar_SA = "ar_SA",
    es_ES = "es_ES",
    es_MX = "es_MX",
    fr_CA = "fr_CA",
    hi_IN = "hi_IN",
    it_IT = "it_IT",
    pt_BR = "pt_BR",
    fr_FR = "fr_FR"
}
export declare namespace Locale {
    function toUnderscoreLocale(locale: string): Locale;
}
//# sourceMappingURL=prelude.d.ts.map