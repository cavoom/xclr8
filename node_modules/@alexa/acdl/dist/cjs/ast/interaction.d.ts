import { Annotation } from "./annotation";
import { Call } from "./call";
import { Module } from "./module";
import { Correction } from "./correction";
import { NameDeclaration } from "./name-declaration";
import { Block } from "./block";
import { Tree } from "./tree";
import { SourceLocation } from "./source-location";
/**
 * Checks if the expression is a InteractionExpression.
 */
export declare const isInteractionExpression: (node: any) => node is Correction | Call<import("./call").CallContext> | NameDeclaration<import("./name-declaration").Named>;
/**
 * Expressions allowed within a Interaction.
 */
export type InteractionExpression = Call | Correction | NameDeclaration;
/**
 * Definition of InteractionScope
 */
export declare class InteractionScope extends Block<InteractionExpression, InteractionDeclaration> {
}
/**
 * Checks if the expression is a InteractionExpression.
 */
export declare const isInteractionDeclaration: (node: any) => node is InteractionDeclaration;
/**
 * Class of InteractionDeclaration
 */
export declare class InteractionDeclaration extends Tree<"InteractionDeclaration", Module> {
    /**
     * Block of expressions for the interaction
     */
    readonly scope?: InteractionScope | undefined;
    /**
     * Annotations attached to this Interaction
     */
    readonly annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined;
    constructor(
    /**
     * Block of expressions for the interaction
     */
    scope?: InteractionScope | undefined, 
    /**
     * Annotations attached to this Interaction
     */
    annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined, loc?: SourceLocation);
    clone(): this;
}
//# sourceMappingURL=interaction.d.ts.map