import { SourceLocation } from "./source-location";
import { Tree } from "./tree";
/**
 * Types of response templates supported by the compiler.
 */
export declare enum ResponseTemplateType {
    /**
     * APL display template
     */
    Display = "display",
    /**
     * APL-A prompt template.
     */
    Prompt = "prompt"
}
export declare namespace ResponseTemplateType {
    const All: [ResponseTemplateType.Display, ResponseTemplateType.Prompt];
}
/**
 * Node type to represent an externally loaded response template.
 *
 * This node will be removed in Beta 2 when we have generated prompts and the
 * ability to require them from disk.
 */
export declare class ResponseTemplate<T extends ResponseTemplateType = ResponseTemplateType> extends Tree<"ResponseTemplate", undefined> {
    /**
     * URI of the folder containing the APLA `document.json` file.
     */
    readonly templateUri: string;
    /**
     * Name of the prompt.
     *
     * Example:
     * ```
     * // name: `hello`
     * response/prompts/hello/document.json
     * ```
     */
    readonly name: string;
    readonly type: T;
    constructor(
    /**
     * URI of the folder containing the APLA `document.json` file.
     */
    templateUri: string, 
    /**
     * Name of the prompt.
     *
     * Example:
     * ```
     * // name: `hello`
     * response/prompts/hello/document.json
     * ```
     */
    name: string, type: T, loc?: SourceLocation);
    get uri(): string;
    /**
     * Check if this is an APL Display Response Template.
     */
    isDisplay(): this is ResponseTemplate<ResponseTemplateType.Display>;
    /**
     * Check if this is an APLA Prompt Response Template.
     */
    isPrompt(): this is ResponseTemplate<ResponseTemplateType.Prompt>;
    clone(): ResponseTemplate;
}
//# sourceMappingURL=response-template.d.ts.map