"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Call = exports.isCall = void 0;
const guard_1 = require("./guard");
const tree_1 = require("./tree");
const list_literal_1 = require("./list-literal");
const utterance_1 = require("./utterance");
exports.isCall = (0, guard_1.guard)("Call");
class Call extends tree_1.Tree {
    constructor(
    /**
     * Name of the Action.
     */
    name, 
    /**
     * Arguments to the Action.
     */
    args, 
    /**
     * Optional type parameters of the call.
     */
    genericArguments, 
    /**
     * Annotations attached to this Call expression.
     */
    annotations, loc) {
        super("Call", loc);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "genericArguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: genericArguments
        });
        Object.defineProperty(this, "annotations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: annotations
        });
        Object.defineProperty(this, "arguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.arguments = args;
        this.setAsParentOn(name);
        this.setAsParentOn(annotations);
        if ((args && (0, list_literal_1.isListLiteral)(args)) || Array.isArray(args) || (0, utterance_1.isUtterance)(args)) {
            this.setAsParentOn(args);
        }
        this.setAsParentOn(genericArguments);
    }
    clone() {
        var _a, _b, _c;
        let args = this.arguments;
        if ((this.arguments && (0, list_literal_1.isListLiteral)(this.arguments)) || (0, utterance_1.isUtterance)(this.arguments)) {
            args = this.arguments.clone();
        }
        else if (Array.isArray(this.arguments)) {
            args = this.arguments.map((a) => a.clone());
        }
        return new Call((_a = this.name) === null || _a === void 0 ? void 0 : _a.clone(), args, (_b = this.genericArguments) === null || _b === void 0 ? void 0 : _b.map((a) => a === null || a === void 0 ? void 0 : a.clone()), (_c = this.annotations) === null || _c === void 0 ? void 0 : _c.map((a) => a.clone()), this.loc);
    }
}
exports.Call = Call;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hc3QvY2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBOEI7QUFFOUIsaUNBQTRCO0FBUTVCLGlEQUF1RDtBQUV2RCwyQ0FBd0M7QUFHM0IsUUFBQSxNQUFNLEdBQUcsSUFBQSxhQUFLLEVBQUMsTUFBTSxDQUFDLENBQUM7QUFlcEMsTUFBYSxJQUFnRCxTQUFRLFdBQXFCO0lBR3hGO0lBQ0U7O09BRUc7SUFDTSxJQUFXO0lBQ3BCOztPQUVHO0lBQ0gsSUFBZ0I7SUFDaEI7O09BRUc7SUFDTSxnQkFBZ0Q7SUFDekQ7O09BRUc7SUFDTSxXQUEwQixFQUNuQyxHQUFvQjtRQUVwQixLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7OzttQkFmVjs7Ozs7O21CQVFBOzs7Ozs7bUJBSUE7O1FBbEJYOzs7OztXQUE4QjtRQXNCNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBQSw0QkFBYSxFQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFBLHVCQUFXLEVBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sS0FBSzs7UUFDVixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUEsNEJBQWEsRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxJQUFBLHVCQUFXLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3BGLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQy9CO2FBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN4QyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsT0FBTyxJQUFJLElBQUksQ0FDYixNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLEtBQUssRUFBRSxFQUNsQixJQUFJLEVBQ0osTUFBQSxJQUFJLENBQUMsZ0JBQWdCLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxhQUFELENBQUMsdUJBQUQsQ0FBQyxDQUFFLEtBQUssRUFBRSxDQUFDLEVBQzdDLE1BQUEsSUFBSSxDQUFDLFdBQVcsMENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFDdkMsSUFBSSxDQUFDLEdBQUcsQ0FDRCxDQUFDO0lBQ1osQ0FBQztDQUNGO0FBL0NELG9CQStDQyJ9