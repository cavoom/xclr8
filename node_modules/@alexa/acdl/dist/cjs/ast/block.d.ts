import { Expression } from "./expression";
import { Tree } from "./tree";
import { Node } from "./node";
import { SourceLocation } from "./source-location";
export declare const isScope: (node: any) => node is import("./condition").ThenScope | import("./condition").ElseScope | import("./sample").SampleScope | Block<Expression, Node> | import("./interaction").InteractionScope | import("./correction").CorrectionScope;
/**
 * Scope of Expressions.
 */
export declare class Block<T extends Expression = Expression, Parent extends Node = Node> extends Tree<"Block", Parent> {
    /**
     * Expressions in the Code Block.
     */
    readonly expressions?: T[] | undefined;
    constructor(
    /**
     * Expressions in the Code Block.
     */
    expressions?: T[] | undefined, loc?: SourceLocation);
    clone(): this;
}
//# sourceMappingURL=block.d.ts.map