"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDecompiledOutFilePath = exports.decompileProject = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const print_1 = require("./print");
const util_1 = require("./util");
const path_1 = __importDefault(require("path"));
/**
 * Transforms source ASKIR JSON files into ACDL files.
 *
 * ACDL files are written directly alongside the original ASK JSON file.
 *
 * The original ASK JSON files are copied to the `build` directory configured in `package.json`.
 * @param project ACDL Project to decompile.
 * @param options optional options to customize the behavior of the decompile. Currently only outDir and if
 * specified will not delete source ASKIR
 */
async function decompileProject(project, options) {
    const checker = project.getTypeChecker();
    // Remove generated ASKIR files since they will be rebuilt when compiling the project.
    await removeGeneratedASKIRModules(project);
    // Convert remaining ASKIR files to ACDL
    const updatedFiles = await Promise.all(project.sourceModules.map(async (src) => {
        if (src.uri.endsWith(".json") && !(0, util_1.isGeneratedFile)(src.uri)) {
            const outFile = getDecompiledOutFilePath(src.uri, options === null || options === void 0 ? void 0 : options.outDir);
            // write the new ACDL file
            await fs_extra_1.default.writeFile(outFile, (0, print_1.printModule)(src.content, checker));
            // The removal of the decompilation askir source is of questionable usefulness
            // and it might have been originally motivated because the askir source and acdl
            // destination share the same directory.
            // When an out dir is specified askir and acdl will not share the same directory
            // so skipping that removal
            if (!(options === null || options === void 0 ? void 0 : options.outDir)) {
                await fs_extra_1.default.unlink(src.uri);
            }
            return src.uri;
        }
        return undefined;
    }));
    return updatedFiles.filter(util_1.isNotUndefined);
}
exports.decompileProject = decompileProject;
/**
 * Gets the destination acdl file path by Rebuilding the askir source uri with two changes:
 *    1) if there is an oputDir, use that instead of the directory in the uri
 *    2) change .json extension to .acdl
 * @param uri
 * @param outDir
 * @returns the destination acdl file path
 */
function getDecompiledOutFilePath(uri, outDir) {
    const parsedUri = path_1.default.parse(uri);
    const uriOutDir = outDir ? outDir : parsedUri.dir;
    const uriOutExtension = parsedUri.ext.replace(".json", ".acdl").replace(".ask.acdl", ".acdl");
    return path_1.default.join(uriOutDir, parsedUri.name + uriOutExtension);
}
exports.getDecompiledOutFilePath = getDecompiledOutFilePath;
/**
 * Delete the ASKIR modules from the project source if there are any. This is necessary because when the
 * skill package is exported, the src directory contains the generated ASKIR modules, but they will be
 * rebuilt when the skill is compiled.
 */
async function removeGeneratedASKIRModules(project) {
    const { rootDir, sourceRootDir, srcDir } = project.config;
    // The directory where the ACDL/ASKIR files are stored.
    const sourceFilesDir = path_1.default.join(sourceRootDir !== null && sourceRootDir !== void 0 ? sourceRootDir : rootDir, srcDir);
    let files = [];
    try {
        files = await fs_extra_1.default.readdir(sourceFilesDir);
    }
    catch (err) {
        // If source directory doesn't exist in the project, just ignore the error for backwards compatibility.
    }
    // Remove any generated ASKIR files
    await Promise.all(files.map(async (file) => {
        if ((0, util_1.isGeneratedFile)(file)) {
            const absoluteFilePath = path_1.default.join(sourceFilesDir, file);
            await fs_extra_1.default.unlink(absoluteFilePath);
        }
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb21waWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY29tcGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3REFBMEI7QUFDMUIsbUNBQW9DO0FBRXBDLGlDQUF1RDtBQUN2RCxnREFBd0I7QUFTeEI7Ozs7Ozs7OztHQVNHO0FBQ0ksS0FBSyxVQUFVLGdCQUFnQixDQUFDLE9BQWdCLEVBQUUsT0FBMEI7SUFDakYsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBRXpDLHNGQUFzRjtJQUN0RixNQUFNLDJCQUEyQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTNDLHdDQUF3QztJQUN4QyxNQUFNLFlBQVksR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ3BDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN0QyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBQSxzQkFBZSxFQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxRCxNQUFNLE9BQU8sR0FBRyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLENBQUMsQ0FBQztZQUVuRSwwQkFBMEI7WUFDMUIsTUFBTSxrQkFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBQSxtQkFBVyxFQUFDLEdBQUcsQ0FBQyxPQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUVoRSw4RUFBOEU7WUFDOUUsZ0ZBQWdGO1lBQ2hGLHdDQUF3QztZQUN4QyxnRkFBZ0Y7WUFDaEYsMkJBQTJCO1lBQzNCLElBQUksQ0FBQyxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLENBQUEsRUFBRTtnQkFDcEIsTUFBTSxrQkFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUI7WUFFRCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUM7U0FDaEI7UUFDRCxPQUFPLFNBQVUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUYsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLHFCQUFjLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBL0JELDRDQStCQztBQUNEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQix3QkFBd0IsQ0FBQyxHQUFXLEVBQUUsTUFBZTtJQUNuRSxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ2xELE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlGLE9BQU8sY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBTEQsNERBS0M7QUFFRDs7OztHQUlHO0FBQ0gsS0FBSyxVQUFVLDJCQUEyQixDQUFDLE9BQWdCO0lBQ3pELE1BQU0sRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFFeEQsdURBQXVEO0lBQ3ZELE1BQU0sY0FBYyxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxhQUFiLGFBQWEsY0FBYixhQUFhLEdBQUksT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRW5FLElBQUksS0FBSyxHQUFhLEVBQUUsQ0FBQztJQUV6QixJQUFJO1FBQ0YsS0FBSyxHQUFHLE1BQU0sa0JBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDMUM7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLHVHQUF1RztLQUN4RztJQUVELG1DQUFtQztJQUNuQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDdkIsSUFBSSxJQUFBLHNCQUFlLEVBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsTUFBTSxnQkFBZ0IsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxNQUFNLGtCQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyJ9