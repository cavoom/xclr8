import * as ask from "./ast";
import { SourceFile } from "./source-file";
import { InteractionModelFile } from "./package";
/**
 * Generates interaction model ASKIR modules from a projects interaction model files.
 */
export declare class InteractionModelModuleGenerator {
    /**
     * Directory that is used when specifying the generated module source files uri.
     */
    private readonly dir;
    /**
     * Interaction model file absolute file paths.
     */
    private readonly interactionModelFiles;
    /**
     * Map from locale to the parsed interaction model content.
     */
    private interactionModels;
    constructor(dir: string, interactionModelFiles: InteractionModelFile[]);
    /**
     * Loads the interaction models asyncly.
     */
    private loadInteractionModelsSync;
    /**
     * Loads the interaction models syncly.
     */
    private loadInteractionModels;
    /**
     * Generates ASKIR Modules that will be compiled and built with a projects source modules.
     *
     * @returns Generated interaction model modules
     */
    generateInteractionModelModules(): Promise<SourceFile<ask.Module>[]>;
    /**
     * Generates ASKIR Modules that will be compiled and built with a projects source modules.
     *
     * @returns Generated interaction model modules
     */
    generateInteractionModelModulesSync(): SourceFile<ask.Module>[];
    /**
     * Generates the following modules:
     *
     * - `ask.interactionModel.catalogs.{locale}`
     * - `ask.interactionModel.catalogs`
     * - `ask.interactionModel.slotTypes`
     *
     * This function creates a module for each interaction model locale, and will store a variation
     * map that stores a catalog name as the key and locales as the values. The variation map is used
     * to generate the root catalogs module, and is also used for generating the slotTypes module.
     *
     * @returns Generated interaction model catalog and slotTypes modules
     */
    private generateCatalogModules;
    /**
     * Generates the `ask.interactionModel.catalogs` module.
     *
     * This module will contain all of the variations of each interaction model catalogs.
     *
     * @param catalogMap map of catalog names to locales it's defined in (MyPlanetSlot -> [enUS, deDE])
     * @returns Generated catalog variation ASKIR module
     */
    private generateCatalogVariationModules;
    /**
     * Generates the `ask.interactionModel.slotTypes` module.
     *
     * This module will contain all of the type declarations of the interaction model slot types.
     *
     * @param catalogMap map of catalog names to locales it's defined in (MyPlanetSlot -> [enUS, deDE])
     * @returns Generated slotTypes ASKIR module
     */
    private generateSlotTypesModule;
    /**
     *
     * Generates the following modules:
     *
     * - `ask.interactionModel.intentTypes`
     * - `ask.interactionModel.intents.{locale}`
     * - `ask.interactionModel.intents`
     *
     * This function creates a module for each interaction model locale, and will store a variation
     * map that stores an intent name as the key and locales as the values. The variation map is used
     * to generate the root intents module.
     *
     * The function first gets the `intentType` module which will also return a set of strings containing
     * the intent names that are identically defined in every interaction model. The function uses the set to generate
     * intents ONLY IF the intent type is defined.
     *
     * @returns The generated ASKIR intent modules.
     */
    private generateIntentModules;
    /**
     *
     * Generates the `ask.interactionModel.intentTypes` module.
     *
     * This module will contain the type declarations for intent types that exist in all
     * interaction models.
     *
     * This function finds the intents that are defined in all models and validates that they
     * have the same structure. If an intent has the same name in another model but has a different
     * structure, it will emit a parse error warning and skip the generation for that intent.
     *
     * Currently this function is three steps:
     *
     * 1. Go through interaction models and gather all intents
     * 2. Validate the remaining intents have the same structure
     * 3. Generate the ASKIR intent type declarations
     *
     *
     * Returns the source module for intentTypes and all of the valid intents. We need to skip
     * intents that don't have a valid intent type.
     *
     * @returns A set of all valid intents and the generated ASKIR intentType module
     */
    private generateIntentTypeModule;
    /**
     *
     * Generates the `ask.interactionModel.intents` module.
     *
     * This module will contain the variations for all intents defined in the interaction model.
     *
     * @param intentMap map of intent name to locales (enUS) using the intent
     * @returns the generated ASKIR intents variation module
     */
    private generateIntentVariationModule;
    /**
     * Takes in a object mapping from name declaration to locales and generates
     * a module with variations for each name declaration in the given namespace.
     *
     * It searches namespace.{locale} to get the name reference.
     *
     * @param uri the uri of the source file and ask.Module.
     * @param variations map from name declaration string to locales (enUS, frFR, ...)
     * @param namespace the namespace of the module.
     * @returns a generated ASKIR module with variation calls for each locale name declaration.
     */
    private generateVariationModule;
    /**
     * Generates a `@generated` annotation with a given name.
     */
    private generateGeneratedAnnotation;
    /**
     * Generates a `@catalog` annotation that references the given name.
     */
    private generateCatalogAnnotation;
    /**
     * Generates the ask.Locale annotation for the given locale.
     *
     * @param locale - The locale to generate the annotation for. In the form of `en_US`, `fr_FR`.
     * @returns The ask.Annotation for the given locale.
     */
    private generateLocaleAnnotation;
    /**
     * Generates the ASKIR `ListBasedCatalog<T>` from an interaction model slot type.
     *
     * @param catalog the slot type to use for generating the listBasedCatalog
     * @returns The ask.Call to the listBasedCatalog<T> action
     */
    private generateListBasedCatalog;
    /**
     * Generates a SourceFile<ask.Module> for generated interaction model modules.
     *
     * The exports will be generated from the given expressions.
     *
     * Module uri will be in the form of `dir/generated-im-{uriSuffix}`.
     *
     * @param uriSuffix the suffix to append to the generated module uri.
     * @param namespace the namespace to give the module.
     * @param expressions the module expressions.
     * @param errors any parse errors to include in the module that will be reported during validations.
     * @return A SourceFile<ask.Module> for the generated interaction model module.
     */
    private interactionModelSourceModule;
    /**
     * Generates a TypeReference to the ask.interactionModels.slotTypes or
     * com.amazon.ask.types.builtins.AMAZON namespace.
     *
     * @param name - Name of the slot type
     * @param multipleValues - Whether this slot has multiple values enabled
     */
    private generateSlotTypeReference;
}
//# sourceMappingURL=im-module-generator.d.ts.map