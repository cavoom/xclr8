"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ActionThing_locales, _DialogThing_locales;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnionThing = exports.ListThing = exports.StringThing = exports.NumberThing = exports.BooleanThing = exports.VoidThing = exports.NothingThing = exports.AnyThing = exports.TypeThing = exports.ArgumentsThing = exports.ArgumentThing = exports.DialogThing = exports.ActionThing = exports.FunctionThing = exports.ObjectThing = void 0;
const ask = __importStar(require("./ast"));
const ast_1 = require("./ast");
const type_1 = require("./type");
const visit_1 = require("./visit");
class BaseThing {
    constructor(checker, 
    /**
     * Unique token identifying this Thing.
     */
    token, 
    /**
     * Represents the Type of this Thing.
     */
    type, 
    /**
     * Optional `Apply` instance if this `Thing` is the result of a Call.
     */
    apply, 
    /**
     * The node that this Thing originates from.
     */
    origin, 
    /**
     * The parent of this THing, e.g. `person` in `person.name`.
     */
    parent, 
    /**
     * Location of this Thing in the Source Tree.
     */
    loc = origin === null || origin === void 0 ? void 0 : origin.loc, 
    /**
     * URI of the SourceFile of this Thing.
     */
    uri = origin === null || origin === void 0 ? void 0 : origin.uri) {
        Object.defineProperty(this, "checker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: checker
        });
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: token
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "apply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: apply
        });
        Object.defineProperty(this, "origin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: origin
        });
        Object.defineProperty(this, "parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: parent
        });
        Object.defineProperty(this, "loc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: loc
        });
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: uri
        });
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Thing"
        });
        Object.defineProperty(this, "propertiesIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    get root() {
        if (this.parent === undefined) {
            return this;
        }
        return this.parent.root;
    }
    /**
     * Checks if this Thing is a literal value.
     */
    isLiteral() {
        return this.apply !== undefined && this.apply.isType();
    }
    /**
     * Get a new Thing representing this Thing refined to a more narrow type within a specific context.
     *
     * @returns the more narrowly typed thing.
     */
    cast(type, origin) {
        if (this.isAction()) {
            return new ActionThing(this.checker, this.token, type, this.origin);
        }
        if (this.isDialog()) {
            return new DialogThing(this.checker, this.token, type, this.origin);
        }
        if (type.isArgument()) {
            return new ArgumentThing(this.checker, this.token, type, undefined, origin !== null && origin !== void 0 ? origin : this.origin, this.parent);
        }
        if (type.isArguments()) {
            return new ArgumentsThing(this.checker, this.token, type, origin !== null && origin !== void 0 ? origin : this.origin, this.parent);
        }
        if (type.isObject()) {
            return new ObjectThing(this.checker, this.token, type, this.apply, origin !== null && origin !== void 0 ? origin : this.origin, this.parent);
        }
        if (type.isList()) {
            return new ListThing(this.checker, this.token, type, this.apply, origin !== null && origin !== void 0 ? origin : this.origin, this.parent);
        }
        if (type.isPrimitive()) {
            return type.getThing(this.token, origin !== null && origin !== void 0 ? origin : this.origin, this.parent, this.apply);
        }
        return type.getThing(this.token, origin !== null && origin !== void 0 ? origin : this.origin, this.parent, this.apply);
    }
    /**
     * Check if this Thing equals the {@link other} Thing. Equality is determined by the unique {@link Thing.token}
     * given to the Thing.
     *
     * @param other other thing to compare against this Thing.
     * @returns `true` if they are the exact same value, `false` otherwise.
     */
    equals(other) {
        return this.token === (other === null || other === void 0 ? void 0 : other.token);
    }
    /**
     * Helper method to compare if this {@link Thing} complies with some type-narrowing assertion, {@link f};
     * @param f function which narrows the type of this thing.
     * @returns `true` if the condition passes or `false` otherwise.
     */
    is(f) {
        return f(this);
    }
    /**
     * Casts this `Thing` to {@link T} if the condition {@link f} passes, otherwise returns `undefined`.
     *
     * @param f assertion function to apply to this Thing.
     * @returns casts this `Thing` to {@link T} if the condition {@link f} passes, otherwise returns `undefined`.
     */
    as(f) {
        return this.is(f) ? this : undefined;
    }
    /**
     * Checks if this is a {@link NothingThing} instance.
     */
    isNothing() {
        return this instanceof NothingThing;
    }
    /**
     * Checks if this is a {@link VoidThing} instance.
     */
    isVoid() {
        return this instanceof VoidThing;
    }
    /**
     * Checks if this is a {@link ObjectThing} instance.
     */
    isObject() {
        return this instanceof ObjectThing;
    }
    /**
     * Checks if this is a {@link AnyThing} instance.
     */
    isAny() {
        return this instanceof AnyThing;
    }
    /**
     * Checks if this is a {@link Primitive} instance.
     */
    isPrimitive() {
        return this instanceof PrimitiveThing;
    }
    /**
     * @returns a {@link Primitive} instance if this is one, otherwise `undefined`.
     */
    asPrimitive() {
        return this.isPrimitive() ? this : undefined;
    }
    /**
     * @returns a {@link StringThing} instance if this is one, otherwise `undefined`.
     */
    asString() {
        return this.isString() ? this : undefined;
    }
    /**
     * Checks if this is a {@link StringThing instance.
     */
    isString() {
        return this instanceof StringThing;
    }
    /**
     * @returns a {@link NumberThing} instance if this is one, otherwise `undefined`.
     */
    asNumber() {
        return this.isNumber() ? this : undefined;
    }
    isNumber() {
        return this instanceof NumberThing;
    }
    asBoolean() {
        return this.isBoolean() ? this : undefined;
    }
    isBoolean() {
        return this instanceof BooleanThing;
    }
    asList() {
        return this.isList() ? this : undefined;
    }
    isList() {
        return this instanceof ListThing;
    }
    asLiteralList() {
        return this.isList() && this.isLiteral() ? this : undefined;
    }
    isLiteralList() {
        return this.isLiteral() && this.isList();
    }
    isFunction() {
        return this instanceof FunctionThing;
    }
    asFunction() {
        return this.isFunction() ? this : undefined;
    }
    isAction() {
        return this instanceof ActionThing;
    }
    asAction() {
        return this.isAction() ? this : undefined;
    }
    isArgument() {
        return this instanceof ArgumentThing;
    }
    asArgument() {
        return this.isArgument() ? this : undefined;
    }
    isArguments() {
        return this instanceof ArgumentsThing;
    }
    asArguments() {
        return this.isArguments() ? this : undefined;
    }
    isDialog() {
        return this instanceof DialogThing;
    }
    asDialog() {
        return this.isDialog() ? this : undefined;
    }
    isUnion() {
        return this instanceof UnionThing;
    }
    getPropertiesList() {
        var _a;
        return Object.values((_a = this.getProperties()) !== null && _a !== void 0 ? _a : {});
    }
    /**
     * @returns an object where the keys are the names of arguments and the values are {@link Thing} instances
     * representing values within a simulation or abstract values during type checking.
     */
    getProperties() {
        if (this.isLiteral()) {
            const args = this.apply.getArguments();
            if (args !== undefined) {
                return Object.keys(args)
                    .map((propName) => ({
                    [propName]: this.getProperty(propName),
                }))
                    .reduce((a, b) => ({ ...a, ...b }), {});
            }
        }
        return undefined;
    }
    /**
     * If this {@link Thing} is an Object containing properties, or a {@link UnionThing} of many Object Types that
     * contain properties, then return a {@link Thing} representing that property. This interface applies in both the
     * abstract type-checking phase of the compiler as well as during evaluation of a Dialog {@link Flow}.
     *
     * @returns a {@link Thing} value representing the value of a property of "this" {@link Thing}. If this is not
     * an {@link ObjectThing} or the property does not exist, then `undefined` is returned.
     */
    getProperty(name) {
        var _a, _b, _c;
        if (this.propertiesIndex === undefined) {
            this.propertiesIndex = new Map();
        }
        const propertyName = typeof name === "string" ? name : name === null || name === void 0 ? void 0 : name.name;
        if (propertyName === undefined) {
            return undefined;
        }
        const propertyToken = `${this.token}[${propertyName}]`;
        if (this.isObject()) {
            let thing = this.propertiesIndex.get(propertyName);
            if (thing === undefined) {
                if (this.isLiteral()) {
                    thing = this.checker.getThing((_a = this.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValue(propertyName), propertyToken);
                }
                else {
                    thing = (_b = this.type
                        .getPropertyType(propertyName)) === null || _b === void 0 ? void 0 : _b.getThing(propertyToken, typeof name === "string" ? undefined !== null && undefined !== void 0 ? undefined : new ask.Name(name) : name, this);
                    this.propertiesIndex.set(propertyName, thing !== null && thing !== void 0 ? thing : null);
                }
            }
            return thing !== null && thing !== void 0 ? thing : undefined;
        }
        if (this.isUnion()) {
            const things = this.things.map((thing) => { var _a; return (_a = thing.getProperty(name)) !== null && _a !== void 0 ? _a : this.checker.void.getThing(propertyToken, undefined); });
            const type = things
                .map((t) => { var _a; return (_a = t === null || t === void 0 ? void 0 : t.type) !== null && _a !== void 0 ? _a : this.checker.nothing; })
                .reduce((a, b) => { var _a; return (_a = a.union(b)) !== null && _a !== void 0 ? _a : this.checker.nothing; }, this.checker.nothing);
            return new UnionThing(this.checker, propertyToken, type, typeof name === "string" ? undefined : name, things);
        }
        if (this.isArgument()) {
            const thing = (_c = this.type.getPropertyType(propertyName)) === null || _c === void 0 ? void 0 : _c.getThing(propertyToken, undefined);
            this.propertiesIndex.set(propertyName, thing !== null && thing !== void 0 ? thing : null);
            return thing;
        }
        return undefined;
    }
    /**
     * If this is a {@link ListThing} or a {@link UnionThing} of many {@link ListThing} types, then return a {@link Thing}
     * representing the item at the specified {@link index} in the list.
     *
     * @param index the index of the item to access in the list. The index can either be a literal number or an abstract {@link NumberThing}
     * @param origin optional override of the node from which this {@link Thing} value originated from.
     * @returns a {@link Thing} representing the item if it exists or `undefined` otherwise.
     */
    getItem(index, origin) {
        var _a, _b, _c;
        const literal = typeof index === "number" ? index : typeof index.literal === "number" ? index.literal : index.token;
        const itemToken = `${this.token}[${literal}]`;
        if (this.isList()) {
            if (typeof literal === "number") {
                const item = this.checker.getThing((_b = (_a = this.apply) === null || _a === void 0 ? void 0 : _a.getListItems()) === null || _b === void 0 ? void 0 : _b[literal], itemToken);
                if (item) {
                    return item;
                }
            }
            return (_c = this.type.getListItemType()) === null || _c === void 0 ? void 0 : _c.getThing(itemToken, origin || (typeof index === "number" ? undefined : index.origin), this);
        }
        if (this.isUnion()) {
            const things = this.things.map((thing) => { var _a; return (_a = thing.getItem(index, origin)) !== null && _a !== void 0 ? _a : this.checker.void.getThing(itemToken, origin); });
            const type = things
                .map((t) => { var _a; return (_a = t === null || t === void 0 ? void 0 : t.type) !== null && _a !== void 0 ? _a : this.checker.nothing; })
                .reduce((a, b) => { var _a; return (_a = a.union(b)) !== null && _a !== void 0 ? _a : this.checker.nothing; }, this.checker.nothing);
            return new UnionThing(this.checker, itemToken, type, typeof index === "number" ? origin : index.origin, things);
        }
        return undefined;
    }
    /**
     * Find all locales this Base Thing support
     * The base thing depends on it's type to calculate locales
     *
     * E.G.
     * assume slotType deOnlySlot is only available in de_DE IM, sloType commonSlotType exist in both de_DE and en_US IM
     * ```
     * type myType {
     *  optional String id
     *  optional deOnlySlot german
     * }
     * getLocales() => ["de_DE"]
     * ```
     *
     * when type have nested type
     * ```
     * type complexType {
     *   myType name1
     *   optional commonSlotType name2
     * }
     *
     * getLocales() => ["de_DE"]
     * // only return de_DE cause this is the only overlap part of deOnlySlot and commonSlotType
     * ```
     * @returns
     */
    getLocales() {
        return this.type.getLocales();
    }
}
/**
 * Base type of all Things that contain Properties.
 */
class ObjectThing extends BaseThing {
    /**
     * Checks if this is a literal Object or an abstract Object such as one received from an Event during simulation.
     */
    isLiteral() {
        var _a;
        return ((_a = this.apply) === null || _a === void 0 ? void 0 : _a.isType()) === true;
    }
}
exports.ObjectThing = ObjectThing;
/**
 * Represents a Function value within a Dialog Flow simulation.
 *
 * This class encapsulates the Tree and TypeChecker environment that contains this Function and provides
 * a friendly interface over it so that consumers such as {@link evaluateDialogFlow} are insulated from
 * the various mappings between abstract Function signatures and concrete Functions/Action/Dialogs passed
 * around during the simulation.
 */
class FunctionThing extends ObjectThing {
    constructor(checker, token, type, origin, abstractToConcreteArgumentNames) {
        super(checker, token, type, undefined, origin, undefined);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "origin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: origin
        });
        Object.defineProperty(this, "abstractToConcreteArgumentNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: abstractToConcreteArgumentNames
        });
    }
    /**
     * Name of the Function.
     */
    get name() {
        var _a;
        return (_a = this.origin) === null || _a === void 0 ? void 0 : _a.name;
    }
    /**
     * Get this Function's properties. This function overrides the type of `Arguments<this>` so that we
     * can apply mappings between the argument names of the type signature and the argument names of
     * an action passed in as an argument to a dialog or stored on some variable.
     *
     * @param name property name
     * @returns a Thing value representing that property value.
     */
    getProperty(name) {
        const nameStr = typeof name === "string" ? name : name === null || name === void 0 ? void 0 : name.name;
        if (nameStr === "arguments" && this.abstractToConcreteArgumentNames !== undefined) {
            // the arguments type must have its properties mapped.
            return new ArgumentsThing(this.checker, `${this.token}[arguments]`, new type_1.Type(this.checker, this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Arguments), [this.type]), undefined, this);
        }
        return super.getProperty(name);
    }
    /**
     * Create a new FunctionThing where the argument names are mapped. Consumers will use the mapped interface
     * to supply or reference arguments. This is so that we can pass Functions around as arguments without
     * requiring the ArgumentDeclaration's signature have the same argument names.
     *
     * @param argumentNameMappings map of argument name to underlying argument name.
     * @returns a new copy of this Thing with mapped argument names.
     */
    withArgumentNameMappings(argumentNameMappings) {
        if (this.isAction()) {
            return new ActionThing(this.checker, this.token, this.type, this.origin, argumentNameMappings);
        }
        if (this.isDialog()) {
            return new DialogThing(this.checker, this.token, this.type, this.origin, argumentNameMappings);
        }
        return new FunctionThing(this.checker, this.token, this.type, this.origin, argumentNameMappings);
    }
}
exports.FunctionThing = FunctionThing;
/**
 * Represents an Action value within a Dialog Flow simulation.
 */
class ActionThing extends FunctionThing {
    constructor(checker, token, type, origin, abstractToConcreteArgumentNames) {
        super(checker, token, type, origin, abstractToConcreteArgumentNames);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "origin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: origin
        });
        Object.defineProperty(this, "abstractToConcreteArgumentNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: abstractToConcreteArgumentNames
        });
        Object.defineProperty(this, "concreteToAbstractArgumentNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // cache lazily evaluated properties - use `null` to indicate "cached, but empty".
        _ActionThing_locales.set(this, void 0);
        if (abstractToConcreteArgumentNames) {
            this.concreteToAbstractArgumentNames = {};
            for (const abstractArgumentName in abstractToConcreteArgumentNames) {
                // create a reverse lookup from the abstract action signature to a concrete action instance
                this.concreteToAbstractArgumentNames[abstractToConcreteArgumentNames[abstractArgumentName]] = abstractArgumentName;
            }
        }
    }
    /**
     * Name of the Action referenced by this Thing.
     */
    get actionName() {
        var _a;
        return (_a = this.name) === null || _a === void 0 ? void 0 : _a.name;
    }
    getArguments() {
        var _a;
        return (_a = this.getProperty("arguments")) === null || _a === void 0 ? void 0 : _a.asArguments();
    }
    /**
     * Get a named Argument from this Action.
     *
     * @param name name of the argument
     * @returns the Argument
     */
    getArgument(name) {
        var _a, _b;
        return (_b = (_a = this.getArguments()) === null || _a === void 0 ? void 0 : _a.getProperty(name)) === null || _b === void 0 ? void 0 : _b.asArgument();
    }
    /**
     * calculate the locales for the action
     * first collect all the type associated with this action (return type, generic type, property type)
     * find the locales supported by all the types
     * @returns
     */
    getLocales() {
        var _a, _b, _c;
        if (__classPrivateFieldGet(this, _ActionThing_locales, "f") !== undefined) {
            return __classPrivateFieldGet(this, _ActionThing_locales, "f");
        }
        const types = [];
        const returnType = ((_a = this.origin) === null || _a === void 0 ? void 0 : _a.kind) === "ActionDeclaration" ? this.checker.getType((_b = this === null || this === void 0 ? void 0 : this.origin) === null || _b === void 0 ? void 0 : _b.returnType) : undefined;
        // add return type
        if (returnType) {
            types.push(returnType);
        }
        // add property type
        (_c = this.origin.arguments) === null || _c === void 0 ? void 0 : _c.forEach((argDecl) => {
            const propertyType = this.checker.getType(argDecl);
            if (propertyType) {
                if (propertyType.isFunction()) {
                    const functionReturnType = propertyType.getFunctionReturnType();
                    const argumentTypes = propertyType.getFunctionArgumentTypes();
                    if (functionReturnType) {
                        types.push(functionReturnType);
                    }
                    if (argumentTypes) {
                        types.push(...argumentTypes);
                    }
                }
                else {
                    types.push(propertyType);
                }
            }
        });
        // find the locales supported by all types
        let locales;
        for (const type of types) {
            const typeLocales = type.getLocales();
            if (typeLocales) {
                if (locales === undefined) {
                    locales = [...typeLocales];
                }
                else {
                    locales = locales.filter((locale) => typeLocales.includes(locale));
                }
            }
        }
        __classPrivateFieldSet(this, _ActionThing_locales, locales, "f");
        return __classPrivateFieldGet(this, _ActionThing_locales, "f");
    }
}
exports.ActionThing = ActionThing;
_ActionThing_locales = new WeakMap();
/**
 * Represents a Dialog value within a Dialog Flow simulation.
 */
class DialogThing extends FunctionThing {
    constructor(checker, token, type, origin, abstractToConcreteArgumentNames) {
        super(checker, token, type, origin, abstractToConcreteArgumentNames);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "origin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: origin
        });
        Object.defineProperty(this, "abstractToConcreteArgumentNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: abstractToConcreteArgumentNames
        });
        // cache lazily evaluated properties - use `null` to indicate "cached, but empty".
        _DialogThing_locales.set(this, void 0);
    }
    /**
     * calculate the locales for the dialog
     * first collect all the type associated with this dialog (return type, generic type, property type)
     * find the locales supported by all the types
     * @returns
     */
    getLocales() {
        var _a, _b, _c, _d;
        if (__classPrivateFieldGet(this, _DialogThing_locales, "f") !== undefined) {
            return __classPrivateFieldGet(this, _DialogThing_locales, "f");
        }
        const types = [];
        const { checker } = this;
        const returnType = ((_a = this.origin) === null || _a === void 0 ? void 0 : _a.kind) === "DialogDeclaration" ? this.checker.getType((_b = this === null || this === void 0 ? void 0 : this.origin) === null || _b === void 0 ? void 0 : _b.returnType) : undefined;
        // add return type
        if (returnType) {
            types.push(returnType);
        }
        // add property type
        (_c = this.origin.arguments) === null || _c === void 0 ? void 0 : _c.forEach((argDecl) => {
            const propertyType = this.checker.getType(argDecl);
            if (propertyType) {
                if (propertyType.isFunction()) {
                    const functionReturnType = propertyType.getFunctionReturnType();
                    const argumentTypes = propertyType.getFunctionArgumentTypes();
                    if (functionReturnType)
                        types.push(functionReturnType);
                    if (argumentTypes)
                        types.push(...argumentTypes);
                }
                else {
                    types.push(propertyType);
                }
            }
        });
        // find the locales supported by all types
        let locales;
        for (const type of types) {
            const typeLocales = type.getLocales();
            if (typeLocales) {
                if (locales === undefined) {
                    locales = [...typeLocales];
                }
                else {
                    locales = locales.filter((locale) => typeLocales.includes(locale));
                }
            }
        }
        (_d = this.origin.samples) === null || _d === void 0 ? void 0 : _d.forEach((sample) => {
            (0, visit_1.visitEachChild)(sample, function updateLocales(node) {
                if (node.kind === "NameReference" || node.kind === "PropertyReference") {
                    const usedLocales = checker.collectLocaleInfo(node);
                    if (usedLocales.length > 0) {
                        if (locales === undefined) {
                            locales = [...usedLocales];
                        }
                        else {
                            locales = locales.filter((locale) => usedLocales.includes(locale));
                        }
                    }
                }
                else if (node.kind === "Call") {
                    const apply = checker.getApply(node);
                    const decl = apply === null || apply === void 0 ? void 0 : apply.decl;
                    if ((decl === null || decl === void 0 ? void 0 : decl.kind) === "ActionDeclaration" || (decl === null || decl === void 0 ? void 0 : decl.kind) === "DialogDeclaration") {
                        const thing = checker.getThing(decl);
                        if (((thing === null || thing === void 0 ? void 0 : thing.isAction()) && (apply === null || apply === void 0 ? void 0 : apply.isUserDefinedApi())) || (thing === null || thing === void 0 ? void 0 : thing.isDialog())) {
                            const usedLocales = thing.getLocales();
                            if (usedLocales) {
                                if (locales === undefined) {
                                    locales = [...usedLocales];
                                }
                                else {
                                    locales = locales.filter((locale) => usedLocales.includes(locale));
                                }
                            }
                        }
                    }
                    else if ((decl === null || decl === void 0 ? void 0 : decl.kind) === "Type") {
                        const usedLocales = decl.getLocales();
                        if (usedLocales) {
                            if (locales === undefined) {
                                locales = [...usedLocales];
                            }
                            else {
                                locales = locales.filter((locale) => usedLocales.includes(locale));
                            }
                        }
                    }
                }
                (0, visit_1.visitEachChild)(node, updateLocales);
            });
        });
        __classPrivateFieldSet(this, _DialogThing_locales, locales, "f");
        return __classPrivateFieldGet(this, _DialogThing_locales, "f");
    }
}
exports.DialogThing = DialogThing;
_DialogThing_locales = new WeakMap();
class ArgumentThing extends BaseThing {
    get action() {
        var _a, _b;
        return ((_b = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.isAction()) ? this.parent.parent : undefined;
    }
    getReferencedActionArgumentTypeInformation() {
        var _a, _b, _c;
        const referenceInfo = this.getReferencedActionArgumentPropertyReferenceInformation();
        if (!referenceInfo) {
            return undefined;
        }
        const { declaration: actionDeclaration, argumentName, argumentPathSegments } = referenceInfo;
        const argumentDeclaration = (_a = actionDeclaration.arguments) === null || _a === void 0 ? void 0 : _a.find((argDecl) => { var _a; return ((_a = argDecl === null || argDecl === void 0 ? void 0 : argDecl.name) === null || _a === void 0 ? void 0 : _a.name) === argumentName; });
        if (!(argumentDeclaration === null || argumentDeclaration === void 0 ? void 0 : argumentDeclaration.type) || !argumentPathSegments) {
            return undefined;
        }
        let currentType = this.checker.getType(argumentDeclaration.type);
        for (let i = 1; i < argumentPathSegments.length && currentType; i++) {
            const argumentPathSegment = argumentPathSegments[i];
            currentType = (_b = currentType.getPropertyMap().get(argumentPathSegment)) === null || _b === void 0 ? void 0 : _b.type;
        }
        return { argumentName, actionName: (_c = actionDeclaration.name) === null || _c === void 0 ? void 0 : _c.name, type: currentType };
    }
    /**
     * If the argument references an argument to another action
     * @returns
     * If the argument value is a property reference rooted in an API call (like getPizza.arguments.pizzaOrder.pizzaType)
     * returns an object with 4 properties:
     *    declaration has the declaration of the API (getPizza's declaration)
     *    argumentName has the name of the argument in the api ("pizzaOrder")
     *    argumentPath has the property path starting at the argument name ("pizzaOrder.pizzaType")
     *    argumentPAthSegments has ["pzzaOrder", "pizzaType"]
     */
    getReferencedActionArgumentPropertyReferenceInformation() {
        var _a, _b, _c, _d, _e;
        const argumentPathSegments = [];
        let argumentName;
        let actionDeclaration;
        // There are two main cases to get a referenced argument information
        if (((_b = (_a = this.origin) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.kind) === "PropertyReference") {
            // The first case is when the reference is from a PropertyReference like getWeather.arguments.city.name.
            // this.action will be null in this case and in order to find the information we have to...
            let currentExpression = this.origin.context;
            // Loop through the expressions
            while (currentExpression) {
                // untill we find a thing which is an ActionDeclaration
                const expressionThing = this.checker.getThing(currentExpression);
                if (((_c = expressionThing === null || expressionThing === void 0 ? void 0 : expressionThing.origin) === null || _c === void 0 ? void 0 : _c.kind) !== "ActionDeclaration") {
                    argumentPathSegments.push((_e = (_d = currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.name) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "");
                    currentExpression = (currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.kind) === "PropertyReference" ? currentExpression.expression : undefined;
                    continue;
                }
                // When we find the action declaration, the previous property was "arguments" and one property before that
                // was the argument name
                if (argumentPathSegments.length < 2 || argumentPathSegments[argumentPathSegments.length - 1] !== "arguments") {
                    return undefined;
                }
                else {
                    argumentName = argumentPathSegments[argumentPathSegments.length - 2];
                    actionDeclaration = expressionThing.origin;
                    argumentPathSegments.reverse();
                    // remove "arguments"
                    argumentPathSegments.splice(0, 1);
                    break;
                }
            }
        }
        else if (this.action) {
            // The second case is for something like getWeather.arguments.CityName where this.action is defined
            actionDeclaration = this.action.origin;
            // in this case the argument will be in argumentName
            if (this.argumentName) {
                argumentName = this.argumentName;
                argumentPathSegments.push(argumentName);
            }
        }
        if (!actionDeclaration || !argumentName) {
            return undefined;
        }
        return {
            declaration: actionDeclaration,
            argumentName,
            argumentPathSegments,
            argumentPath: argumentPathSegments.join("."),
        };
    }
    getReferencedActionArgumentPropertyReferenceInformationOld() {
        var _a, _b, _c, _d, _e, _f, _g;
        if (((_b = (_a = this.origin) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.kind) !== "PropertyReference") {
            return undefined;
        }
        const expressions = [];
        let currentExpression = this.origin.context;
        while ((currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.kind) === "PropertyReference") {
            expressions.push(currentExpression);
            currentExpression = currentExpression.expression;
        }
        expressions.reverse();
        if (expressions.length < 2 || (currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.kind) !== "NameReference" || ((_d = (_c = expressions[0]) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.name) !== "arguments") {
            return undefined;
        }
        const nameReferenceThing = this.checker.getThing(currentExpression);
        if (((_e = nameReferenceThing === null || nameReferenceThing === void 0 ? void 0 : nameReferenceThing.origin) === null || _e === void 0 ? void 0 : _e.kind) !== "ActionDeclaration") {
            return undefined;
        }
        return {
            declaration: nameReferenceThing.origin,
            argumentName: (_g = (_f = expressions[1].name) === null || _f === void 0 ? void 0 : _f.name) !== null && _g !== void 0 ? _g : "",
            argumentPathSegments: expressions.map((e) => { var _a, _b; return (_b = (_a = e.name) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : ""; }),
            argumentPath: expressions
                .slice(1)
                .map((x) => { var _a, _b; return (_b = (_a = x.name) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : ""; })
                .join("."),
        };
    }
    /**
     * An argument might reference an action argument when it uses something like getPizza.arguments.
     * This method returns the declaration for that action (like getPizza's declaration). There are two cases:
     *   1) argument references a "non object" action argument as in getPizza.arguments.pizzaType where pizzaType is of slot type PizzaType
     *   2) argument references an object action argument as in getPizza.arguments.pizzaOrder.pizzaType where pizzaOrder is
     *   of type PizzaOrder. The PizzaOrder type has a pizzaType property of slot type PizzaType
     * For case 1 the declaration is in action.origin.
     * For case 2 the declaration name is in the property reference and it needs to be lookedUp which is done in
     * this.getPropertyReferenceToAPIInformation
     * If the argument does not reference an action argument, this returns undefined
     * @returns the declaration of action referenced in argument
     */
    getReferencedActionArgumentActionDeclaration() {
        var _a;
        return (_a = this.getReferencedActionArgumentPropertyReferenceInformation()) === null || _a === void 0 ? void 0 : _a.declaration;
    }
    /**
     * If an argument references an action argument returns the property path to that argument
     */
    getReferencedActionArgumentPath() {
        var _a;
        return (_a = this.getReferencedActionArgumentPropertyReferenceInformation()) === null || _a === void 0 ? void 0 : _a.argumentPath;
    }
    get argumentName() {
        var _a;
        return ((_a = this.origin) === null || _a === void 0 ? void 0 : _a.kind) === "Name" ? this.origin.name : undefined;
    }
    get isOptional() {
        var _a, _b;
        return (_b = this.checker.root.getType((_a = this.origin) === null || _a === void 0 ? void 0 : _a.context)) === null || _b === void 0 ? void 0 : _b.isOptional();
    }
    /**
     * If an argument references an action argument returns the declaration for that action argument
     */
    getReferencedActionArgumentDeclaration() {
        var _a;
        const propertyReferenceInformation = this.getReferencedActionArgumentPropertyReferenceInformation();
        if (!propertyReferenceInformation) {
            return undefined;
        }
        return (_a = propertyReferenceInformation.declaration.arguments) === null || _a === void 0 ? void 0 : _a.find((argDecl) => { var _a; return ((_a = argDecl.name) === null || _a === void 0 ? void 0 : _a.name) === propertyReferenceInformation.argumentName; });
    }
}
exports.ArgumentThing = ArgumentThing;
class ArgumentsThing extends ObjectThing {
    constructor(checker, token, type, origin, parent) {
        super(checker, token, type, undefined, origin, parent);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: parent
        });
    }
    getArgumentsList() {
        var _a, _b, _c, _d, _e;
        if (((_b = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.kind) === "ActionDeclaration" || ((_d = (_c = this.parent) === null || _c === void 0 ? void 0 : _c.origin) === null || _d === void 0 ? void 0 : _d.kind) === "DialogDeclaration") {
            return (_e = this.parent.origin.arguments) === null || _e === void 0 ? void 0 : _e.map((arg) => { var _a, _b; return (_b = super.getProperty((_a = arg.name) === null || _a === void 0 ? void 0 : _a.name)) === null || _b === void 0 ? void 0 : _b.asArgument(); });
        }
        return undefined;
    }
    getProperty(name) {
        var _a, _b, _c, _d, _e, _f;
        if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.abstractToConcreteArgumentNames) !== undefined) {
            const nameStr = typeof name === "string" ? name : name === null || name === void 0 ? void 0 : name.name;
            if (nameStr !== undefined) {
                return (_e = super.getProperty((_d = (_c = (_b = this.parent) === null || _b === void 0 ? void 0 : _b.abstractToConcreteArgumentNames) === null || _c === void 0 ? void 0 : _c[nameStr]) !== null && _d !== void 0 ? _d : nameStr)) === null || _e === void 0 ? void 0 : _e.asArgument();
            }
        }
        return (_f = super.getProperty(name)) === null || _f === void 0 ? void 0 : _f.asArgument();
    }
}
exports.ArgumentsThing = ArgumentsThing;
class TypeThing extends ObjectThing {
    constructor(checker, token, type, origin) {
        super(checker, token, type, undefined, origin, undefined);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
    }
}
exports.TypeThing = TypeThing;
class PrimitiveThing extends BaseThing {
    /**
     * The literal data value of this primitive thing (if it is specified).
     *
     * If this is an abstract thing, such as the result of an event, then `undefined` is returned.
     */
    get literal() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const lit = ((_a = this.type) === null || _a === void 0 ? void 0 : _a.isBoolean()) && typeof ((_b = this.apply) === null || _b === void 0 ? void 0 : _b.call.arguments) === "boolean"
            ? (_c = this.apply) === null || _c === void 0 ? void 0 : _c.call.arguments
            : ((_d = this.type) === null || _d === void 0 ? void 0 : _d.isStringLike()) && typeof ((_e = this.apply) === null || _e === void 0 ? void 0 : _e.call.arguments) === "string"
                ? this.apply.call.arguments
                : ((_f = this.type) === null || _f === void 0 ? void 0 : _f.isNumber()) && typeof ((_g = this.apply) === null || _g === void 0 ? void 0 : _g.call.arguments) === "number"
                    ? this.apply.call.arguments
                    : ((_h = this.type) === null || _h === void 0 ? void 0 : _h.isVoid()) && ((_j = this.apply) === null || _j === void 0 ? void 0 : _j.call.arguments) === null
                        ? null
                        : ((_k = this.type) === null || _k === void 0 ? void 0 : _k.isNothing()) && ((_l = this.apply) === null || _l === void 0 ? void 0 : _l.call.arguments) === null
                            ? null
                            : undefined;
        return lit;
    }
    isLiteral() {
        var _a;
        if ((_a = this.apply) === null || _a === void 0 ? void 0 : _a.isType()) {
            const args = this.apply.call.arguments;
            return args === null || typeof args === "boolean" || typeof args === "string" || typeof args === "number" || Array.isArray(args);
        }
        return false;
    }
}
class AnyThing extends BaseThing {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "thingKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
exports.AnyThing = AnyThing;
class NothingThing extends PrimitiveThing {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "thingKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
exports.NothingThing = NothingThing;
class VoidThing extends PrimitiveThing {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "thingKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
exports.VoidThing = VoidThing;
class BooleanThing extends PrimitiveThing {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "thingKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
exports.BooleanThing = BooleanThing;
class NumberThing extends PrimitiveThing {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "thingKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
exports.NumberThing = NumberThing;
class StringThing extends PrimitiveThing {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "thingKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
exports.StringThing = StringThing;
class ListThing extends PrimitiveThing {
    isLiteral() {
        var _a;
        return ask.isListLiteral((_a = this.apply) === null || _a === void 0 ? void 0 : _a.call.arguments);
    }
    getItems() {
        var _a;
        if (this.isLiteral()) {
            return (_a = this.apply) === null || _a === void 0 ? void 0 : _a.call.arguments.items.map((item) => this.checker.getThing(item, undefined, item));
        }
        return undefined;
    }
    getListItems() {
        var _a;
        if (this.isLiteral()) {
            return (_a = this.apply) === null || _a === void 0 ? void 0 : _a.call.arguments.items;
        }
        return undefined;
    }
}
exports.ListThing = ListThing;
/**
 * TODO: remove this class
 */
class UnionThing extends BaseThing {
    constructor(checker, token, type, origin, 
    /**
     *
     */
    things) {
        super(checker, token, type, undefined, origin, undefined);
        Object.defineProperty(this, "origin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: origin
        });
        Object.defineProperty(this, "things", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: things
        });
        Object.defineProperty(this, "thingKind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Union"
        });
    }
}
exports.UnionThing = UnionThing;
//# sourceMappingURL=data:application/json;base64,