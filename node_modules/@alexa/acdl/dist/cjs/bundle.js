"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundleProject = exports.bundleProjectSync = exports.zipBundleOutput = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const crypto_1 = __importDefault(require("crypto"));
const util_1 = require("./util");
const compile_1 = require("./compile");
const constants_1 = require("./constants");
const prelude_1 = require("./ast/prelude");
const error_factory_1 = require("./error-factory");
const interaction_model_merger_1 = require("./interaction-model-merger");
const ast_1 = require("./ast");
/**
 * Zips up the `skill-package` folder.
 *
 * @param bundleProjectOutput project output from bundleProject
 * returns a promise for a new BundleProjectOutput with a skillPackageZip property
 */
async function zipBundleOutput(bundleProjectOutput) {
    const skillPackageZip = `${bundleProjectOutput.skillPackagePath}.zip`;
    await (0, util_1.zipDirectory)(bundleProjectOutput.skillPackagePath, skillPackageZip);
    return {
        ...bundleProjectOutput,
        skillPackageZip,
    };
}
exports.zipBundleOutput = zipBundleOutput;
/**
 * Synchronously bundle a project and prepare a `skill-package` folder ready for import to SMAPI.
 *
 * @param project skill project to bundle
 * @param props bundling properties
 */
function bundleProjectSync(project, props) {
    return _bundleProject(project, true, props);
}
exports.bundleProjectSync = bundleProjectSync;
/**
 * Asynchronously bundle a project and prepare a `skill-package` folder ready for import to SMAPI.
 *
 * @param project skill project to bundle
 * @param props bundling properties
 */
function bundleProject(project, props) {
    return _bundleProject(project, false, props);
}
exports.bundleProject = bundleProject;
function _bundleProject(project, sync, props) {
    const bundlePaths = getBundlePaths(project, props);
    const { skillPackagePath, conversationsPath, dataStorePackagesPath, promptsPath, displayPath, interactionModelsPath, tasksPath, assetsPath, ispPath, } = bundlePaths;
    if (sync) {
        return runSync();
    }
    return runAsync();
    function runSync() {
        if ((props === null || props === void 0 ? void 0 : props.cleanBuild) === true) {
            cleanSync();
        }
        mkdirsSync();
        const errors = writePackagesSync();
        writePackagesSync();
        copySkillManifestSync();
        synthesizeInteractionModels(true);
        copyResponseTemplatesSync();
        copyTasksSync();
        copyAssetsSync();
        copyIspSync();
        copyDataStorePackagesSync();
        return {
            skillPackagePath,
            errors,
        };
    }
    async function runAsync() {
        if ((props === null || props === void 0 ? void 0 : props.cleanBuild) === true) {
            await clean();
        }
        await mkdirs();
        const errors = await writePackages();
        await Promise.all([
            copySkillManifest(),
            synthesizeInteractionModels(false),
            copyResponseTemplates(),
            copyTasks(),
            copyAssets(),
            copyIsp(),
            copyDataStorePackages(),
        ]);
        return {
            skillPackagePath,
            errors,
        };
    }
    function clean() {
        return fs_extra_1.default.remove(skillPackagePath);
    }
    function cleanSync() {
        return fs_extra_1.default.removeSync(skillPackagePath);
    }
    async function mkdirs() {
        await fs_extra_1.default.mkdir(skillPackagePath, { recursive: true });
        await Promise.all([
            fs_extra_1.default.mkdir(interactionModelsPath, { recursive: true }),
            fs_extra_1.default.mkdir(conversationsPath, { recursive: true }),
            fs_extra_1.default.mkdir(promptsPath, { recursive: true }),
        ]);
    }
    function mkdirsSync() {
        fs_extra_1.default.mkdirSync(skillPackagePath, { recursive: true });
        fs_extra_1.default.mkdirSync(interactionModelsPath, { recursive: true });
        fs_extra_1.default.mkdirSync(conversationsPath, { recursive: true });
        fs_extra_1.default.mkdirSync(promptsPath, { recursive: true });
    }
    function writePackagesSync() {
        return [project.source, ...project.external].map(writePackageSync).reduce((a, b) => a.concat(b), []);
    }
    async function writePackages() {
        return (await Promise.all([project.source, ...project.external].map(writePackage))).reduce((a, b) => a.concat(b), []);
    }
    function writePackageSync(pkg) {
        var _a, _b;
        if (((_a = pkg.config) === null || _a === void 0 ? void 0 : _a.name) !== constants_1.Constants.AlexaSchemaPackageName && ((_b = pkg.config) === null || _b === void 0 ? void 0 : _b.name) !== constants_1.Constants.ACCorePackageName) {
            return pkg.modules.map((mod) => writeModule(pkg, mod, true)).reduce((a, b) => a.concat(b), []);
        }
        return [];
    }
    async function writePackage(pkg) {
        var _a, _b;
        if (((_a = pkg.config) === null || _a === void 0 ? void 0 : _a.name) !== constants_1.Constants.AlexaSchemaPackageName && ((_b = pkg.config) === null || _b === void 0 ? void 0 : _b.name) !== constants_1.Constants.ACCorePackageName) {
            return (await Promise.all(pkg.modules.map((mod) => writeModule(pkg, mod, false)))).reduce((a, b) => a.concat(b), []);
        }
        return [];
    }
    function writeModule(pkg, module, sync) {
        var _a, _b, _c;
        if (module.content === undefined) {
            return [];
        }
        const isSourcePkg = pkg === project.source;
        const compiledModule = (0, compile_1.compileModule)(project, module.content);
        const json = JSON.stringify(compiledModule);
        // compute a truncated sha256 hash of the file content for unique names
        // we truncate it avoid long names, 10 characters should be enough, we can tweak it as necessary
        const fileHash = () => crypto_1.default.createHash("sha256").update(json).digest("hex").slice(0, 10);
        let outputFile;
        if (isSourcePkg) {
            // for a source package, we do our best to maintain the original file names
            // the only transformation we do is to flatten nested folders into the file name
            // see: https://github.com/alexa/ask-ac/issues/560
            const src = path_1.default.isAbsolute(project.config.srcDir)
                ? project.config.srcDir
                : path_1.default.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, project.config.srcDir);
            const filePath = path_1.default.relative(src, module.uri);
            const cleanName = sanitizeFileName(filePath);
            // we append the hash as a file suffix if the path includes slashes
            // this is because two files might collide after removing nested folders
            const suffix = filePath.includes("/") ? `_${fileHash()}` : "";
            outputFile = `${path_1.default.join(conversationsPath, cleanName)}${suffix}.${constants_1.Constants.ASKIRJsonExtension}`;
        }
        else {
            // for a dependency package, we use a hash to create a unique name
            const filePath = ((_b = pkg.config) === null || _b === void 0 ? void 0 : _b.name) ? path_1.default.join((_c = pkg.config) === null || _c === void 0 ? void 0 : _c.name, path_1.default.basename(module.uri)) : path_1.default.basename(module.uri);
            const cleanName = sanitizeFileName(filePath);
            outputFile = path_1.default.join(conversationsPath, `${cleanName}_${fileHash()}.${constants_1.Constants.ASKIRJsonExtension}`);
        }
        return writeCompiledModule(compiledModule, module.uri, outputFile, sync);
    }
    function writeCompiledModule(compiledModule, uri, outputFile, sync) {
        var _a, _b;
        const writeFileRequests = (_b = (_a = compiledModule.expressions) === null || _a === void 0 ? void 0 : _a.map((expr) => {
            var _a;
            if (expr.kind === "QualifiedNameDeclaration" &&
                ((_a = expr.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call" &&
                (expr.expression.name === prelude_1.AlexaConversations.apl || expr.expression.name === prelude_1.AlexaConversations.apla)) {
                const fqn = expr.name;
                const templatePath = expr.expression.arguments.path.arguments;
                if (fqn && typeof templatePath === "string") {
                    const outputDir = path_1.default.join(expr.expression.name === prelude_1.AlexaConversations.apl ? displayPath : promptsPath, fqn);
                    const moduleFilePath = path_1.default.dirname(uri);
                    const absoluteTemplatePath = path_1.default.resolve(moduleFilePath, templatePath);
                    const updatedPathRef = path_1.default.join(path_1.default.relative(path_1.default.dirname(outputFile), outputDir), "document.json");
                    expr.expression.arguments.path.arguments = updatedPathRef;
                    if (sync) {
                        fs_extra_1.default.mkdirSync(outputDir, { recursive: true });
                        if ((0, util_1.isFileSync)(absoluteTemplatePath)) {
                            // is a direct .json file reference, we need to write it in a folder as document.json
                            fs_extra_1.default.copyFileSync(absoluteTemplatePath, path_1.default.join(outputDir, "document.json"));
                        }
                        else {
                            // is a reference to a folder, we need to copy the contents of the folder
                            fs_extra_1.default.copySync(absoluteTemplatePath, outputDir);
                        }
                    }
                    else {
                        return (async function () {
                            await fs_extra_1.default.mkdir(outputDir, { recursive: true });
                            if (await (0, util_1.isFile)(absoluteTemplatePath)) {
                                // is a direct .json file reference, we need to write it in a folder as document.json
                                await fs_extra_1.default.copyFile(absoluteTemplatePath, path_1.default.join(outputDir, "document.json"));
                            }
                            else {
                                // is a reference to a folder, we need to copy the contents of the folder
                                await fs_extra_1.default.copy(absoluteTemplatePath, outputDir);
                            }
                        })();
                    }
                }
            }
            return sync ? undefined : Promise.resolve(undefined);
        })) !== null && _b !== void 0 ? _b : [];
        const json = JSON.stringify(compiledModule);
        if (sync) {
            fs_extra_1.default.writeFileSync(outputFile, json);
            const status = fs_extra_1.default.statSync(outputFile);
            return checkFileSize(status);
        }
        return (async function () {
            await Promise.all(writeFileRequests);
            await fs_extra_1.default.writeFile(outputFile, json);
            const status = await fs_extra_1.default.stat(outputFile);
            return checkFileSize(status);
        })();
        function checkFileSize(status) {
            if (status.size >= constants_1.Constants.MaximumFileSize) {
                return [error_factory_1.ValidationErrorFactory.TooLargeIR({ attributes: { filePath: path_1.default.relative(process.cwd(), outputFile) } })];
            }
            return [];
        }
    }
    function sanitizeFileName(rawFilePath) {
        return truncate(rawFilePath
            .replace(".acdl", "")
            .replace(".json", "")
            .replace(/[\/\\]/g, "_")
            .replace(/[@\.]/g, ""), 50);
    }
    function truncate(input, length) {
        return input.substring(0, Math.min(length, input.length));
    }
    function copySkillManifestSync() {
        var _a, _b;
        const manifestPath = path_1.default.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, constants_1.Constants.SkillManifestFileName);
        const manifest = fs_extra_1.default.statSync(manifestPath);
        const componentsFolderPath = path_1.default.join((_b = project.config.sourceRootDir) !== null && _b !== void 0 ? _b : project.config.rootDir, "components");
        const askirPath = path_1.default.join(skillPackagePath, "conversations");
        if (manifest.isFile()) {
            fs_extra_1.default.copyFileSync(manifestPath, path_1.default.join(skillPackagePath, constants_1.Constants.SkillManifestFileName));
        }
        else {
            throw new Error(`expected '${constants_1.Constants.SkillManifestFileName}' file to be found at ${manifestPath}`);
        }
        // checks whether a config file is present inside component directory also checks for conversations folder in build
        if (fs_extra_1.default.pathExistsSync(componentsFolderPath) && isConfigPresentSync(componentsFolderPath) && fs_extra_1.default.pathExistsSync(askirPath)) {
            // updates skill.json in build folder to include Alexa Conversations dialog manager
            updateSkillManifestSync();
        }
    }
    /**
     * Updates the skill manifest file. Adds alexa conversations dialog manager in it.
     */
    function updateSkillManifestSync() {
        var _a, _b, _c;
        const manifestPath = path_1.default.join(skillPackagePath, constants_1.Constants.SkillManifestFileName);
        const manifestObj = (0, util_1.readJsonFileSync)(manifestPath);
        if (!((_b = (_a = manifestObj === null || manifestObj === void 0 ? void 0 : manifestObj.manifest) === null || _a === void 0 ? void 0 : _a.apis) === null || _b === void 0 ? void 0 : _b.custom)) {
            return;
        }
        const existingDialogManagers = ((_c = manifestObj.manifest.apis.custom.dialogManagement) === null || _c === void 0 ? void 0 : _c.dialogManagers) || [];
        const hasAlexaConversations = existingDialogManagers.find((dialogManager) => (dialogManager === null || dialogManager === void 0 ? void 0 : dialogManager.type) === "AMAZON.Conversations");
        const newDialogManagers = hasAlexaConversations ? existingDialogManagers : [...existingDialogManagers, { type: "AMAZON.Conversations" }];
        manifestObj.manifest.apis.custom = {
            ...manifestObj.manifest.apis.custom,
            ...{
                dialogManagement: {
                    ...(manifestObj.manifest.apis.custom.dialogManagement || {}),
                    dialogManagers: newDialogManagers,
                },
            },
        };
        const updatedManifest = JSON.stringify(manifestObj);
        fs_extra_1.default.writeFileSync(manifestPath, updatedManifest);
    }
    /**
     * Recursively checks whether config.jsonc file is present in component directory
     */
    function isConfigPresentSync(parentDirectory) {
        const configPath = path_1.default.join(parentDirectory, "config.jsonc");
        if (fs_extra_1.default.pathExistsSync(configPath)) {
            return true;
        }
        const subDir = (0, util_1.getDirectoriesSync)(parentDirectory);
        for (const dir of subDir) {
            if (isConfigPresentSync(path_1.default.join(parentDirectory, dir))) {
                return true;
            }
        }
        return false;
    }
    async function copySkillManifest() {
        var _a, _b;
        const manifestPath = path_1.default.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, constants_1.Constants.SkillManifestFileName);
        const manifest = await fs_extra_1.default.stat(manifestPath);
        const componentsFolderPath = path_1.default.join((_b = project.config.sourceRootDir) !== null && _b !== void 0 ? _b : project.config.rootDir, "components");
        const askirPath = path_1.default.join(skillPackagePath, "conversations");
        if (manifest.isFile()) {
            await fs_extra_1.default.copyFile(manifestPath, path_1.default.join(skillPackagePath, constants_1.Constants.SkillManifestFileName));
        }
        else {
            throw new Error(`expected '${constants_1.Constants.SkillManifestFileName}' file to be found at ${manifestPath}`);
        }
        // checks whether a config file is present inside component directory also checks for conversations folder in build
        if ((await fs_extra_1.default.pathExists(componentsFolderPath)) && (await isConfigPresent(componentsFolderPath)) && (await fs_extra_1.default.pathExists(askirPath))) {
            // updates skill.json in build folder to include Alexa Conversations dialog manager
            await updateSkillManifest();
        }
    }
    /**
     * Recursively checks whether config.jsonc file is present in component directory
     */
    async function isConfigPresent(parentDirectory) {
        const configPath = path_1.default.join(parentDirectory, "config.jsonc");
        if (await fs_extra_1.default.pathExists(configPath)) {
            return true;
        }
        const subDir = await (0, util_1.getDirectories)(parentDirectory);
        for (const dir of subDir) {
            if (await isConfigPresent(path_1.default.join(parentDirectory, dir))) {
                return true;
            }
        }
        return false;
    }
    async function updateSkillManifest() {
        var _a, _b, _c;
        const manifestPath = path_1.default.join(skillPackagePath, constants_1.Constants.SkillManifestFileName);
        const manifestObj = await (0, util_1.readJsonFile)(manifestPath);
        if (!((_b = (_a = manifestObj === null || manifestObj === void 0 ? void 0 : manifestObj.manifest) === null || _a === void 0 ? void 0 : _a.apis) === null || _b === void 0 ? void 0 : _b.custom)) {
            return;
        }
        const existingDialogManagers = ((_c = manifestObj.manifest.apis.custom.dialogManagement) === null || _c === void 0 ? void 0 : _c.dialogManagers) || [];
        const hasAlexaConversations = existingDialogManagers.find((dialogManager) => (dialogManager === null || dialogManager === void 0 ? void 0 : dialogManager.type) === "AMAZON.Conversations");
        const newDialogManagers = hasAlexaConversations ? existingDialogManagers : [...existingDialogManagers, { type: "AMAZON.Conversations" }];
        manifestObj.manifest.apis.custom = {
            ...manifestObj.manifest.apis.custom,
            ...{
                dialogManagement: {
                    ...(manifestObj.manifest.apis.custom.dialogManagement || {}),
                    dialogManagers: newDialogManagers,
                },
            },
        };
        const updatedManifest = JSON.stringify(manifestObj);
        await fs_extra_1.default.writeFile(manifestPath, updatedManifest);
    }
    function synthesizeInteractionModels(sync) {
        var _a;
        const groupedByLocale = {};
        project.external.forEach((pkg) => {
            var _a;
            return (_a = pkg.interactionModels) === null || _a === void 0 ? void 0 : _a.forEach((im) => {
                if (groupedByLocale[im.locale]) {
                    groupedByLocale[im.locale].push(im.file);
                }
                else {
                    groupedByLocale[im.locale] = [im.file];
                }
            });
        });
        const generatedInteractionModels = project.generateInteractionModels();
        const tasks = (_a = project.source.interactionModels) === null || _a === void 0 ? void 0 : _a.map((im) => sync ? synthesizeInteractionModelSync(im) : synthesizeInteractionModel(im));
        if (!sync) {
            if (tasks) {
                return Promise.all(tasks);
            }
            return Promise.resolve(undefined);
        }
        function synthesizeInteractionModelSync(im) {
            const sourceUri = im.file;
            const interactionModel = (0, util_1.readJsonFileSync)(sourceUri);
            if (interactionModel === undefined) {
                throw new Error(`file not found: '${im.file}'`);
            }
            const { slotTypes, slotTypeIndex } = getSlotTypes(interactionModel);
            if (im.locale in groupedByLocale) {
                const dependencyInteractionModels = groupedByLocale[im.locale].map((uri) => ({
                    uri,
                    interactionModel: (0, util_1.readJsonFileSync)(uri),
                }));
                copyDependencyInteractionModelContent(sourceUri, slotTypes, slotTypeIndex, dependencyInteractionModels);
            }
            const generatedInteractionModel = generatedInteractionModels.get(im.locale);
            const outputInteractionModel = generatedInteractionModel !== undefined
                ? interaction_model_merger_1.InteractionModelMerger.INSTANCE.mergeInteractionModels(interactionModel, generatedInteractionModel)
                : interactionModel;
            const outputFile = path_1.default.join(interactionModelsPath, `${im.locale}.json`);
            fs_extra_1.default.writeFileSync(outputFile, JSON.stringify(outputInteractionModel, null, 2));
        }
        async function synthesizeInteractionModel(im) {
            const sourceUri = im.file;
            const interactionModel = await (0, util_1.readJsonFile)(sourceUri);
            if (interactionModel === undefined) {
                throw new Error(`file not found: '${im.file}'`);
            }
            const { slotTypes, slotTypeIndex } = getSlotTypes(interactionModel);
            if (im.locale in groupedByLocale) {
                const dependencyInteractionModels = await Promise.all(groupedByLocale[im.locale].map((uri) => (0, util_1.readJsonFile)(uri).then((interactionModel) => ({
                    uri,
                    interactionModel,
                }))));
                copyDependencyInteractionModelContent(sourceUri, slotTypes, slotTypeIndex, dependencyInteractionModels);
            }
            const generatedInteractionModel = generatedInteractionModels.get(ast_1.Locale.toUnderscoreLocale(im.locale));
            const outputInteractionModel = generatedInteractionModel !== undefined
                ? interaction_model_merger_1.InteractionModelMerger.INSTANCE.mergeInteractionModels(interactionModel, generatedInteractionModel)
                : interactionModel;
            const outputFile = path_1.default.join(interactionModelsPath, `${im.locale}.json`);
            await fs_extra_1.default.writeFile(outputFile, JSON.stringify(outputInteractionModel, null, 2));
        }
        function getSlotTypes(interactionModel) {
            var _a;
            const slotTypes = (_a = interactionModel === null || interactionModel === void 0 ? void 0 : interactionModel.interactionModel.languageModel.types) !== null && _a !== void 0 ? _a : [];
            if ((interactionModel === null || interactionModel === void 0 ? void 0 : interactionModel.interactionModel.languageModel.types) === undefined) {
                interactionModel.interactionModel.languageModel.types = slotTypes;
            }
            const slotTypeIndex = slotTypes.map((t) => ({ [t.name]: t })).reduce((a, b) => ({ ...a, ...b }), {});
            return { slotTypes, slotTypeIndex };
        }
        // copies interaction model content from dependencies into the interaction model we ultimately write to disk.
        // for now, we only copy in slot type data
        function copyDependencyInteractionModelContent(sourceUri, slotTypes, slotTypeIndex, dependencyInteractionModels) {
            dependencyInteractionModels.forEach((dependency) => {
                var _a, _b;
                const dependencyInteractonModel = dependency.interactionModel;
                const dependencyUri = dependency.uri;
                (_b = (_a = dependencyInteractonModel === null || dependencyInteractonModel === void 0 ? void 0 : dependencyInteractonModel.interactionModel.languageModel) === null || _a === void 0 ? void 0 : _a.types) === null || _b === void 0 ? void 0 : _b.forEach((dependencySlotType) => {
                    const sourceSlotType = slotTypeIndex === null || slotTypeIndex === void 0 ? void 0 : slotTypeIndex[dependencySlotType.name];
                    if (sourceSlotType === undefined) {
                        slotTypeIndex[dependencySlotType.name] = dependencySlotType;
                        slotTypes.push(dependencySlotType);
                    }
                    else {
                        if (sourceSlotType.valueSupplier !== dependencySlotType.valueSupplier) {
                            throw new Error(`mismatched Slot Type 'valueSuppler' for Slot Type '${sourceSlotType.name}'. Received '${sourceSlotType.valueSupplier}' in '${sourceUri}', but got '${dependencySlotType.valueSupplier}' in '${dependencyUri}'.`);
                        }
                        if (sourceSlotType.values === undefined) {
                            sourceSlotType.values = dependencySlotType.values;
                        }
                        else if (dependencySlotType.values !== undefined) {
                            const sourceSlotTypeIndex = sourceSlotType.values
                                .map((v) => ({
                                [v.name.value]: v,
                            }))
                                .reduce((a, b) => ({ ...a, ...b }), {});
                            for (const dependencySlotTypeValue of dependencySlotType.values) {
                                const sourceSlotTypeValue = sourceSlotTypeIndex[dependencySlotTypeValue.name.value];
                                if (sourceSlotTypeValue === undefined) {
                                    sourceSlotTypeIndex[dependencySlotTypeValue.name.value] = dependencySlotTypeValue;
                                    sourceSlotType.values.push(dependencySlotTypeValue);
                                }
                                else {
                                    if (sourceSlotTypeValue.id === undefined) {
                                        sourceSlotTypeValue.id = dependencySlotTypeValue.id;
                                    }
                                    else if (dependencySlotTypeValue.id !== undefined && sourceSlotTypeValue.id !== dependencySlotTypeValue.id) {
                                        throw new Error(`mismatched SlotTypeValue ID '${sourceSlotTypeValue.id}' and '${dependencySlotTypeValue.id}' for SlotTypeValue with name '${sourceSlotTypeValue.name.value}'.`);
                                    }
                                    if (sourceSlotTypeValue.name.synonyms === undefined) {
                                        sourceSlotTypeValue.name.synonyms = dependencySlotTypeValue.name.synonyms;
                                    }
                                    else if (dependencySlotTypeValue.name.synonyms !== undefined) {
                                        sourceSlotTypeValue.name.synonyms = Array.from(new Set([...sourceSlotTypeValue.name.synonyms, ...dependencySlotTypeValue.name.synonyms]));
                                    }
                                }
                            }
                        }
                    }
                });
            });
        }
    }
    function copyTasksSync() {
        copySrcSync(constants_1.Constants.TasksFolderName, tasksPath);
    }
    async function copyTasks() {
        await copySrc(constants_1.Constants.TasksFolderName, tasksPath);
    }
    function copyAssetsSync() {
        copySrcSync(constants_1.Constants.AssetsFolderName, assetsPath);
    }
    async function copyAssets() {
        await copySrc(constants_1.Constants.AssetsFolderName, assetsPath);
    }
    function copyIspSync() {
        copySrcSync(constants_1.Constants.InSkillPurchaseFolderName, ispPath);
    }
    async function copyIsp() {
        await copySrc(constants_1.Constants.InSkillPurchaseFolderName, ispPath);
    }
    function copyDataStorePackagesSync() {
        copySrcSync(constants_1.Constants.DataStorePackagesFolderName, dataStorePackagesPath);
    }
    async function copyDataStorePackages() {
        await copySrc(constants_1.Constants.DataStorePackagesFolderName, dataStorePackagesPath);
    }
    function copySrcSync(src, build) {
        var _a;
        const srcPath = path_1.default.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, src);
        if (fs_extra_1.default.pathExistsSync(srcPath)) {
            fs_extra_1.default.copySync(srcPath, build);
        }
    }
    async function copySrc(src, build) {
        var _a;
        const srcPath = path_1.default.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, src);
        if (await fs_extra_1.default.pathExists(srcPath)) {
            await fs_extra_1.default.copy(srcPath, build);
        }
    }
    async function copyResponseTemplates() {
        var _a;
        await Promise.all(((_a = project.responseTemplates) === null || _a === void 0 ? void 0 : _a.map(async (responseTemplate) => {
            const location = path_1.default.join(responseTemplate.isDisplay() ? displayPath : promptsPath, responseTemplate.name);
            await fs_extra_1.default.mkdir(location, { recursive: true });
            await fs_extra_1.default.copy(responseTemplate.templateUri, location);
        })) || []);
    }
    function copyResponseTemplatesSync() {
        var _a;
        (_a = project.responseTemplates) === null || _a === void 0 ? void 0 : _a.forEach((responseTemplate) => {
            const location = path_1.default.join(responseTemplate.isDisplay() ? displayPath : promptsPath, responseTemplate.name);
            fs_extra_1.default.mkdirSync(location, { recursive: true });
            fs_extra_1.default.copySync(responseTemplate.templateUri, location);
        });
    }
}
function getBundlePaths(project, props) {
    var _a;
    const outDir = (_a = props === null || props === void 0 ? void 0 : props.outDir) !== null && _a !== void 0 ? _a : project.config.outDir;
    const bundleOutputDir = path_1.default.isAbsolute(outDir) ? outDir : path_1.default.join(project.config.rootDir, outDir);
    const skillPackagePath = path_1.default.join(bundleOutputDir, constants_1.Constants.SkillPackageFolderName);
    const dependenciesPath = path_1.default.join(skillPackagePath, constants_1.Constants.DependenciesFolderName);
    const conversationsPath = path_1.default.join(skillPackagePath, constants_1.Constants.ConversationsFolderName);
    const promptsPath = path_1.default.join(skillPackagePath, constants_1.Constants.ResponseFolderName, constants_1.Constants.PromptsFolderName);
    const displayPath = path_1.default.join(skillPackagePath, constants_1.Constants.ResponseFolderName, constants_1.Constants.DisplayFolderName);
    const tasksPath = path_1.default.join(skillPackagePath, constants_1.Constants.TasksFolderName);
    const assetsPath = path_1.default.join(skillPackagePath, constants_1.Constants.AssetsFolderName);
    const dataStorePackagesPath = path_1.default.join(skillPackagePath, constants_1.Constants.DataStorePackagesFolderName);
    const ispPath = path_1.default.join(skillPackagePath, constants_1.Constants.InSkillPurchaseFolderName);
    const interactionModelsPath = path_1.default.join(skillPackagePath, constants_1.Constants.InteractionsModelFolderName, constants_1.Constants.CustomFolderName);
    return {
        skillPackagePath,
        conversationsPath,
        dataStorePackagesPath,
        dependenciesPath,
        promptsPath,
        displayPath,
        interactionModelsPath,
        tasksPath,
        assetsPath,
        ispPath,
    };
}
//# sourceMappingURL=data:application/json;base64,