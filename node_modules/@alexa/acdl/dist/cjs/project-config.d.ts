import { AskPackageConfig, ProjectVersion } from "./package";
import { Project } from "./project";
/**
 * Partial interface for the `ask-resources.json` file.
 *
 * @see https://github.com/alexa/ask-cli/blob/develop/docs/concepts/Alexa-Skill-Project-Definition.md#project-config-for-resources-management
 */
export interface AskResources {
    profiles: {
        [profileName: string]: {
            skillMetadata: {
                /**
                 * Path to the skill package.
                 */
                src: string;
            };
        };
    };
}
/**
 * Configuration of an Alexa Conversations Project.
 */
export interface ProjectConfig extends AskPackageConfig {
    /**
     * Root directory of the Project.
     */
    rootDir: string;
    /**
     * Root of the source directory (containing `interactionModels/` and `response/prompts/` directories).
     *
     * @default - defaults to the Project `rootDir`.
     */
    sourceRootDir?: string;
    /**
     * Internal flag to enable behavior for various versions of the Project.
     *
     * @default Latest
     */
    projectVersion: ProjectVersion;
}
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
export declare function loadProjectConfigSync(rootDir?: string, profile?: string): ProjectConfig;
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
export declare function loadProjectConfig(rootDir?: string, profile?: string): Promise<ProjectConfig>;
/**
 * Gets a project corresponding to ASKIR for validation. The ASKIRCompilerService can call this.
 * If the project is a UI project it will be transformed to the version that can be compiled
 * in the frontend/handled in the backend.
 * @param locale locale to load the project
 * @param rootDir root of the project
 * @returnsa project corresponding to ASKIR for validation. The ASKIRCompilerService can call this
 */
export declare function loadASKIRProject(locale: string, rootDir?: string): Promise<Project>;
//# sourceMappingURL=project-config.d.ts.map