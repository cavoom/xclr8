"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeLexicalScopeNode = exports.mergeLexicalScope = exports.computeLexicalScope = exports.emptyLexicalScope = void 0;
const immutable_1 = __importDefault(require("immutable"));
function emptyLexicalScope() {
    return immutable_1.default.Map();
}
exports.emptyLexicalScope = emptyLexicalScope;
/**
 * Computes the lexical scope for an array of named expressions.
 */
function computeLexicalScope(expressions) {
    var _a;
    return ((_a = expressions === null || expressions === void 0 ? void 0 : expressions.map((expr) => {
        var _a;
        return ((_a = expr.name) === null || _a === void 0 ? void 0 : _a.name)
            ? immutable_1.default.Map([[expr.name.name, expr]])
            : immutable_1.default.Map();
    }).reduce(mergeLexicalScope, emptyLexicalScope())) !== null && _a !== void 0 ? _a : emptyLexicalScope());
}
exports.computeLexicalScope = computeLexicalScope;
function mergeLexicalScope(a, b) {
    return a.mergeWith(mergeLexicalScopeNode, b);
}
exports.mergeLexicalScope = mergeLexicalScope;
function mergeLexicalScopeNode(a, b) {
    return a === undefined && b === undefined
        ? undefined
        : a === undefined
            ? b
            : b === undefined
                ? a
                : Array.isArray(a) && Array.isArray(b)
                    ? a.concat(b)
                    : Array.isArray(a)
                        ? [...a, b]
                        : Array.isArray(b)
                            ? [a, ...b]
                            : [a, b];
}
exports.mergeLexicalScopeNode = mergeLexicalScopeNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV4aWNhbC1zY29wZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sZXhpY2FsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDBEQUFrQztBQVNsQyxTQUFnQixpQkFBaUI7SUFDL0IsT0FBTyxtQkFBUyxDQUFDLEdBQUcsRUFBNkMsQ0FBQztBQUNwRSxDQUFDO0FBRkQsOENBRUM7QUFJRDs7R0FFRztBQUNILFNBQWdCLG1CQUFtQixDQUFDLFdBQTZDOztJQUMvRSxPQUFPLENBQ0wsTUFBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQ1AsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7O1FBQ2IsT0FBQSxDQUFBLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsSUFBSTtZQUNiLENBQUMsQ0FBQyxtQkFBUyxDQUFDLEdBQUcsQ0FBNEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ2hHLENBQUMsQ0FBQyxtQkFBUyxDQUFDLEdBQUcsRUFBNkMsQ0FBQTtLQUFBLEVBRS9ELE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLG1DQUFJLGlCQUFpQixFQUFFLENBQ3pFLENBQUM7QUFDSixDQUFDO0FBVkQsa0RBVUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FBQyxDQUFlLEVBQUUsQ0FBZTtJQUNoRSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUZELDhDQUVDO0FBRUQsU0FBZ0IscUJBQXFCLENBQUMsQ0FBb0MsRUFBRSxDQUFvQztJQUM5RyxPQUFPLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLFNBQVM7UUFDdkMsQ0FBQyxDQUFDLFNBQVM7UUFDWCxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVM7WUFDakIsQ0FBQyxDQUFDLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVM7Z0JBQ2pCLENBQUMsQ0FBQyxDQUFDO2dCQUNILENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUN0QyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO3dCQUNsQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFhLENBQUM7d0JBQ3ZCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzs0QkFDbEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDOzRCQUNYLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUM7QUFkRCxzREFjQyJ9