import * as ask from "./ast";
import { SourceFile } from "./source-file";
import { InteractionModel } from "./interaction-model";
import { Locale } from "./ast";
/**
 * Represents the `package.json` file of a module.
 */
export interface PackageJson {
    /**
     * Name of the package.
     */
    name: string;
    /**
     * Version of the package.
     */
    version: string;
    /**
     * Optional description of the package.
     */
    description?: string;
    /**
     * Alexa Skills Kit Package Config.
     */
    ask?: AskPackageConfig;
}
/**
 * Represents an ASK Package.
 */
export interface AskPackage {
    /**
     * Configuration of the ASK Package.
     */
    config?: AskPackageJson;
    /**
     * ASKIR Modules contained within the Package.
     */
    modules: SourceFile<ask.Module | undefined>[];
    /**
     * Response templates found in this package.
     *
     * These are files found within `response/prompts` and `response/display`.
     *
     * @version 1.0.0-beta1
     */
    responseTemplates?: ask.ResponseTemplate[];
    /**
     * Slot Types loaded from an Interaction Model JSON file contained within this Package.
     *
     * @version 1.0.0-beta1
     */
    slotTypes?: ask.SlotType[];
    /**
     * Interaction models' files.
     *
     * @version 1.0.0-beta1
     */
    interactionModels?: InteractionModelFile[];
}
/**
 * An ASK package.json file - one that contains an `ask` section for this package's config.
 */
export interface AskPackageJson extends PackageJson {
    /**
     * Alexa Skills Kit Package Config.
     */
    ask?: AskPackageConfig;
}
/**
 * Configuration of an Alexa Conversations package.
 */
export interface AskPackageConfig {
    /**
     * Name of the Project.
     */
    name?: string;
    /**
     * Description of the Project.
     */
    description?: string;
    /**
     * Path to scan for source ACDL and ASIR files.
     */
    srcDir: string;
    /**
     * Directory to write compiler outputs.
     *
     * @default build // TODO: is defaulting to `build` ok? What about `dist`, `.ask` or `lib`?
     */
    outDir: string;
    /**
     * Include a source map.
     */
    sourceMap?: boolean;
    /**
     * FQN of the main Skill entrypoint.
     *
     * Leave it blank for libraries.
     *
     * @default - undefined
     */
    skill?: string;
    /**
     * Internal flag to enable behavior for various versions of the Project.
     *
     * @default Latest
     */
    projectVersion: ProjectVersion;
    /**
     * Flag to set if this package is a library.
     *
     * @default - false
     */
    library?: boolean;
}
/**
 * Enum for specifying the version of an ASK Project.
 */
export declare enum ProjectVersion {
    /**
     * Beta 1 project version requires no package.json - everything is driven by `ask-resources.json` or file system convention.
     */
    Beta1 = "beta1",
    /**
     * Beta 2 project is a standard NPM package driven by `package.json` or `ask.json`. Everything is driven by configuration.
     */
    Beta2 = "beta2",
    SingleFile = "single",
    Latest = "beta2"
}
export interface InteractionModelFile {
    /**
     * Absolute file path to the Interaction Model.
     */
    file: string;
    /**
     * Locale of the Interaction Model as parsed from the file name, e.g. `en-US.json`.
     */
    locale: Locale;
}
/**
 * Default directory to synthesize ASKIR JSON files and other assets to during compilation.
 */
export declare const DefaultBuildDir = "build";
/**
 * Default directory relative to the project root to look for ACDL files.
 */
export declare const DefaultInclude = "src";
/**
 * Load a package's modules from the file system.
 *
 * package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param rootDir root directory of the package
 * @param config optional configuration for the package - it will be loaded from the file system if not provided.
 * @param isSrc set to true if this is a source package, false otherwise
 */
export declare function loadPackageSync(rootDir: string, config: AskPackageJson | undefined, isSrc: boolean): AskPackage | undefined;
/**
 * Load a package's modules from the file system.
 *
 * package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param rootDir root directory of the package
 * @param config optional configuration for the package - it will be loaded from the file system if not provided.
 * @param isSrc set to true if this is a source package, false otherwise
 */
export declare function loadPackage(rootDir: string, config: AskPackageJson | undefined, isSrc: boolean): Promise<AskPackage | undefined>;
/**
 * Loads a package config from a directory.
 *
 * A package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param dir root directory of the package to load.
 */
export declare function loadPackageConfigSync(dir: string): AskPackageJson | undefined;
/**
 * Loads a package config from a directory.
 *
 * A package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param dir root directory of the package to load.
 */
export declare function loadPackageConfig(dir: string): Promise<AskPackageJson | undefined>;
/**
 * Load ACDL and ASK Module source directory.
 *
 * @param baseDir directory to recursively scan
 */
export declare function loadSourceDirectorySync(baseDir: string): SourceFile<ask.Module | undefined>[];
/**
 * Load ACDL and ASK Module source directory.
 *
 * @param baseDir directory to recursively scan
 */
export declare function loadSourceDirectory(baseDir: string): Promise<SourceFile<ask.Module | undefined>[]>;
/**
 * Load ASKIR folders from a package bundled within the `lib/` folder.
 *
 * @param name name of the package
 * @returns the bundled ASK Package.
 */
export declare function loadBundledPackageSync(name: string): AskPackage;
/**
 * Load ASKIR folders from a package bundled within the `lib/` folder.
 *
 * @param name name of the package
 * @returns the bundled ASK Package.
 */
export declare function loadBundledPackage(name: string): Promise<AskPackage>;
/**
 * Load the Project's prompts from `responses/prompts`.
 *
 * @param config project configuration
 */
export declare function loadResponseTemplatesSync(dir: string): ask.ResponseTemplate[] | undefined;
/**
 * Load the Project's prompts from `responses/prompts`.
 *
 * @param config project configuration
 */
export declare function loadResponseTemplates(dir: string): Promise<ask.ResponseTemplate[] | undefined>;
/**
 * Synchronously Load Interaction Models' file path.
 *
 * @param config project configuration
 */
export declare function getInteractionModelFilesSync(dir: string): InteractionModelFile[];
/**
 * Asynchronously Load Interaction Models' file path.
 *
 * @param config project configuration
 */
export declare function getInteractionModelFiles(dir: string): Promise<InteractionModelFile[]>;
/**
 * Synchronously load the JSON from the project's interaction model files into a locale to model map.
 *
 * @param interactionModelFiles the interaction model files to load
 */
export declare function loadInteractionModelsContentSync(interactionModelsFiles: InteractionModelFile[]): Map<ask.Locale, import("ask-smapi-model").v1.skill.interactionModel.InteractionModelData>;
/**
 * Asynchronously load the JSON from the project's interaction model files into a locale to model map.
 *
 * @param interactionModelFiles the interaction model files to load
 */
export declare function loadInteractionModelsContent(interactionModelsFiles: InteractionModelFile[]): Promise<Map<Locale, InteractionModel>>;
/**
 * Load slot types from a project's Interaction Models.
 *
 * @param models a map of locales to interaction model json
 */
export declare function loadSlotTypes(models: Map<Locale, InteractionModel>): ask.SlotType[] | undefined;
/**
 * Scan all folders in a directory for ask packages and return all their Module files.
 *
 * @param dir directory to scan for packages.
 */
export declare function scanPackagesSync(dir: string): AskPackage[];
/**
 * Scan all folders in a directory for ask packages and return all their Module files.
 *
 * @param dir directory to scan for packages.
 */
export declare function scanPackages(dir: string): Promise<AskPackage[]>;
/**
 * Loads generated interaction model modules from the directory if it is a source
 * package and not a library.
 *
 * @param dir the directory to mock the source location of the modules.
 * @param imFiles the interaction model files to generate.
 * @param isSrc whether the package contains source or external modules
 * @param isLibrary whether the package is a NPM library.
 * @returns the generated interaction model modules.
 */
export declare function loadGeneratedInteractionModelModulesSync(dir: string, imFiles: InteractionModelFile[], isSrc: boolean, isLibrary: boolean | undefined): SourceFile<ask.Module>[];
/**
 * Loads generated interaction model modules from the directory if it is a source
 * package and not a library.
 *
 * @param dir the directory to mock the source location of the modules.
 * @param imFiles the interaction model files to generate.
 * @param isSrc whether the package contains source or external modules
 * @param isLibrary whether the package is a NPM library.
 * @returns the generated interaction model modules.
 */
export declare function loadGeneratedInteractionModelModules(dir: string, imFiles: InteractionModelFile[], isSrc: boolean, isLibrary: boolean | undefined): Promise<SourceFile<ask.Module>[]>;
//# sourceMappingURL=package.d.ts.map