/* eslint-disable no-console */
import path from "path";
import fs from "fs";
import { validateProject } from "../validate";
import { bundleProject, zipBundleOutput } from "../bundle";
import { synthesizeProject } from "../synthesize";
import { loadProjectConfig } from "../project-config";
import { loadProject } from "../project";
import { hasTerminalErrors, logProjectWarnings } from "../error";
import { SmapiClient } from "../smapi";
export class CompileZipAndDeploy {
    /**
     * Compiles skill or reusable component. Will also zip the compiled ASKIR skill output if the
     * command is "package" or "deploy" and deploy the skill if the command is deploy
     * @param skipValidation true to skip validation
     * @param profileName profile name from a call to ProfileNameGetter.getProfileName
     * @param skillId skill id used if command is deploy
     * @param command compilation command which is either "" "deploy". "package" or "compile"
     */
    static async compileZipAndDeploy(skipValidation, profileName, skillId, command, askCliConfig) {
        const projectConfig = await loadProjectConfig(process.cwd(), profileName);
        const outDirPath = path.join(projectConfig.rootDir, projectConfig.outDir);
        const skillPackageOutputDir = path.join(outDirPath, "skill-package");
        // Remove the old generated contents
        CompileZipAndDeploy.cleanDirectory(skillPackageOutputDir);
        const project = await loadProject(projectConfig);
        const isSkill = command === "package" || command === "deploy" || project.isSkill();
        const sourceDirectory = project.config.sourceRootDir || project.config.srcDir || "";
        const absSourceDirectory = path.isAbsolute(sourceDirectory) ? sourceDirectory : path.join(process.cwd(), sourceDirectory);
        console.log(`************ Compiling ${isSkill ? "Skill" : "Module"} ************`);
        console.log(`${isSkill ? "Skill package" : "Source"} directory: ${absSourceDirectory}`);
        const errors = CompileZipAndDeploy.validateAndTerminateOnErrors(skipValidation, project, false);
        // isSkill is true for skills typically with a skill-package directory usually packaged with bundleProject
        // A module is typically a reusable component typically packaged with synthesizeProject
        if (isSkill) {
            const bundleProjectOutput = await bundleProject(project);
            if (!skipValidation) {
                CompileZipAndDeploy.logAndTerminateOnError(bundleProjectOutput.errors);
            }
            // The "package" command will zip the contents of the skill, deploy will both zip and deploy
            if (command === "deploy" || command === "package") {
                const zippedBundleOutput = await zipBundleOutput(bundleProjectOutput);
                if (command === "deploy") {
                    if (!zippedBundleOutput.skillPackageZip) {
                        throw new Error("Unable to find zip to deploy.");
                    }
                    await CompileZipAndDeploy.deploy(profileName, skillId, zippedBundleOutput.skillPackageZip, askCliConfig);
                }
            }
        }
        else {
            await synthesizeProject(project);
        }
        logProjectWarnings(errors);
        console.log(`Compiled ${isSkill ? "Skill" : "Module"} Artifacts successfully,  the output is saved at ${path.join(process.cwd(), project.config.outDir)}.`);
    }
    static async initSmapi(profileName, askCliConfig) {
        const lwaProfile = askCliConfig.getLwaProfile(profileName);
        return new SmapiClient(lwaProfile);
    }
    /**
     * Removes a directory recursively
     * @param directoryPath path to clean
     */
    static cleanDirectory(directoryPath) {
        if (fs.existsSync(directoryPath)) {
            fs.rmSync(directoryPath, { recursive: true });
        }
    }
    /**
     * Validates the project terminating on error
     * @param skipValidation true if we should skip validations
     * @param project Project loaded with loadProject
     * @param isSkill true when validating a skill, false when validating a reusable component
     */
    static validateAndTerminateOnErrors(skipValidation, project, isSkill) {
        const errors = validateProject(project, isSkill, skipValidation);
        CompileZipAndDeploy.logAndTerminateOnError(errors);
        return errors;
    }
    /**
     *  When there are errors (as opposed to just warnings) log the errors
     *  and terminates the process
     * @param errors errors to check
     */
    static logAndTerminateOnError(errors) {
        if (!hasTerminalErrors(errors)) {
            return;
        }
        throw errors;
    }
    /**
     * Deploys the skill
     * @param profileName profile name
     * @param skillId skill id
     * @param skillPackageZip contents to be deployed
     */
    static async deploy(profileName, skillId, skillPackageZip, askCliConfig) {
        var _a;
        const smapi = await CompileZipAndDeploy.initSmapi(profileName, askCliConfig);
        const location = await smapi.createUploadUrl();
        await smapi.uploadSkillPackage(skillPackageZip, location);
        try {
            await smapi.importSkillPackage(skillId, location);
        }
        catch (err) {
            if (typeof ((_a = err.response) === null || _a === void 0 ? void 0 : _a.message) === "string") {
                // catch errors thrown by SMAPI
                throw new Error(err.response.message);
            }
            throw err;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGlsZVppcEFuZERlcGxveS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2MvQ29tcGlsZVppcEFuZERlcGxveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFDL0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzVDLE9BQU8sRUFBQyxhQUFhLEVBQUUsZUFBZSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3pELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsV0FBVyxFQUFVLE1BQU0sWUFBWSxDQUFDO0FBQ2hELE9BQU8sRUFBbUIsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQWEsTUFBTSxVQUFVLENBQUM7QUFDN0YsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUdyQyxNQUFNLE9BQU8sbUJBQW1CO0lBQzlCOzs7Ozs7O09BT0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUNyQyxjQUF1QixFQUN2QixXQUFtQixFQUNuQixPQUFlLEVBQ2YsT0FBZSxFQUNmLFlBQTBCO1FBRTFCLE1BQU0sYUFBYSxHQUFHLE1BQU0saUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUVyRSxvQ0FB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