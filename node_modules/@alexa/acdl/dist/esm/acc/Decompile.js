const path = require("path");
import { validateProject } from "../validate";
import { loadProjectConfigSync } from "../project-config";
import { loadProjectSync } from "../project";
import { logProjectErrors } from "../error";
import { decompileProject, getDecompiledOutFilePath } from "../decompile";
import { getUISkillInformation, transformUIProjectForDecompile } from "../transformUIProject";
export class Decompile {
    static async decompile(rootDir, outDir, profile) {
        const project = loadProjectSync(loadProjectConfigSync(rootDir, profile));
        console.info("************ Decompiling Skill ************");
        console.info(`Skill package directory: ${project.config.sourceRootDir}`);
        // TODO: set isSkill to true when brazil pkg get updated with the fix
        const errors = validateProject(project, true);
        // Traditionally only Syntax errors block decompilation to enable addressing any issues in acdl instead of askir
        // A UI skill with multiple locales must be decompiled with skip-validation currently for the following reasons:
        //   1) transformUIProjectForDecompile is called after validation. Before we move transformUIProjectForDecompile to
        //   before validation we must ensure transformUIProjectForDecompile does not change files in the File System. Changes to files
        //   like the ones done in flattenDirectoryAndChangeFileNames called from transformUIProjectForDecompile must be done
        //   initially in memory and, if validation passes, in the File System.
        //   2) Even if transformUIProjectForDecompile is called before validation there are still a few syntax errors to be investigated
        //   that go away if decompiled with skip-validation and then compiled
        const syntaxErrors = errors.filter((e) => e.code.category === "SyntaxError");
        if (syntaxErrors.length > 0) {
            logProjectErrors(syntaxErrors);
            throw new Error(`Decompilation Failed.`);
        }
        // A UI Skill with multiple locales
        const uiSkillInformation = getUISkillInformation(project.sourceModules);
        let projectToDecompile = project;
        if (uiSkillInformation.isUISkill) {
            projectToDecompile = await transformUIProjectForDecompile(project, uiSkillInformation.localesUsed);
        }
        const files = await decompileProject(projectToDecompile);
        files.forEach((file) => {
            const relativePath = path.relative(process.cwd(), file);
            const outFile = getDecompiledOutFilePath(relativePath, outDir);
            console.info(`${relativePath} => ${outFile}`);
        });
        console.info("Decompiled Skill Artifacts successfully.");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVjb21waWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FjYy9EZWNvbXBpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTdCLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDNUMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDeEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUMzQyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDMUMsT0FBTyxFQUFDLGdCQUFnQixFQUFFLHdCQUF3QixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxxQkFBcUIsRUFBRSw4QkFBOEIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTVGLE1BQU0sT0FBTyxTQUFTO0lBQ3BCLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQWUsRUFBRSxNQUEwQixFQUFFLE9BQWU7UUFDakYsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkNBQTZDLENBQUMsQ0FBQztRQUM1RCxPQUFPLENBQUMsSUFBSSxDQUFDLDRCQUE0QixPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDekUscUVBQXFFO1FBQ3JFLE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFOUMsZ0hBQWdIO1FBQ2hILGdIQUFnSDtRQUNoSCxtSEFBbUg7UUFDbkgsK0hBQStIO1FBQy9ILHFIQUFxSDtRQUNySCx1RUFBdUU7UUFDdkUsaUlBQWlJO1FBQ2pJLHNFQUFzRTtRQUN0RSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxhQUFhLENBQUMsQ0FBQztRQUM3RSxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUMxQztRQUVELG1DQUFtQztRQUNuQyxNQUFNLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN4RSxJQUFJLGtCQUFrQixHQUFHLE9BQU8sQ0FBQztRQUNqQyxJQUFJLGtCQUFrQixDQUFDLFNBQVMsRUFBRTtZQUNoQyxrQkFBa0IsR0FBRyxNQUFNLDhCQUE4QixDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwRztRQUVELE1BQU0sS0FBSyxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDN0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEQsTUFBTSxPQUFPLEdBQUcsd0JBQXdCLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLE9BQU8sT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsMENBQTBDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0YifQ==