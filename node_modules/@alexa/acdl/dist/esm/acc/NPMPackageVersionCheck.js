import * as https from "https";
// eslint-disable-next-line import/no-extraneous-dependencies
import semver from "semver";
/**
 * Rest GET request for NPM registry
 */
const ACDL_NPM_REGISTRY_HTTPS_OPTIONS = {
    hostname: "registry.npmjs.org",
    port: 443,
    path: "/@alexa/acdl/latest",
    method: "GET",
};
/**
 * Checks the version of acc against the latest npm version producing a warning if there is
 * a new patch/minor version or an error following by termination if there is a new major version
 * to prevent backend backwards imcompatible changes that might happen for major versions and inform
 * of improvemnts in minor/patch versions
 */
export class NPMPackageVersionCheck {
    /**
     * Performs the minor/patch and major patch checks mentioned in the class description
     * @param localAccVersion local @alexa/acdl version returned when we do acc --version
     */
    static async Check(localAccVersion) {
        return new Promise((resolve) => {
            const req = https.request(ACDL_NPM_REGISTRY_HTTPS_OPTIONS, (res) => {
                let data = "";
                res.on("data", (chunk) => {
                    data += chunk;
                });
                res.on("end", () => {
                    const latestNpmVersion = JSON.parse(data).version;
                    this.checkMajorVersion(latestNpmVersion, localAccVersion);
                    this.checkMinorAndPatchVersion(latestNpmVersion, localAccVersion);
                    resolve();
                });
            });
            req.on("error", (e) => {
                console.error(e);
                resolve();
            });
            req.end();
        });
    }
    /**
     * Produces an error followed by termination if there is a newer major version
     * @param latestNpmVersion latest npm registry version of @alexa/acdl
     * @param localAccVersion local @alexa/acdl version returned when we do acc --version
     */
    static checkMajorVersion(latestNpmVersion, localAccVersion) {
        if (semver.major(localAccVersion) < semver.major(latestNpmVersion)) {
            throw new Error(`Error: You must use the latest major version of @alexa/acdl (${latestNpmVersion}) to ensure compatibility with the Alexa Conversations infrastructure.\n` +
                ` update to the latest @alexa/acdl using: 'npm install @alexa/acdl@${latestNpmVersion}'`);
        }
    }
    /**
     * Produces a warning if there is a newer minor/patch version
     * @param latestNpmVersion latest npm registry version of @alexa/acdl
     * @param localAccVersion local @alexa/acdl version returned when we do acc --version
     */
    static checkMinorAndPatchVersion(latestNpmVersion, localAccVersion) {
        if (semver.minor(localAccVersion) < semver.minor(latestNpmVersion) ||
            (semver.minor(localAccVersion) === semver.minor(latestNpmVersion) && semver.patch(localAccVersion) < semver.patch(latestNpmVersion))) {
            console.warn(`Warning: There is a new version of acc available (${latestNpmVersion}). Using the latest version might help you discover modeling issues earlier`);
            console.warn(` update to the latest @alexa/acdl using: 'npm install @alexa/acdl@${latestNpmVersion}'`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTlBNUGFja2FnZVZlcnNpb25DaGVjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2MvTlBNUGFja2FnZVZlcnNpb25DaGVjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQiw2REFBNkQ7QUFDN0QsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRTVCOztHQUVHO0FBQ0gsTUFBTSwrQkFBK0IsR0FBRztJQUN0QyxRQUFRLEVBQUUsb0JBQW9CO0lBQzlCLElBQUksRUFBRSxHQUFHO0lBQ1QsSUFBSSxFQUFFLHFCQUFxQjtJQUMzQixNQUFNLEVBQUUsS0FBSztDQUNkLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFDakM7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsZUFBdUI7UUFDL0MsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzdCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsK0JBQStCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDakUsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ3ZCLElBQUksSUFBSSxLQUFLLENBQUM7Z0JBQ2hCLENBQUMsQ0FBQyxDQUFDO2dCQUVILEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtvQkFDakIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQztvQkFDbEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO29CQUMxRCxJQUFJLENBQUMseUJBQXlCLENBQUMsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7b0JBQ2xFLE9BQU8sRUFBRSxDQUFDO2dCQUNaLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFFSCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDO1lBQ0gsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBd0IsRUFBRSxlQUF1QjtRQUNoRixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0VBQWdFLGdCQUFnQiwwRUFBMEU7Z0JBQ3hKLHFFQUFxRSxnQkFBZ0IsR0FBRyxDQUMzRixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxnQkFBd0IsRUFBRSxlQUF1QjtRQUN4RixJQUNFLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztZQUM5RCxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQ3BJO1lBQ0EsT0FBTyxDQUFDLElBQUksQ0FDVixxREFBcUQsZ0JBQWdCLDZFQUE2RSxDQUNuSixDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxxRUFBcUUsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1NBQ3hHO0lBQ0gsQ0FBQztDQUNGIn0=