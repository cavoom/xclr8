import path from "path";
import * as ask from "./ast";
import { AlexaSchema } from "./ast";
import { sanitize, trimScheme } from "./util";
/**
 * Compile a Project to a record of relative build paths to serialized ASK IR files.
 *
 * @param project ACDL project to compile.
 */
export function compileProject(project) {
    const compiledProject = {
        modules: {},
    };
    for (const source of project.sourceModules) {
        const sourcePath = trimScheme(source.uri);
        const relative = path.relative(source.baseDir, sourcePath);
        const relativeDir = path.dirname(relative);
        let fileName = `${path.basename(sourcePath, ".acdl")}`;
        if (!fileName.endsWith(".json")) {
            fileName = `${fileName}.json`;
        }
        const relativeFilePath = path.join(relativeDir, fileName);
        const compiledModule = compileModule(project, source.content);
        compiledProject.modules[relativeFilePath] = compiledModule;
    }
    return compiledProject;
}
/**
 * Compile source to valid ask-module JSON.
 *
 * @param project project containing the source.
 * @param module source module, either an ACDLFile or ask-module.
 * @param validateJsonSchema whether to validate JSON schema or not
 */
export function compileModule(project, module, validateJsonSchema = false) {
    var _a, _b;
    const checker = project.getTypeChecker();
    const moduleUri = checker.getUri(module);
    if (!moduleUri) {
        throw new Error(`Cannot compile a Module when the Project instance doesn't load it.`);
    }
    const compiledModule = {
        schema: "https://amazonalexa.com/ask/2020/12/Module",
        exports: (_a = module.expressions) === null || _a === void 0 ? void 0 : _a.map((e) => {
            var _a;
            return e.kind === "ActionDeclaration" ||
                e.kind === "DialogDeclaration" ||
                e.kind === "EnumDeclaration" ||
                e.kind === "NameDeclaration" ||
                e.kind === "TypeDeclaration"
                ? (_a = e.name) === null || _a === void 0 ? void 0 : _a.name
                : undefined;
        }).filter((s) => s !== undefined),
        expressions: (_b = module.expressions) === null || _b === void 0 ? void 0 : _b.map((expr) => compileExpression(expr, { checker, moduleUri })),
    };
    if (validateJsonSchema) {
        ask.validateModuleSchema(compiledModule);
    }
    return compiledModule;
}
/**
 * Maps an internal AST Expression to its equivalent `@alexa/ask-module-spec` representation.
 *
 * @param data data to serialize
 */
export function compileExpression(data, context) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    const { checker, moduleUri } = context;
    if (data === undefined) {
        return undefined;
    }
    if (Array.isArray(data)) {
        return data.map((item) => compileExpression(item, context));
    }
    if (ask.isNode(data)) {
        if (data.kind === "ActionDeclaration") {
            const expr = {
                kind: "ActionDeclaration",
                name: compileExpression(data.name, context),
                arguments: sanitize(compileExpression(data.arguments, context)),
                returnType: compileExpression(data.returnType, context),
                genericArguments: sanitize(compileExpression(data.genericArguments, context)),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "Annotation") {
            return compileExpression(data.call, context);
        }
        if (data.kind === "ArgumentDeclaration") {
            let type = context.checker.instantiateTypeReference(data.type);
            let defaultExpression = compileExpression(data.defaultExpression, context);
            if (type === undefined) {
                throw resolveTypeToReference(data);
            }
            const expr = {
                name: (_a = data.name) === null || _a === void 0 ? void 0 : _a.name,
                defaultExpression,
                type: compileExpression(type === null || type === void 0 ? void 0 : type.toTypeReference(data), context),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "Argument") {
            const expr = compileExpression(data.value, context);
            return expr;
        }
        if (data.kind === "Call") {
            let action = checker.getApply(data);
            let returnType = (_b = checker.getThing(data)) === null || _b === void 0 ? void 0 : _b.type;
            if (action === undefined || returnType === undefined) {
                throw new Error(`cannot resolve Apply for ${data.kind}`);
            }
            let args;
            if (Array.isArray(data.arguments)) {
                if (action.isType() &&
                    action.getReturnType().isPrimitive() &&
                    data.arguments.length === 1 &&
                    ask.isCall(data.arguments[0].value)) {
                    // handle sub-types of primitives, e.g. CityName("New York")
                    args = data.arguments[0].value.arguments;
                }
                else {
                    const mappings = {};
                    if (action.decl.kind === "Type" && action.decl.isFunctionN() && ((_c = action.decl.declaration) === null || _c === void 0 ? void 0 : _c.kind) === "TypeDeclaration") {
                        // this is a call to an abstract function, we must map its argument names to arg0, arg1, ..., argN
                        (_d = action.decl.getFunctionArgumentDeclarations()) === null || _d === void 0 ? void 0 : _d.forEach((arg, i) => {
                            var _a, _b;
                            if ((_a = arg.name) === null || _a === void 0 ? void 0 : _a.name) {
                                mappings[(_b = arg.name) === null || _b === void 0 ? void 0 : _b.name] = `arg${i}`;
                            }
                        });
                    }
                    args = Object.entries(action.getArguments() || {})
                        .map(([name, arg]) => {
                        var _a;
                        if (name !== undefined) {
                            return {
                                // See comment in "Strip Optional from argument" test in askir.test.ts
                                [(_a = mappings[name]) !== null && _a !== void 0 ? _a : name]: compileExpression(arg.value, { ...context, blockOptionalTypeReferences: true }),
                            };
                        }
                        return {};
                    })
                        .reduce((a, b) => ({ ...a, ...b }), {});
                }
            }
            else if (ask.isListLiteral(data.arguments)) {
                args = data.arguments.items.map((item) => compileExpression(item.item, context));
            }
            else if (ask.isUtterance(data.arguments)) {
                args = data.arguments.text;
            }
            else {
                args = data.arguments;
            }
            const name = action.decl.kind === "Type" &&
                action.decl.isFunction() &&
                ((_e = action.decl.declaration) === null || _e === void 0 ? void 0 : _e.kind) !== "ActionDeclaration" &&
                ((_f = action.decl.declaration) === null || _f === void 0 ? void 0 : _f.kind) !== "DialogDeclaration"
                ? // this call is referencing an action defined as an argument or variable, so we should use its local name.
                    assertNotNull((_g = data.name) === null || _g === void 0 ? void 0 : _g.name, "Call.name must be defined.")
                : // otherwise use the declaration's name (fully qualified name).
                    typeof action.decl.name === "string"
                        ? action.decl.name
                        : (_h = action.decl.name) === null || _h === void 0 ? void 0 : _h.name;
            const serializedCall = {
                kind: "Call",
                name,
                genericArguments: (_j = action.getGenericArguments()) === null || _j === void 0 ? void 0 : _j.map((a) => compileExpression(a === null || a === void 0 ? void 0 : a.toTypeReference(data), context)),
                arguments: sanitize(args),
                type: resolveTypeToReference(data, returnType),
                annotations: compileExpression(data.annotations, context),
            };
            return serializedCall;
        }
        if (data.kind === "Condition") {
            const expr = {
                kind: "Condition",
                when: compileExpression(data.when, context),
                then: sanitize(compileExpression(data.then, context)),
                else: sanitize(compileExpression(data.else, context)),
                type: resolveTypeToReference(data),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "When") {
            return compileExpression(data.expression, context);
        }
        if (data.kind === "Correction") {
            const expr = {
                kind: "Correction",
                actual: sanitize(compileExpression(data.actual, context)),
                expected: sanitize(compileExpression(data.expected, context)),
            };
            return expr;
        }
        if (data.kind === "InteractionDeclaration") {
            const expr = {
                kind: "InteractionDeclaration",
                expressions: compileExpression(data.scope, context),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "DialogDeclaration") {
            // Non reusable dialog must return void otherwise it will not be recognized as a deployable dialog
            // by the backend that returns the error:
            //   The skill does not contain any deployable dialog for locale en_US.
            // That is why we use blockVoid in the returnType compileExpression.
            // The blockVoid in the samples is because the last expression inside the sample must also not be
            // void because the backend will throw a type mismatch
            // error between sample return of nothing and the last expression in the sample (say a response)
            // returning void
            const expr = {
                kind: "DialogDeclaration",
                name: (_k = data.name) === null || _k === void 0 ? void 0 : _k.name,
                arguments: sanitize(compileExpression(data.arguments, context)),
                genericArguments: sanitize(compileExpression(data.genericArguments, context)),
                returnType: compileExpression(data.returnType, { ...context, blockVoid: true }),
                samples: compileExpression(data.samples, { ...context, blockVoid: true }),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "EnumDeclaration") {
            if (((_l = data.name) === null || _l === void 0 ? void 0 : _l.name) === undefined) {
                throw new Error(`name undefined for 'enum'`);
            }
            if (data.items === undefined || data.items.length === 0) {
                throw new Error(`empty enum: '${data.name.name}'`);
            }
            const expr = {
                kind: "EnumDeclaration",
                name: data.name.name,
                items: (_m = data.items) === null || _m === void 0 ? void 0 : _m.map((item) => compileExpression(item, context)),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "EnumItemDeclaration") {
            if (((_o = data.name) === null || _o === void 0 ? void 0 : _o.name) === undefined) {
                throw new Error(`undefined name on enum item '${(_p = data.context.name) === null || _p === void 0 ? void 0 : _p.name}'`);
            }
            const expr = {
                kind: "EnumItemDeclaration",
                name: data.name.name,
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "Name") {
            const name = checker.qualifyName(data, data.name);
            return name;
        }
        if (data.kind === "NameReference") {
            const name = {
                kind: "NameReference",
                name: checker.qualifyName(data, data.name),
                type: resolveTypeToReference(data),
                annotations: compileExpression(data.annotations, context),
            };
            return name;
        }
        if (data.kind === "NameDeclaration") {
            const expr = {
                kind: data.context.kind === "Module"
                    ? "QualifiedNameDeclaration"
                    : ask.isInteractionDeclaration(data.context.context) || ask.isCorrection(data.context.context)
                        ? "InteractionNameDeclaration"
                        : "NameDeclaration",
                name: compileExpression(data.name, context),
                type: resolveTypeToReference(data),
                expression: compileExpression(data.expression, context),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "PropertyReference") {
            const qualifiedName = ask.PropertyReference.tryResolveQualifiedName(data);
            if (checker.lookupQualifiedName(qualifiedName) !== undefined) {
                const name = {
                    kind: "NameReference",
                    name: qualifiedName,
                    type: resolveTypeToReference(data),
                    annotations: compileExpression(data.annotations, context),
                };
                return name;
            }
            const prop = {
                kind: "PropertyReference",
                name: (_q = data.name) === null || _q === void 0 ? void 0 : _q.name,
                expression: compileExpression(data.expression, context),
                type: resolveTypeToReference(data),
                annotations: compileExpression(data.annotations, context),
            };
            return prop;
        }
        if (data.kind === "Sample") {
            const expr = {
                kind: "Sample",
                expressions: compileExpression(data.scope, context),
                type: resolveTypeToReference(data),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "Block") {
            return (_r = data.expressions) === null || _r === void 0 ? void 0 : _r.map((expr) => compileExpression(expr, context));
        }
        if (data.kind === "TypeDeclaration") {
            const expr = {
                kind: "TypeDeclaration",
                name: compileExpression(data.name, context),
                extensions: sanitize(compileExpression(data.extensions, context)),
                genericArguments: sanitize(compileExpression(data.genericArguments, context)),
                properties: (_s = data.properties) === null || _s === void 0 ? void 0 : _s.map((prop) => compileExpression(prop, context)),
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "TypeParameter") {
            const expr = {
                name: compileExpression(data.name, context),
                constraints: sanitize(compileExpression(data.constraints, context)),
            };
            return expr;
        }
        if (data.kind === "TypeProperty") {
            const qualified = checker.qualifyName(data, (_t = data.type) === null || _t === void 0 ? void 0 : _t.name);
            const expr = {
                name: (_u = data.name) === null || _u === void 0 ? void 0 : _u.name,
                type: compileExpression(data.type, context),
                optional: qualified === AlexaSchema.Optional || data.optional === true,
                annotations: compileExpression(data.annotations, context),
            };
            return expr;
        }
        if (data.kind === "TypeReference") {
            return getSerializedTypeReference(data, (type) => {
                var _a;
                if (context.blockVoid && type.isVoid()) {
                    type = checker.nothing;
                }
                if (context.blockOptionalTypeReferences) {
                    while (type === null || type === void 0 ? void 0 : type.isOptional()) {
                        type = assertDefined(data, type === null || type === void 0 ? void 0 : type.getOptionalType());
                    }
                }
                else {
                    // flatten Optionals. Optional<Optional<Optional<T>>> into Optional<T>
                    while ((type === null || type === void 0 ? void 0 : type.isOptional()) && ((_a = type === null || type === void 0 ? void 0 : type.getOptionalType()) === null || _a === void 0 ? void 0 : _a.isOptional())) {
                        type = assertDefined(data, type === null || type === void 0 ? void 0 : type.getOptionalType());
                    }
                }
                return type;
            });
        }
        if (data.kind === "Utterance") {
            return data.text;
        }
    }
    throw new Error(`invalid ask expression: ${data}`);
    function assertNotNull(t, msg) {
        if (t === undefined) {
            throw new Error(msg);
        }
        return t;
    }
    function assertDefined(node, type) {
        var _a, _b;
        if (type === undefined) {
            throw new Error(`could not resolve type of '${node.kind}' expression at ${moduleUri}(${(_a = node === null || node === void 0 ? void 0 : node.loc) === null || _a === void 0 ? void 0 : _a.begin.line},${(_b = node === null || node === void 0 ? void 0 : node.loc) === null || _b === void 0 ? void 0 : _b.begin.character})`);
        }
        return type;
    }
    function getTypeOrThrow(node) {
        return assertDefined(node, checker.getType(node));
    }
    function resolveTypeToReference(node, type = checker.getType(node)) {
        return compileExpression(assertDefined(node, type).toTypeReference(node.context), context);
    }
    /**
     * Retrieves a serialized version of the typeReference with the type optionally transformed
     * @param typeReference Type reference node
     * @param typeTransformer optional transformer for the type
     * @returns a serialized version of the typeReference with the type optionally transformed
     */
    function getSerializedTypeReference(typeReference, typeTransformer = (type) => type) {
        let type = getTypeOrThrow(typeReference);
        const typeRef = typeTransformer(type).toTypeReference(typeReference);
        const expr = {
            kind: "TypeReference",
            name: compileExpression(typeRef.name, context),
            arguments: sanitize(compileExpression(typeRef.arguments, context)),
            annotations: compileExpression(typeReference.annotations, context),
        };
        return expr;
    }
}
//# sourceMappingURL=data:application/json;base64,