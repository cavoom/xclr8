import path from "path";
import { loadPackageConfig, ProjectVersion, loadPackageConfigSync } from "./package";
import { loadProject } from "./project";
import { getUISkillInformation, transformUIProject } from "./transformUIProject";
import { exists, existsSync, readJsonFile, readJsonFileSync } from "./util";
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
export function loadProjectConfigSync(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = loadPackageConfigSync(rootDir);
    if (pkgJson !== undefined) {
        return getProjectConfig(rootDir, pkgJson);
    }
    const askResources = readJsonFileSync(path.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if (existsSync(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
export async function loadProjectConfig(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = await loadPackageConfig(rootDir);
    if (pkgJson !== undefined) {
        return getProjectConfig(rootDir, pkgJson);
    }
    const askResources = await readJsonFile(path.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if (await exists(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
/**
 * Gets a project corresponding to ASKIR for validation. The ASKIRCompilerService can call this.
 * If the project is a UI project it will be transformed to the version that can be compiled
 * in the frontend/handled in the backend.
 * @param locale locale to load the project
 * @param rootDir root of the project
 * @returnsa project corresponding to ASKIR for validation. The ASKIRCompilerService can call this
 */
export async function loadASKIRProject(locale, rootDir = process.cwd()) {
    let projectConfig = undefined;
    const pkgJson = await loadPackageConfig(rootDir);
    if (pkgJson !== undefined) {
        projectConfig = getProjectConfig(rootDir, pkgJson);
    }
    if (!projectConfig) {
        const skillPackagePath = path.join(rootDir, "skill-package");
        const skillPackageConversationsPath = path.join(skillPackagePath, "conversations");
        const conversationsPath = path.join(rootDir, "conversations");
        let packageRootDir = undefined;
        if ((await exists(skillPackagePath)) && (await exists(skillPackageConversationsPath))) {
            packageRootDir = skillPackagePath;
        }
        else if (await exists(conversationsPath)) {
            packageRootDir = rootDir;
        }
        if (!packageRootDir) {
            throw new Error("Either package.json with ask section, ./skill-package/conversations or ./conversations folder must be present");
        }
        projectConfig = {
            srcDir: "conversations/" + locale + "/",
            name: "in-memory",
            rootDir: packageRootDir,
            outDir: "build",
            projectVersion: ProjectVersion.Beta1,
        };
    }
    let project = await loadProject(projectConfig, true);
    const uiSkillInformation = await getUISkillInformation(project.sourceModules);
    if (!uiSkillInformation.isUISkill) {
        throw new Error("This is not a UI skill");
    }
    if (!new Set(uiSkillInformation.localesUsed).has(locale)) {
        throw new Error(`Locale ${locale} not found in skill locales: ${Array.from(uiSkillInformation.localesUsed.keys()).join(",")}`);
    }
    return transformUIProject(project, uiSkillInformation.localesUsed, false);
}
function getProjectConfig(rootDir, packageConfig) {
    return {
        ...packageConfig.ask,
        name: packageConfig.name,
        rootDir,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvamVjdC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBbUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLHFCQUFxQixFQUFjLE1BQU0sV0FBVyxDQUFDO0FBQ2xJLE9BQU8sRUFBQyxXQUFXLEVBQVUsTUFBTSxXQUFXLENBQUM7QUFDL0MsT0FBTyxFQUFDLHFCQUFxQixFQUFFLGtCQUFrQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDL0UsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFDLE1BQU0sUUFBUSxDQUFDO0FBMEMxRTs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFNLFVBQVUscUJBQXFCLENBQUMsVUFBa0IsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFVBQWtCLFNBQVM7O0lBQ2hHLE1BQU0sT0FBTyxHQUFHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRS9DLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUN6QixPQUFPLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUMzQztJQUNELE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUF3QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7SUFDdkcsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFBLE1BQUEsTUFBQSxNQUFBLFlBQVksYUFBWixZQUFZLHVCQUFaLFlBQVksQ0FBRSxRQUFRLDBDQUFHLE9BQU8sQ0FBQywwQ0FBRSxhQUFhLDBDQUFFLEdBQUcsbUNBQUksZUFBZSxDQUFDLENBQUM7SUFDdEgsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLENBQUMs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