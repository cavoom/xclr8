import path from "path";
import fs from "fs-extra";
import * as ask from "./ast";
import { sourceFile } from "./source-file";
import { isDir, isFile, readJsonFile, readdir, readJsonFileSync, isFileSync, isDirSync, isBuiltinSlotType, isGeneratedFile } from "./util";
import { Constants } from "./constants";
import { loadACDLFile, loadACDLFileSync, loadModuleFile, loadModuleFileSync } from "./parse";
import { ValidationErrorFactory } from "./error-factory";
import { InteractionModelModuleGenerator } from "./im-module-generator";
import { getUISkillInformation } from "./transformUIProject";
/**
 * Enum for specifying the version of an ASK Project.
 */
export var ProjectVersion;
(function (ProjectVersion) {
    /**
     * Beta 1 project version requires no package.json - everything is driven by `ask-resources.json` or file system convention.
     */
    ProjectVersion["Beta1"] = "beta1";
    /**
     * Beta 2 project is a standard NPM package driven by `package.json` or `ask.json`. Everything is driven by configuration.
     */
    ProjectVersion["Beta2"] = "beta2";
    ProjectVersion["SingleFile"] = "single";
    ProjectVersion["Latest"] = "beta2";
})(ProjectVersion || (ProjectVersion = {}));
/**
 * Default directory to synthesize ASKIR JSON files and other assets to during compilation.
 */
export const DefaultBuildDir = "build";
/**
 * Default directory relative to the project root to look for ACDL files.
 */
export const DefaultInclude = "src";
/**
 * Load a package's modules from the file system.
 *
 * package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param rootDir root directory of the package
 * @param config optional configuration for the package - it will be loaded from the file system if not provided.
 * @param isSrc set to true if this is a source package, false otherwise
 */
export function loadPackageSync(rootDir, config, isSrc) {
    var _a, _b;
    config = config !== null && config !== void 0 ? config : loadPackageConfigSync(rootDir);
    const isLibrary = (_b = (_a = config === null || config === void 0 ? void 0 : config.ask) === null || _a === void 0 ? void 0 : _a.library) !== null && _b !== void 0 ? _b : false;
    if (isSrc && config === undefined) {
        // we're in a legacy configuration (no package.json file)
        const skillPackageDir = path.join(rootDir, "skill-package");
        const [modules, interactionModelFiles, responseTemplates] = [
            loadSourceDirectorySync(path.join(rootDir, "skill-package", "conversations")).filter((m) => m.content !== undefined),
            getInteractionModelFilesSync(skillPackageDir),
            loadResponseTemplatesSync(skillPackageDir),
        ];
        const interactionModels = loadInteractionModelsContentSync(interactionModelFiles);
        // Don't generate IM ASKIR modules if it's a UI skill
        const { isUISkill } = getUISkillInformation(modules);
        const interactionModelModules = isUISkill
            ? []
            : loadGeneratedInteractionModelModulesSync(rootDir, interactionModelFiles, isSrc, isLibrary);
        const slotTypes = loadSlotTypes(interactionModels);
        return {
            interactionModels: interactionModelFiles,
            modules: [...modules, ...interactionModelModules],
            responseTemplates,
            slotTypes,
        };
    }
    if ((config === null || config === void 0 ? void 0 : config.ask) === undefined) {
        throw new Error(`'${rootDir}' is not a valid ASKIR package`);
    }
    else {
        const [interactionModelFiles, responseTemplates] = [getInteractionModelFilesSync(rootDir), loadResponseTemplatesSync(rootDir)];
        const interactionModels = loadInteractionModelsContentSync(interactionModelFiles);
        const slotTypes = loadSlotTypes(interactionModels);
        // load files from `srcDir` if this is a source package, otherwise `outDir`
        const moduleDir = isSrc ? config.ask.srcDir : config.ask.outDir;
        const absoluteModuleDir = path.isAbsolute(moduleDir) ? moduleDir : path.join(rootDir, moduleDir);
        const sourceModules = loadSourceDirectorySync(absoluteModuleDir).filter((m) => m.content !== undefined);
        const { isUISkill } = getUISkillInformation(sourceModules);
        // Skip IM generation if it's a UI skill
        const interactionModelModules = isUISkill
            ? []
            : loadGeneratedInteractionModelModulesSync(absoluteModuleDir, interactionModelFiles, isSrc, isLibrary);
        if (isDirSync(absoluteModuleDir)) {
            return {
                config,
                modules: [...sourceModules, ...interactionModelModules],
                responseTemplates,
                slotTypes,
                interactionModels: interactionModelFiles,
            };
        }
    }
    return undefined;
}
/**
 * Load a package's modules from the file system.
 *
 * package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param rootDir root directory of the package
 * @param config optional configuration for the package - it will be loaded from the file system if not provided.
 * @param isSrc set to true if this is a source package, false otherwise
 */
export async function loadPackage(rootDir, config, isSrc) {
    var _a, _b;
    config = config !== null && config !== void 0 ? config : (await loadPackageConfig(rootDir));
    const isLibrary = (_b = (_a = config === null || config === void 0 ? void 0 : config.ask) === null || _a === void 0 ? void 0 : _a.library) !== null && _b !== void 0 ? _b : false;
    if (isSrc && config === undefined) {
        // we're in a legacy configuration (no package.json file)
        const skillPackageDir = path.join(rootDir, "skill-package");
        const baseDir = path.join(rootDir, "skill-package", "conversations");
        const [modules, interactionModelFiles, responseTemplates] = await Promise.all([
            loadSourceDirectory(path.join(rootDir, "skill-package", "conversations")).then((modules) => modules.filter((m) => m.content !== undefined)),
            getInteractionModelFiles(skillPackageDir),
            loadResponseTemplates(skillPackageDir),
        ]);
        const interactionModels = await loadInteractionModelsContent(interactionModelFiles);
        // Don't generate IM ASKIR modules if it's a UI skill
        const { isUISkill } = getUISkillInformation(modules);
        const interactionModelModules = isUISkill
            ? []
            : await loadGeneratedInteractionModelModules(baseDir, interactionModelFiles, isSrc, isLibrary);
        const slotTypes = loadSlotTypes(interactionModels);
        return {
            interactionModels: interactionModelFiles,
            modules: [...modules, ...interactionModelModules],
            responseTemplates,
            slotTypes,
        };
    }
    if ((config === null || config === void 0 ? void 0 : config.ask) === undefined) {
        throw new Error(`'${rootDir}' is not a valid ASKIR package`);
    }
    else {
        const [interactionModelFiles, responseTemplates] = await Promise.all([
            getInteractionModelFiles(rootDir),
            loadResponseTemplates(rootDir),
        ]);
        const interactionModels = await loadInteractionModelsContent(interactionModelFiles);
        const slotTypes = loadSlotTypes(interactionModels);
        // load files from `srcDir` if this is a source package, otherwise `outDir`
        const moduleDir = isSrc ? config.ask.srcDir : config.ask.outDir;
        const absoluteModuleDir = path.isAbsolute(moduleDir) ? moduleDir : path.join(rootDir, moduleDir);
        // Skip IM generation if it's a UI skill
        const sourceModules = (await loadSourceDirectory(absoluteModuleDir)).filter((m) => m.content !== undefined);
        // Don't generate IM ASKIR modules if it's a UI skill
        const { isUISkill } = getUISkillInformation(sourceModules);
        const interactionModelModules = isUISkill
            ? []
            : await loadGeneratedInteractionModelModules(absoluteModuleDir, interactionModelFiles, isSrc, isLibrary);
        if (await isDir(absoluteModuleDir)) {
            return {
                config,
                modules: [...sourceModules, ...interactionModelModules],
                responseTemplates,
                slotTypes,
                interactionModels: interactionModelFiles,
            };
        }
    }
    return undefined;
}
/**
 * Loads a package config from a directory.
 *
 * A package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param dir root directory of the package to load.
 */
export function loadPackageConfigSync(dir) {
    var _a, _b;
    const pkgJsonPath = path.join(dir, "package.json");
    const pkgJson = readJsonFileSync(pkgJsonPath);
    if (pkgJson === undefined) {
        return undefined;
    }
    if (pkgJson.ask === undefined) {
        const askJsonPath = path.join(dir, "ask.json");
        if (isFileSync(askJsonPath)) {
            pkgJson.ask = readJsonFileSync(askJsonPath);
            if (pkgJson.ask === undefined) {
                throw new Error(`invalid ASK configuration: '${askJsonPath}'`);
            }
        }
        else {
            // is not an ASK package.
            return undefined;
        }
    }
    // fill default values if fields are not specified
    pkgJson.ask.outDir = (_a = pkgJson.ask.outDir) !== null && _a !== void 0 ? _a : DefaultBuildDir;
    pkgJson.ask.srcDir = (_b = pkgJson.ask.srcDir) !== null && _b !== void 0 ? _b : DefaultInclude;
    // projectVersion is an internal configuration only, so we must ignore any loaded value.
    pkgJson.ask.projectVersion = ProjectVersion.Latest;
    return pkgJson;
}
/**
 * Loads a package config from a directory.
 *
 * A package is identified by a `package.json` file - an ASK package must be a valid NPM package.
 *
 * Additionally, an ASK package either contains an `ask` section in `package.json` or as a supplemental `ask.json` file.
 *
 * @param dir root directory of the package to load.
 */
export async function loadPackageConfig(dir) {
    var _a, _b;
    const pkgJsonPath = path.join(dir, "package.json");
    const pkgJson = await readJsonFile(pkgJsonPath);
    if (pkgJson === undefined) {
        return undefined;
    }
    if (pkgJson.ask === undefined) {
        const askJsonPath = path.join(dir, "ask.json");
        if (await isFile(askJsonPath)) {
            pkgJson.ask = await readJsonFile(askJsonPath);
            if (pkgJson.ask === undefined) {
                throw new Error(`invalid ASK configuration: '${askJsonPath}'`);
            }
        }
        else {
            // is not an ASK package.
            return undefined;
        }
    }
    // fill default values if fields are not specified
    pkgJson.ask.outDir = (_a = pkgJson.ask.outDir) !== null && _a !== void 0 ? _a : DefaultBuildDir;
    pkgJson.ask.srcDir = (_b = pkgJson.ask.srcDir) !== null && _b !== void 0 ? _b : DefaultInclude;
    // projectVersion is an internal configuration only, so we must ignore any loaded value.
    pkgJson.ask.projectVersion = ProjectVersion.Latest;
    return pkgJson;
}
/**
 * Load ACDL and ASK Module source directory.
 *
 * @param baseDir directory to recursively scan
 */
export function loadSourceDirectorySync(baseDir) {
    return load(baseDir);
    function load(subDir) {
        const files = fs.readdirSync(subDir);
        return files
            .map((file) => {
            file = path.join(subDir, file);
            if (isDirSync(file)) {
                return load(file);
            }
            if (file.endsWith(".acdl")) {
                return [loadACDLFileSync(baseDir, file, undefined)];
            }
            if (isGeneratedFile(file) && file.endsWith(".json")) {
                return [];
            }
            if (file.endsWith(".json")) {
                const loadedSourceFile = loadModuleFileSync(baseDir, file);
                if (!loadedSourceFile) {
                    return [sourceFile(baseDir, file, undefined)];
                }
                return [
                    sourceFile(loadedSourceFile.baseDir, loadedSourceFile.uri, loadedSourceFile.content, [
                        ...(loadedSourceFile.errors || []),
                        ValidationErrorFactory.ACDLCompilationSkipped({
                            attributes: {
                                filePath: file,
                            },
                        }),
                    ]),
                ];
            }
            return [
                sourceFile(baseDir, file, new ask.Module(file, ask.ModuleSchema), [
                    ValidationErrorFactory.ACDLCompilationSkipped({
                        attributes: {
                            filePath: file,
                        },
                    }),
                ]),
            ];
        })
            .reduce((a, b) => a.concat(b), []);
    }
}
/**
 * Load ACDL and ASK Module source directory.
 *
 * @param baseDir directory to recursively scan
 */
export async function loadSourceDirectory(baseDir) {
    return load(baseDir);
    async function load(subDir) {
        const files = await readdir(subDir);
        return (await Promise.all(files.map(async (file) => {
            file = path.join(subDir, file);
            if (await isDir(file)) {
                return load(file);
            }
            if (file.endsWith(".acdl")) {
                return [await loadACDLFile(baseDir, file, undefined)];
            }
            if (isGeneratedFile(file) && file.endsWith(".json")) {
                return [];
            }
            if (file.endsWith(".json")) {
                const loadedSourceFile = await loadModuleFile(baseDir, file);
                if (!loadedSourceFile) {
                    return [sourceFile(baseDir, file, undefined)];
                }
                return [
                    sourceFile(loadedSourceFile.baseDir, loadedSourceFile.uri, loadedSourceFile.content, [
                        ...(loadedSourceFile.errors || []),
                        ValidationErrorFactory.ACDLCompilationSkipped({
                            attributes: {
                                filePath: file,
                            },
                        }),
                    ]),
                ];
            }
            return [
                sourceFile(baseDir, file, new ask.Module(file, ask.ModuleSchema), [
                    ValidationErrorFactory.ACDLCompilationSkipped({
                        attributes: {
                            filePath: file,
                        },
                    }),
                ]),
            ];
        }))).reduce((a, b) => a.concat(b), []);
    }
}
/**
 * We load this manifest file which is output by the `ac-core/bundle.js` script. We use it to
 * determine the version of a bundled `@alexa/schema` or `@alexa/ac-core` library to load.
 */
const libManifest = require("../lib/manifest.json");
/**
 * Load ASKIR folders from a package bundled within the `lib/` folder.
 *
 * @param name name of the package
 * @returns the bundled ASK Package.
 */
export function loadBundledPackageSync(name) {
    const version = libManifest.versions[`@alexa/${name}`];
    if (version === undefined) {
        throw new Error(`unknown bundled package '${name}'`);
    }
    const dir = path.join(__dirname, "..", "..", "dist", "lib", `${name}-${version}`);
    return asPackage(loadSourceDirectorySync(dir));
    function asPackage(modules) {
        return {
            modules: modules.filter((m) => m.content !== undefined),
            config: {
                name: `@alexa/${name}`,
                version,
            },
        };
    }
}
/**
 * Load ASKIR folders from a package bundled within the `lib/` folder.
 *
 * @param name name of the package
 * @returns the bundled ASK Package.
 */
export async function loadBundledPackage(name) {
    const version = libManifest.versions[`@alexa/${name}`];
    if (version === undefined) {
        throw new Error(`unknown bundled package '${name}'`);
    }
    const dir = path.join(__dirname, "..", "..", "dist", "lib", `${name}-${version}`);
    return asPackage(await loadSourceDirectory(dir));
    function asPackage(modules) {
        return {
            modules: modules.filter((m) => m.content !== undefined),
            config: {
                name: `@alexa/${name}`,
                version,
            },
        };
    }
}
/**
 * Load the Project's prompts from `responses/prompts`.
 *
 * @param config project configuration
 */
export function loadResponseTemplatesSync(dir) {
    return ask.ResponseTemplateType.All.map((type) => {
        const promptsPath = path.join(dir, "response", getResponseTemplatePath(type));
        if (isDirSync(promptsPath)) {
            return fs.readdirSync(promptsPath).map((file) => new ask.ResponseTemplate(path.resolve(promptsPath, file), file, type));
        }
        return [];
    }).reduce((a, b) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.concat(b)) !== null && _a !== void 0 ? _a : []; }, []);
}
/**
 * Load the Project's prompts from `responses/prompts`.
 *
 * @param config project configuration
 */
export async function loadResponseTemplates(dir) {
    return (await Promise.all(ask.ResponseTemplateType.All.map(async (type) => {
        const promptsPath = path.join(dir, "response", getResponseTemplatePath(type));
        if (await isDir(promptsPath)) {
            return (await readdir(promptsPath)).map((file) => new ask.ResponseTemplate(path.resolve(promptsPath, file), file, type));
        }
        return [];
    }))).reduce((a, b) => a === null || a === void 0 ? void 0 : a.concat(b), []);
}
function getResponseTemplatePath(type) {
    if (type === ask.ResponseTemplateType.Display) {
        return Constants.DisplayFolderName;
    }
    return Constants.PromptsFolderName;
}
/**
 * Synchronously Load Interaction Models' file path.
 *
 * @param config project configuration
 */
export function getInteractionModelFilesSync(dir) {
    const interactionModels = [];
    const imDir = path.join(dir, "interactionModels", "custom");
    if (isDirSync(imDir)) {
        const fileNames = fs.readdirSync(imDir);
        for (const fileName of fileNames) {
            const file = path.parse(fileName);
            const locale = file.name;
            file.name = file.name.replace("-", "_");
            if (file.ext === ".json" && Object.values(ask.Locale).includes(file.name)) {
                const imPath = path.join(imDir, fileName);
                if (isFileSync(imPath)) {
                    interactionModels.push({
                        file: imPath,
                        locale: locale,
                    });
                }
            }
        }
    }
    return interactionModels;
}
/**
 * Asynchronously Load Interaction Models' file path.
 *
 * @param config project configuration
 */
export async function getInteractionModelFiles(dir) {
    const interactionModels = [];
    const imDir = path.join(dir, "interactionModels", "custom");
    if (await isDir(imDir)) {
        const fileNames = await readdir(imDir);
        for (const fileName of fileNames) {
            const file = path.parse(fileName);
            const locale = file.name;
            file.name = file.name.replace("-", "_");
            if (file.ext === ".json" && Object.values(ask.Locale).includes(file.name)) {
                const imPath = path.join(imDir, fileName);
                if (await isFile(imPath)) {
                    interactionModels.push({
                        file: imPath,
                        locale: locale,
                    });
                }
            }
        }
    }
    return interactionModels;
}
/**
 * Synchronously load the JSON from the project's interaction model files into a locale to model map.
 *
 * @param interactionModelFiles the interaction model files to load
 */
export function loadInteractionModelsContentSync(interactionModelsFiles) {
    const interactionModels = new Map();
    for (const interactionModelFile of interactionModelsFiles) {
        const model = readJsonFileSync(interactionModelFile.file);
        if (model) {
            const locale = interactionModelFile.locale.replace("-", "_");
            interactionModels.set(locale, model);
        }
    }
    return interactionModels;
}
/**
 * Asynchronously load the JSON from the project's interaction model files into a locale to model map.
 *
 * @param interactionModelFiles the interaction model files to load
 */
export async function loadInteractionModelsContent(interactionModelsFiles) {
    const interactionModels = new Map();
    await Promise.all(interactionModelsFiles.map(async (interactionModelFile) => {
        const model = await readJsonFile(interactionModelFile.file);
        if (model) {
            const locale = interactionModelFile.locale.replace("-", "_");
            interactionModels.set(locale, model);
        }
    }));
    return interactionModels;
}
/**
 * Load slot types from a project's Interaction Models.
 *
 * @param models a map of locales to interaction model json
 */
export function loadSlotTypes(models) {
    var _a, _b, _c;
    const typeToLocale = new Map();
    for (const [locale, model] of models) {
        // Need this to support UI interaction models https://github.com/alexa/ask-ac/issues/1187
        if (model.interactionModel === undefined) {
            model.interactionModel = {
                languageModel: model.languageModel,
            };
        }
        const types = (_a = model === null || model === void 0 ? void 0 : model.interactionModel) === null || _a === void 0 ? void 0 : _a.languageModel.types;
        const slotTypes = (_b = types === null || types === void 0 ? void 0 : types.filter((t) => (t === null || t === void 0 ? void 0 : t.name) !== undefined)) !== null && _b !== void 0 ? _b : [];
        for (const slot of slotTypes) {
            if (isBuiltinSlotType(slot.name)) {
                continue;
            }
            else if (typeToLocale.has(slot.name)) {
                (_c = typeToLocale.get(slot.name)) === null || _c === void 0 ? void 0 : _c.push(locale);
            }
            else {
                typeToLocale.set(slot.name, [locale]);
            }
        }
    }
    const slots = [];
    for (const [name, locale] of typeToLocale) {
        slots.push(new ask.SlotType(new ask.Name(`slotTypes.${name}`), locale));
    }
    return slots.length > 0 ? slots : undefined;
}
/**
 * Scan all folders in a directory for ask packages and return all their Module files.
 *
 * @param dir directory to scan for packages.
 */
export function scanPackagesSync(dir) {
    // throw error if we can't access this directory
    try {
        fs.accessSync(dir, fs.constants.R_OK);
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // no such file, so return empty
            return [];
        }
        // file exists but we can't read - throw.
        throw err;
    }
    if (isFileSync(dir)) {
        // ignore files, we're only looking inside folders
        return [];
    }
    const packageJson = path.join(dir, "package.json");
    if (isFileSync(packageJson)) {
        // this folder is a NPM package
        const node_modules = path.join(dir, "node_modules");
        const config = loadPackageConfigSync(dir);
        if (config !== undefined) {
            // this package contains ASK artifacts
            return [loadPackageSync(dir, config, false), ...scanPackagesSync(node_modules)].filter((p) => p !== undefined);
        }
        // package is not an ASK package, but it may still containing dependencies in its node_modules that are, let's check them too
        return scanPackagesSync(node_modules);
    }
    // the folder is not an ASK package, it may be an NPM organization, i.e, @alexa/.., so let's check all the folders contained within.
    const ls = fs.readdirSync(dir).map((d) => path.join(dir, d));
    const scan = ls.map((p) => scanPackagesSync(p));
    return scan.reduce((a, b) => a.concat(b), []);
}
/**
 * Scan all folders in a directory for ask packages and return all their Module files.
 *
 * @param dir directory to scan for packages.
 */
export async function scanPackages(dir) {
    // throw error if we can't access this directory
    try {
        await fs.access(dir, fs.constants.R_OK);
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // no such file, so return empty
            return [];
        }
        // file exists but we can't read - throw.
        throw err;
    }
    if (await isFile(dir)) {
        // ignore files, we're only looking inside folders
        return [];
    }
    const packageJson = path.join(dir, "package.json");
    if (await isFile(packageJson)) {
        // this folder is a NPM package
        const node_modules = path.join(dir, "node_modules");
        const config = await loadPackageConfig(dir);
        if (config !== undefined) {
            // this package contains ASK artifacts
            return [(await loadPackage(dir, config, false)), ...(await scanPackages(node_modules))].filter((p) => p !== undefined);
        }
        // package is not an ASK package, but it may still containing dependencies in its node_modules that are, let's check them too
        return scanPackages(node_modules);
    }
    // the folder is not an ASK package, it may be an NPM organization, i.e, @alexa/.., so let's check all the folders contained within.
    const ls = (await readdir(dir)).map((d) => path.join(dir, d));
    const scan = await Promise.all(ls.map((p) => scanPackages(p)));
    return scan.reduce((a, b) => a.concat(b), []);
}
/**
 * Loads generated interaction model modules from the directory if it is a source
 * package and not a library.
 *
 * @param dir the directory to mock the source location of the modules.
 * @param imFiles the interaction model files to generate.
 * @param isSrc whether the package contains source or external modules
 * @param isLibrary whether the package is a NPM library.
 * @returns the generated interaction model modules.
 */
export function loadGeneratedInteractionModelModulesSync(dir, imFiles, isSrc, isLibrary) {
    if (isSrc && !isLibrary) {
        return new InteractionModelModuleGenerator(dir, imFiles).generateInteractionModelModulesSync();
    }
    return [];
}
/**
 * Loads generated interaction model modules from the directory if it is a source
 * package and not a library.
 *
 * @param dir the directory to mock the source location of the modules.
 * @param imFiles the interaction model files to generate.
 * @param isSrc whether the package contains source or external modules
 * @param isLibrary whether the package is a NPM library.
 * @returns the generated interaction model modules.
 */
export async function loadGeneratedInteractionModelModules(dir, imFiles, isSrc, isLibrary) {
    if (isSrc && !isLibrary) {
        return new InteractionModelModuleGenerator(dir, imFiles).generateInteractionModelModules();
    }
    return [];
}
//# sourceMappingURL=data:application/json;base64,