import path from "path";
import fs from "fs-extra";
import crypto from "crypto";
import { isFile, isFileSync, readJsonFile, readJsonFileSync, zipDirectory, getDirectories, getDirectoriesSync } from "./util";
import { compileModule } from "./compile";
import { Constants } from "./constants";
import { AlexaConversations } from "./ast/prelude";
import { ValidationErrorFactory } from "./error-factory";
import { InteractionModelMerger } from "./interaction-model-merger";
import { Locale } from "./ast";
/**
 * Zips up the `skill-package` folder.
 *
 * @param bundleProjectOutput project output from bundleProject
 * returns a promise for a new BundleProjectOutput with a skillPackageZip property
 */
export async function zipBundleOutput(bundleProjectOutput) {
    const skillPackageZip = `${bundleProjectOutput.skillPackagePath}.zip`;
    await zipDirectory(bundleProjectOutput.skillPackagePath, skillPackageZip);
    return {
        ...bundleProjectOutput,
        skillPackageZip,
    };
}
/**
 * Synchronously bundle a project and prepare a `skill-package` folder ready for import to SMAPI.
 *
 * @param project skill project to bundle
 * @param props bundling properties
 */
export function bundleProjectSync(project, props) {
    return _bundleProject(project, true, props);
}
/**
 * Asynchronously bundle a project and prepare a `skill-package` folder ready for import to SMAPI.
 *
 * @param project skill project to bundle
 * @param props bundling properties
 */
export function bundleProject(project, props) {
    return _bundleProject(project, false, props);
}
function _bundleProject(project, sync, props) {
    const bundlePaths = getBundlePaths(project, props);
    const { skillPackagePath, conversationsPath, dataStorePackagesPath, promptsPath, displayPath, interactionModelsPath, tasksPath, assetsPath, ispPath, } = bundlePaths;
    if (sync) {
        return runSync();
    }
    return runAsync();
    function runSync() {
        if ((props === null || props === void 0 ? void 0 : props.cleanBuild) === true) {
            cleanSync();
        }
        mkdirsSync();
        const errors = writePackagesSync();
        writePackagesSync();
        copySkillManifestSync();
        synthesizeInteractionModels(true);
        copyResponseTemplatesSync();
        copyTasksSync();
        copyAssetsSync();
        copyIspSync();
        copyDataStorePackagesSync();
        return {
            skillPackagePath,
            errors,
        };
    }
    async function runAsync() {
        if ((props === null || props === void 0 ? void 0 : props.cleanBuild) === true) {
            await clean();
        }
        await mkdirs();
        const errors = await writePackages();
        await Promise.all([
            copySkillManifest(),
            synthesizeInteractionModels(false),
            copyResponseTemplates(),
            copyTasks(),
            copyAssets(),
            copyIsp(),
            copyDataStorePackages(),
        ]);
        return {
            skillPackagePath,
            errors,
        };
    }
    function clean() {
        return fs.remove(skillPackagePath);
    }
    function cleanSync() {
        return fs.removeSync(skillPackagePath);
    }
    async function mkdirs() {
        await fs.mkdir(skillPackagePath, { recursive: true });
        await Promise.all([
            fs.mkdir(interactionModelsPath, { recursive: true }),
            fs.mkdir(conversationsPath, { recursive: true }),
            fs.mkdir(promptsPath, { recursive: true }),
        ]);
    }
    function mkdirsSync() {
        fs.mkdirSync(skillPackagePath, { recursive: true });
        fs.mkdirSync(interactionModelsPath, { recursive: true });
        fs.mkdirSync(conversationsPath, { recursive: true });
        fs.mkdirSync(promptsPath, { recursive: true });
    }
    function writePackagesSync() {
        return [project.source, ...project.external].map(writePackageSync).reduce((a, b) => a.concat(b), []);
    }
    async function writePackages() {
        return (await Promise.all([project.source, ...project.external].map(writePackage))).reduce((a, b) => a.concat(b), []);
    }
    function writePackageSync(pkg) {
        var _a, _b;
        if (((_a = pkg.config) === null || _a === void 0 ? void 0 : _a.name) !== Constants.AlexaSchemaPackageName && ((_b = pkg.config) === null || _b === void 0 ? void 0 : _b.name) !== Constants.ACCorePackageName) {
            return pkg.modules.map((mod) => writeModule(pkg, mod, true)).reduce((a, b) => a.concat(b), []);
        }
        return [];
    }
    async function writePackage(pkg) {
        var _a, _b;
        if (((_a = pkg.config) === null || _a === void 0 ? void 0 : _a.name) !== Constants.AlexaSchemaPackageName && ((_b = pkg.config) === null || _b === void 0 ? void 0 : _b.name) !== Constants.ACCorePackageName) {
            return (await Promise.all(pkg.modules.map((mod) => writeModule(pkg, mod, false)))).reduce((a, b) => a.concat(b), []);
        }
        return [];
    }
    function writeModule(pkg, module, sync) {
        var _a, _b, _c;
        if (module.content === undefined) {
            return [];
        }
        const isSourcePkg = pkg === project.source;
        const compiledModule = compileModule(project, module.content);
        const json = JSON.stringify(compiledModule);
        // compute a truncated sha256 hash of the file content for unique names
        // we truncate it avoid long names, 10 characters should be enough, we can tweak it as necessary
        const fileHash = () => crypto.createHash("sha256").update(json).digest("hex").slice(0, 10);
        let outputFile;
        if (isSourcePkg) {
            // for a source package, we do our best to maintain the original file names
            // the only transformation we do is to flatten nested folders into the file name
            // see: https://github.com/alexa/ask-ac/issues/560
            const src = path.isAbsolute(project.config.srcDir)
                ? project.config.srcDir
                : path.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, project.config.srcDir);
            const filePath = path.relative(src, module.uri);
            const cleanName = sanitizeFileName(filePath);
            // we append the hash as a file suffix if the path includes slashes
            // this is because two files might collide after removing nested folders
            const suffix = filePath.includes("/") ? `_${fileHash()}` : "";
            outputFile = `${path.join(conversationsPath, cleanName)}${suffix}.${Constants.ASKIRJsonExtension}`;
        }
        else {
            // for a dependency package, we use a hash to create a unique name
            const filePath = ((_b = pkg.config) === null || _b === void 0 ? void 0 : _b.name) ? path.join((_c = pkg.config) === null || _c === void 0 ? void 0 : _c.name, path.basename(module.uri)) : path.basename(module.uri);
            const cleanName = sanitizeFileName(filePath);
            outputFile = path.join(conversationsPath, `${cleanName}_${fileHash()}.${Constants.ASKIRJsonExtension}`);
        }
        return writeCompiledModule(compiledModule, module.uri, outputFile, sync);
    }
    function writeCompiledModule(compiledModule, uri, outputFile, sync) {
        var _a, _b;
        const writeFileRequests = (_b = (_a = compiledModule.expressions) === null || _a === void 0 ? void 0 : _a.map((expr) => {
            var _a;
            if (expr.kind === "QualifiedNameDeclaration" &&
                ((_a = expr.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call" &&
                (expr.expression.name === AlexaConversations.apl || expr.expression.name === AlexaConversations.apla)) {
                const fqn = expr.name;
                const templatePath = expr.expression.arguments.path.arguments;
                if (fqn && typeof templatePath === "string") {
                    const outputDir = path.join(expr.expression.name === AlexaConversations.apl ? displayPath : promptsPath, fqn);
                    const moduleFilePath = path.dirname(uri);
                    const absoluteTemplatePath = path.resolve(moduleFilePath, templatePath);
                    const updatedPathRef = path.join(path.relative(path.dirname(outputFile), outputDir), "document.json");
                    expr.expression.arguments.path.arguments = updatedPathRef;
                    if (sync) {
                        fs.mkdirSync(outputDir, { recursive: true });
                        if (isFileSync(absoluteTemplatePath)) {
                            // is a direct .json file reference, we need to write it in a folder as document.json
                            fs.copyFileSync(absoluteTemplatePath, path.join(outputDir, "document.json"));
                        }
                        else {
                            // is a reference to a folder, we need to copy the contents of the folder
                            fs.copySync(absoluteTemplatePath, outputDir);
                        }
                    }
                    else {
                        return (async function () {
                            await fs.mkdir(outputDir, { recursive: true });
                            if (await isFile(absoluteTemplatePath)) {
                                // is a direct .json file reference, we need to write it in a folder as document.json
                                await fs.copyFile(absoluteTemplatePath, path.join(outputDir, "document.json"));
                            }
                            else {
                                // is a reference to a folder, we need to copy the contents of the folder
                                await fs.copy(absoluteTemplatePath, outputDir);
                            }
                        })();
                    }
                }
            }
            return sync ? undefined : Promise.resolve(undefined);
        })) !== null && _b !== void 0 ? _b : [];
        const json = JSON.stringify(compiledModule);
        if (sync) {
            fs.writeFileSync(outputFile, json);
            const status = fs.statSync(outputFile);
            return checkFileSize(status);
        }
        return (async function () {
            await Promise.all(writeFileRequests);
            await fs.writeFile(outputFile, json);
            const status = await fs.stat(outputFile);
            return checkFileSize(status);
        })();
        function checkFileSize(status) {
            if (status.size >= Constants.MaximumFileSize) {
                return [ValidationErrorFactory.TooLargeIR({ attributes: { filePath: path.relative(process.cwd(), outputFile) } })];
            }
            return [];
        }
    }
    function sanitizeFileName(rawFilePath) {
        return truncate(rawFilePath
            .replace(".acdl", "")
            .replace(".json", "")
            .replace(/[\/\\]/g, "_")
            .replace(/[@\.]/g, ""), 50);
    }
    function truncate(input, length) {
        return input.substring(0, Math.min(length, input.length));
    }
    function copySkillManifestSync() {
        var _a, _b;
        const manifestPath = path.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, Constants.SkillManifestFileName);
        const manifest = fs.statSync(manifestPath);
        const componentsFolderPath = path.join((_b = project.config.sourceRootDir) !== null && _b !== void 0 ? _b : project.config.rootDir, "components");
        const askirPath = path.join(skillPackagePath, "conversations");
        if (manifest.isFile()) {
            fs.copyFileSync(manifestPath, path.join(skillPackagePath, Constants.SkillManifestFileName));
        }
        else {
            throw new Error(`expected '${Constants.SkillManifestFileName}' file to be found at ${manifestPath}`);
        }
        // checks whether a config file is present inside component directory also checks for conversations folder in build
        if (fs.pathExistsSync(componentsFolderPath) && isConfigPresentSync(componentsFolderPath) && fs.pathExistsSync(askirPath)) {
            // updates skill.json in build folder to include Alexa Conversations dialog manager
            updateSkillManifestSync();
        }
    }
    /**
     * Updates the skill manifest file. Adds alexa conversations dialog manager in it.
     */
    function updateSkillManifestSync() {
        var _a, _b, _c;
        const manifestPath = path.join(skillPackagePath, Constants.SkillManifestFileName);
        const manifestObj = readJsonFileSync(manifestPath);
        if (!((_b = (_a = manifestObj === null || manifestObj === void 0 ? void 0 : manifestObj.manifest) === null || _a === void 0 ? void 0 : _a.apis) === null || _b === void 0 ? void 0 : _b.custom)) {
            return;
        }
        const existingDialogManagers = ((_c = manifestObj.manifest.apis.custom.dialogManagement) === null || _c === void 0 ? void 0 : _c.dialogManagers) || [];
        const hasAlexaConversations = existingDialogManagers.find((dialogManager) => (dialogManager === null || dialogManager === void 0 ? void 0 : dialogManager.type) === "AMAZON.Conversations");
        const newDialogManagers = hasAlexaConversations ? existingDialogManagers : [...existingDialogManagers, { type: "AMAZON.Conversations" }];
        manifestObj.manifest.apis.custom = {
            ...manifestObj.manifest.apis.custom,
            ...{
                dialogManagement: {
                    ...(manifestObj.manifest.apis.custom.dialogManagement || {}),
                    dialogManagers: newDialogManagers,
                },
            },
        };
        const updatedManifest = JSON.stringify(manifestObj);
        fs.writeFileSync(manifestPath, updatedManifest);
    }
    /**
     * Recursively checks whether config.jsonc file is present in component directory
     */
    function isConfigPresentSync(parentDirectory) {
        const configPath = path.join(parentDirectory, "config.jsonc");
        if (fs.pathExistsSync(configPath)) {
            return true;
        }
        const subDir = getDirectoriesSync(parentDirectory);
        for (const dir of subDir) {
            if (isConfigPresentSync(path.join(parentDirectory, dir))) {
                return true;
            }
        }
        return false;
    }
    async function copySkillManifest() {
        var _a, _b;
        const manifestPath = path.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, Constants.SkillManifestFileName);
        const manifest = await fs.stat(manifestPath);
        const componentsFolderPath = path.join((_b = project.config.sourceRootDir) !== null && _b !== void 0 ? _b : project.config.rootDir, "components");
        const askirPath = path.join(skillPackagePath, "conversations");
        if (manifest.isFile()) {
            await fs.copyFile(manifestPath, path.join(skillPackagePath, Constants.SkillManifestFileName));
        }
        else {
            throw new Error(`expected '${Constants.SkillManifestFileName}' file to be found at ${manifestPath}`);
        }
        // checks whether a config file is present inside component directory also checks for conversations folder in build
        if ((await fs.pathExists(componentsFolderPath)) && (await isConfigPresent(componentsFolderPath)) && (await fs.pathExists(askirPath))) {
            // updates skill.json in build folder to include Alexa Conversations dialog manager
            await updateSkillManifest();
        }
    }
    /**
     * Recursively checks whether config.jsonc file is present in component directory
     */
    async function isConfigPresent(parentDirectory) {
        const configPath = path.join(parentDirectory, "config.jsonc");
        if (await fs.pathExists(configPath)) {
            return true;
        }
        const subDir = await getDirectories(parentDirectory);
        for (const dir of subDir) {
            if (await isConfigPresent(path.join(parentDirectory, dir))) {
                return true;
            }
        }
        return false;
    }
    async function updateSkillManifest() {
        var _a, _b, _c;
        const manifestPath = path.join(skillPackagePath, Constants.SkillManifestFileName);
        const manifestObj = await readJsonFile(manifestPath);
        if (!((_b = (_a = manifestObj === null || manifestObj === void 0 ? void 0 : manifestObj.manifest) === null || _a === void 0 ? void 0 : _a.apis) === null || _b === void 0 ? void 0 : _b.custom)) {
            return;
        }
        const existingDialogManagers = ((_c = manifestObj.manifest.apis.custom.dialogManagement) === null || _c === void 0 ? void 0 : _c.dialogManagers) || [];
        const hasAlexaConversations = existingDialogManagers.find((dialogManager) => (dialogManager === null || dialogManager === void 0 ? void 0 : dialogManager.type) === "AMAZON.Conversations");
        const newDialogManagers = hasAlexaConversations ? existingDialogManagers : [...existingDialogManagers, { type: "AMAZON.Conversations" }];
        manifestObj.manifest.apis.custom = {
            ...manifestObj.manifest.apis.custom,
            ...{
                dialogManagement: {
                    ...(manifestObj.manifest.apis.custom.dialogManagement || {}),
                    dialogManagers: newDialogManagers,
                },
            },
        };
        const updatedManifest = JSON.stringify(manifestObj);
        await fs.writeFile(manifestPath, updatedManifest);
    }
    function synthesizeInteractionModels(sync) {
        var _a;
        const groupedByLocale = {};
        project.external.forEach((pkg) => {
            var _a;
            return (_a = pkg.interactionModels) === null || _a === void 0 ? void 0 : _a.forEach((im) => {
                if (groupedByLocale[im.locale]) {
                    groupedByLocale[im.locale].push(im.file);
                }
                else {
                    groupedByLocale[im.locale] = [im.file];
                }
            });
        });
        const generatedInteractionModels = project.generateInteractionModels();
        const tasks = (_a = project.source.interactionModels) === null || _a === void 0 ? void 0 : _a.map((im) => sync ? synthesizeInteractionModelSync(im) : synthesizeInteractionModel(im));
        if (!sync) {
            if (tasks) {
                return Promise.all(tasks);
            }
            return Promise.resolve(undefined);
        }
        function synthesizeInteractionModelSync(im) {
            const sourceUri = im.file;
            const interactionModel = readJsonFileSync(sourceUri);
            if (interactionModel === undefined) {
                throw new Error(`file not found: '${im.file}'`);
            }
            const { slotTypes, slotTypeIndex } = getSlotTypes(interactionModel);
            if (im.locale in groupedByLocale) {
                const dependencyInteractionModels = groupedByLocale[im.locale].map((uri) => ({
                    uri,
                    interactionModel: readJsonFileSync(uri),
                }));
                copyDependencyInteractionModelContent(sourceUri, slotTypes, slotTypeIndex, dependencyInteractionModels);
            }
            const generatedInteractionModel = generatedInteractionModels.get(im.locale);
            const outputInteractionModel = generatedInteractionModel !== undefined
                ? InteractionModelMerger.INSTANCE.mergeInteractionModels(interactionModel, generatedInteractionModel)
                : interactionModel;
            const outputFile = path.join(interactionModelsPath, `${im.locale}.json`);
            fs.writeFileSync(outputFile, JSON.stringify(outputInteractionModel, null, 2));
        }
        async function synthesizeInteractionModel(im) {
            const sourceUri = im.file;
            const interactionModel = await readJsonFile(sourceUri);
            if (interactionModel === undefined) {
                throw new Error(`file not found: '${im.file}'`);
            }
            const { slotTypes, slotTypeIndex } = getSlotTypes(interactionModel);
            if (im.locale in groupedByLocale) {
                const dependencyInteractionModels = await Promise.all(groupedByLocale[im.locale].map((uri) => readJsonFile(uri).then((interactionModel) => ({
                    uri,
                    interactionModel,
                }))));
                copyDependencyInteractionModelContent(sourceUri, slotTypes, slotTypeIndex, dependencyInteractionModels);
            }
            const generatedInteractionModel = generatedInteractionModels.get(Locale.toUnderscoreLocale(im.locale));
            const outputInteractionModel = generatedInteractionModel !== undefined
                ? InteractionModelMerger.INSTANCE.mergeInteractionModels(interactionModel, generatedInteractionModel)
                : interactionModel;
            const outputFile = path.join(interactionModelsPath, `${im.locale}.json`);
            await fs.writeFile(outputFile, JSON.stringify(outputInteractionModel, null, 2));
        }
        function getSlotTypes(interactionModel) {
            var _a;
            const slotTypes = (_a = interactionModel === null || interactionModel === void 0 ? void 0 : interactionModel.interactionModel.languageModel.types) !== null && _a !== void 0 ? _a : [];
            if ((interactionModel === null || interactionModel === void 0 ? void 0 : interactionModel.interactionModel.languageModel.types) === undefined) {
                interactionModel.interactionModel.languageModel.types = slotTypes;
            }
            const slotTypeIndex = slotTypes.map((t) => ({ [t.name]: t })).reduce((a, b) => ({ ...a, ...b }), {});
            return { slotTypes, slotTypeIndex };
        }
        // copies interaction model content from dependencies into the interaction model we ultimately write to disk.
        // for now, we only copy in slot type data
        function copyDependencyInteractionModelContent(sourceUri, slotTypes, slotTypeIndex, dependencyInteractionModels) {
            dependencyInteractionModels.forEach((dependency) => {
                var _a, _b;
                const dependencyInteractonModel = dependency.interactionModel;
                const dependencyUri = dependency.uri;
                (_b = (_a = dependencyInteractonModel === null || dependencyInteractonModel === void 0 ? void 0 : dependencyInteractonModel.interactionModel.languageModel) === null || _a === void 0 ? void 0 : _a.types) === null || _b === void 0 ? void 0 : _b.forEach((dependencySlotType) => {
                    const sourceSlotType = slotTypeIndex === null || slotTypeIndex === void 0 ? void 0 : slotTypeIndex[dependencySlotType.name];
                    if (sourceSlotType === undefined) {
                        slotTypeIndex[dependencySlotType.name] = dependencySlotType;
                        slotTypes.push(dependencySlotType);
                    }
                    else {
                        if (sourceSlotType.valueSupplier !== dependencySlotType.valueSupplier) {
                            throw new Error(`mismatched Slot Type 'valueSuppler' for Slot Type '${sourceSlotType.name}'. Received '${sourceSlotType.valueSupplier}' in '${sourceUri}', but got '${dependencySlotType.valueSupplier}' in '${dependencyUri}'.`);
                        }
                        if (sourceSlotType.values === undefined) {
                            sourceSlotType.values = dependencySlotType.values;
                        }
                        else if (dependencySlotType.values !== undefined) {
                            const sourceSlotTypeIndex = sourceSlotType.values
                                .map((v) => ({
                                [v.name.value]: v,
                            }))
                                .reduce((a, b) => ({ ...a, ...b }), {});
                            for (const dependencySlotTypeValue of dependencySlotType.values) {
                                const sourceSlotTypeValue = sourceSlotTypeIndex[dependencySlotTypeValue.name.value];
                                if (sourceSlotTypeValue === undefined) {
                                    sourceSlotTypeIndex[dependencySlotTypeValue.name.value] = dependencySlotTypeValue;
                                    sourceSlotType.values.push(dependencySlotTypeValue);
                                }
                                else {
                                    if (sourceSlotTypeValue.id === undefined) {
                                        sourceSlotTypeValue.id = dependencySlotTypeValue.id;
                                    }
                                    else if (dependencySlotTypeValue.id !== undefined && sourceSlotTypeValue.id !== dependencySlotTypeValue.id) {
                                        throw new Error(`mismatched SlotTypeValue ID '${sourceSlotTypeValue.id}' and '${dependencySlotTypeValue.id}' for SlotTypeValue with name '${sourceSlotTypeValue.name.value}'.`);
                                    }
                                    if (sourceSlotTypeValue.name.synonyms === undefined) {
                                        sourceSlotTypeValue.name.synonyms = dependencySlotTypeValue.name.synonyms;
                                    }
                                    else if (dependencySlotTypeValue.name.synonyms !== undefined) {
                                        sourceSlotTypeValue.name.synonyms = Array.from(new Set([...sourceSlotTypeValue.name.synonyms, ...dependencySlotTypeValue.name.synonyms]));
                                    }
                                }
                            }
                        }
                    }
                });
            });
        }
    }
    function copyTasksSync() {
        copySrcSync(Constants.TasksFolderName, tasksPath);
    }
    async function copyTasks() {
        await copySrc(Constants.TasksFolderName, tasksPath);
    }
    function copyAssetsSync() {
        copySrcSync(Constants.AssetsFolderName, assetsPath);
    }
    async function copyAssets() {
        await copySrc(Constants.AssetsFolderName, assetsPath);
    }
    function copyIspSync() {
        copySrcSync(Constants.InSkillPurchaseFolderName, ispPath);
    }
    async function copyIsp() {
        await copySrc(Constants.InSkillPurchaseFolderName, ispPath);
    }
    function copyDataStorePackagesSync() {
        copySrcSync(Constants.DataStorePackagesFolderName, dataStorePackagesPath);
    }
    async function copyDataStorePackages() {
        await copySrc(Constants.DataStorePackagesFolderName, dataStorePackagesPath);
    }
    function copySrcSync(src, build) {
        var _a;
        const srcPath = path.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, src);
        if (fs.pathExistsSync(srcPath)) {
            fs.copySync(srcPath, build);
        }
    }
    async function copySrc(src, build) {
        var _a;
        const srcPath = path.join((_a = project.config.sourceRootDir) !== null && _a !== void 0 ? _a : project.config.rootDir, src);
        if (await fs.pathExists(srcPath)) {
            await fs.copy(srcPath, build);
        }
    }
    async function copyResponseTemplates() {
        var _a;
        await Promise.all(((_a = project.responseTemplates) === null || _a === void 0 ? void 0 : _a.map(async (responseTemplate) => {
            const location = path.join(responseTemplate.isDisplay() ? displayPath : promptsPath, responseTemplate.name);
            await fs.mkdir(location, { recursive: true });
            await fs.copy(responseTemplate.templateUri, location);
        })) || []);
    }
    function copyResponseTemplatesSync() {
        var _a;
        (_a = project.responseTemplates) === null || _a === void 0 ? void 0 : _a.forEach((responseTemplate) => {
            const location = path.join(responseTemplate.isDisplay() ? displayPath : promptsPath, responseTemplate.name);
            fs.mkdirSync(location, { recursive: true });
            fs.copySync(responseTemplate.templateUri, location);
        });
    }
}
function getBundlePaths(project, props) {
    var _a;
    const outDir = (_a = props === null || props === void 0 ? void 0 : props.outDir) !== null && _a !== void 0 ? _a : project.config.outDir;
    const bundleOutputDir = path.isAbsolute(outDir) ? outDir : path.join(project.config.rootDir, outDir);
    const skillPackagePath = path.join(bundleOutputDir, Constants.SkillPackageFolderName);
    const dependenciesPath = path.join(skillPackagePath, Constants.DependenciesFolderName);
    const conversationsPath = path.join(skillPackagePath, Constants.ConversationsFolderName);
    const promptsPath = path.join(skillPackagePath, Constants.ResponseFolderName, Constants.PromptsFolderName);
    const displayPath = path.join(skillPackagePath, Constants.ResponseFolderName, Constants.DisplayFolderName);
    const tasksPath = path.join(skillPackagePath, Constants.TasksFolderName);
    const assetsPath = path.join(skillPackagePath, Constants.AssetsFolderName);
    const dataStorePackagesPath = path.join(skillPackagePath, Constants.DataStorePackagesFolderName);
    const ispPath = path.join(skillPackagePath, Constants.InSkillPurchaseFolderName);
    const interactionModelsPath = path.join(skillPackagePath, Constants.InteractionsModelFolderName, Constants.CustomFolderName);
    return {
        skillPackagePath,
        conversationsPath,
        dataStorePackagesPath,
        dependenciesPath,
        promptsPath,
        displayPath,
        interactionModelsPath,
        tasksPath,
        assetsPath,
        ispPath,
    };
}
//# sourceMappingURL=data:application/json;base64,