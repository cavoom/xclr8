import fs from "fs-extra";
import path from "path";
import { compileProject } from "./compile";
import { AlexaConversations } from "./ast";
/**
 * Write an Assembly to the outDir.
 *
 * @param assembly to synthesize
 * @param outDir directory to synthesize assembly to
 */
export async function synthesizeProject(project) {
    const outDirPath = path.isAbsolute(project.config.outDir)
        ? project.config.outDir
        : path.join(project.config.rootDir, project.config.outDir);
    await fs.mkdir(outDirPath, { recursive: true });
    const compiledProject = compileProject(project);
    await Promise.all(Object.entries(compiledProject.modules).map(async ([relativeFilePath, compiledModule]) => {
        var _a;
        const outputFile = path.join(outDirPath, relativeFilePath);
        const outputDir = path.dirname(outputFile);
        (_a = compiledModule.expressions) === null || _a === void 0 ? void 0 : _a.forEach((expr) => {
            var _a;
            if (expr.kind === "QualifiedNameDeclaration" &&
                ((_a = expr.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call" &&
                (expr.expression.name === AlexaConversations.apl || expr.expression.name === AlexaConversations.apla)) {
                const templatePath = expr.expression.arguments.path.arguments;
                if (templatePath) {
                    // update the path in the ASKIR to be relative from the directory the file is output from
                    /*
                     * Given the following file system:
                     * ```
                     * response/prompts/AlexaConversationsBye/document.json
                     * assets/my-template/document.json
                     * src/dialog.acdl
                     * src/local.json
                     * ```
                     *
                     * And the ACDL declarations:
                     * ```acdl
                     * bye = apla("../response/prompts/AlexaConversationsBye/document.json")
                     * my_template = apla("../assets/my-template/document.json")
                     * local = apla("./local.json")
                     * ```
                     *
                     * The first two paths, `bye` and `my_template` remain un-changed since
                     * they are the same relative path from `build/` as they are from `src/
                     *
                     * The `local` path is updated since we do not copy `local.json` to `build/` and
                     * the relative path from `build/` to `src/local.json` is `../src/local.json`
                     *
                     * Note: if a developer uses the `local` variant of storing templates, their `.npmignore`
                     * configuration should make sure that `src/` is included in the package or else the
                     * `.tgz` output by `npm pack` will not contain the templates and is thus broken.
                     */
                    const moduleFilePath = path.dirname(path.join(project.config.rootDir, project.config.srcDir, relativeFilePath));
                    const absoluteTemplatePath = path.resolve(moduleFilePath, templatePath);
                    const relativeFromBuildPath = path.relative(outputDir, absoluteTemplatePath);
                    expr.expression.arguments.path.arguments = relativeFromBuildPath;
                }
            }
        });
        await fs.mkdir(outputDir, { recursive: true });
        await fs.writeFile(outputFile, JSON.stringify(compiledModule, null, 2));
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGhlc2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zeW50aGVzaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMxQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFHeEIsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN6QyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFekM7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLGlCQUFpQixDQUFDLE9BQWdCO0lBQ3RELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdkQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTTtRQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTdELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUU5QyxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFaEQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFOztRQUN2RixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFM0MsTUFBQSxjQUFjLENBQUMsV0FBVywwQ0FBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTs7WUFDM0MsSUFDRSxJQUFJLENBQUMsSUFBSSxLQUFLLDBCQUEwQjtnQkFDeEMsQ0FBQSxNQUFBLElBQUksQ0FBQyxVQUFVLDBDQUFFLElBQUksTUFBSyxNQUFNO2dCQUNoQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFDckc7Z0JBQ0EsTUFBTSxZQUFZLEdBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3ZFLElBQUksWUFBWSxFQUFFO29CQUNoQix5RkFBeUY7b0JBRXpGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VCQXlCRztvQkFFSCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO29CQUNoSCxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDO29CQUN4RSxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLG9CQUFvQixDQUFDLENBQUM7b0JBQzVFLElBQUksQ0FBQyxVQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDO2lCQUMzRTthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyJ9