import immutable from "immutable";
import * as ask from "./ast";
import { AlexaConversations, AlexaSchema, AlexaConversationsNamespace, isAnnotationTarget, AlexaSchemaNamespace, BuiltinsNamespace, } from "./ast";
import { Constants } from "./constants";
import { Type } from "./type";
import { ResponsePurpose } from "./responseInfo";
import { getName } from "./util";
/**
 * An Apply represents a Call to an Action, Dialog or Type.
 *
 * This class provides a lazily-evaluated API for querying this call's AST
 * for type checking and type inference.
 */
export class Apply {
    constructor(checker, call, decl, prev, returnType, argumentIndex, genericEnvironment, genericArguments) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        Object.defineProperty(this, "checker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: checker
        });
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: call
        });
        Object.defineProperty(this, "decl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: decl
        });
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Apply"
        });
        Object.defineProperty(this, "argumentDeclarations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "argumentDeclIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "requiredArguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "returnType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "arguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "genericEnvironment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "genericArguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (prev) {
            this.argumentDeclarations = prev.argumentDeclarations;
            this.argumentDeclIndex = prev.argumentDeclIndex;
            this.requiredArguments = prev.requiredArguments;
            this.returnType = returnType;
            this.arguments = argumentIndex;
            this.genericEnvironment = genericEnvironment;
            this.genericArguments = genericArguments;
        }
        else {
            if (decl.kind === "Type") {
                if (decl.isFunction()) {
                    this.argumentDeclarations = decl.getFunctionArgumentDeclarations();
                }
                else {
                    this.argumentDeclarations = decl.properties;
                }
            }
            else if (decl.kind === "TypeDeclaration") {
                this.argumentDeclarations = (_b = (_a = this.checker.instantiateTypeDeclaration(decl)) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.map((prop) => {
                    var _a, _b, _c;
                    const arg = new ask.ArgumentDeclaration(new ask.Name(prop.name), (_a = prop.type) === null || _a === void 0 ? void 0 : _a.toTypeReference(), undefined, (_c = (_b = prop.declaration) === null || _b === void 0 ? void 0 : _b.annotations) === null || _c === void 0 ? void 0 : _c.map((a) => a.clone()), undefined);
                    decl.setAsParentOn(arg);
                    return arg;
                });
            }
            else {
                this.argumentDeclarations = decl.arguments;
            }
            if (this.argumentDeclarations) {
                (_c = this.argumentDeclarations) === null || _c === void 0 ? void 0 : _c.map((argDecl, index) => {
                    var _a;
                    const argName = typeof (argDecl === null || argDecl === void 0 ? void 0 : argDecl.name) === "string" ? argDecl.name : (_a = argDecl === null || argDecl === void 0 ? void 0 : argDecl.name) === null || _a === void 0 ? void 0 : _a.name;
                    if (argName) {
                        this.argumentDeclIndex[argName] = argDecl;
                        this.argumentDeclIndex[index] = argDecl;
                    }
                });
            }
            const required = [];
            if (this.argumentDeclarations) {
                for (const arg of this.argumentDeclarations) {
                    const argName = typeof arg.name === "string" ? arg.name : (_d = arg.name) === null || _d === void 0 ? void 0 : _d.name;
                    if (argName && arg.type) {
                        if (arg.kind === "Property" &&
                            !arg.type.isOptional() &&
                            !arg.type.isArgs() &&
                            ((_e = arg.declaration) === null || _e === void 0 ? void 0 : _e.kind) === "TypeProperty" &&
                            ((_f = arg.declaration) === null || _f === void 0 ? void 0 : _f.optional) !== true) {
                            required.push(argName);
                        }
                        else if (arg.kind === "ArgumentDeclaration" &&
                            checker.qualifyName(arg, (_g = arg.type.name) === null || _g === void 0 ? void 0 : _g.name) !== AlexaSchema.Optional &&
                            checker.qualifyName(arg, (_h = arg.type.name) === null || _h === void 0 ? void 0 : _h.name) !== AlexaConversations.Args &&
                            arg.defaultExpression === undefined) {
                            required.push(argName);
                        }
                    }
                }
            }
            this.requiredArguments = [...required];
        }
    }
    /**
     * Instantiate this static Apply instance within a local TypeChecker environment.
     *
     * @param localChecker the new environment in which to instantiate the Apply.
     */
    instantiate(localChecker) {
        var _a, _b, _c;
        if (this.isList()) {
            return (_a = resolveType(this.getReturnType())) === null || _a === void 0 ? void 0 : _a.apply(this.call, localChecker);
        }
        const actionLocal = localChecker.getThing(this.checker.lookupCallDeclaration(this.call));
        if (actionLocal === undefined || actionLocal.origin === undefined || actionLocal.origin.kind === "ArgumentDeclaration") {
            // we only support instantiating actions for concrete Action/Dialog Declaration expressions.
            return undefined;
        }
        return new Apply(localChecker, this.call, actionLocal.origin, this, resolveType(this.getReturnType()), this.getArguments(), undefined, // this.getGenericEnvironment(),
        (_c = (_b = this.getGenericArguments()) === null || _b === void 0 ? void 0 : _b.map((t) => resolveType(t))) !== null && _c !== void 0 ? _c : null);
        // resolve type parameters
        function resolveType(type, hasTypeParameters = type === null || type === void 0 ? void 0 : type.hasTypeParameters()) {
            var _a, _b, _c, _d;
            if (type === undefined) {
                return undefined;
            }
            if (hasTypeParameters === false) {
                return type;
            }
            if (((_a = type.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "TypeParameter") {
                return (_c = (_b = localChecker.types) === null || _b === void 0 ? void 0 : _b.get(type.declaration)) !== null && _c !== void 0 ? _c : type;
            }
            return new Type(type.checker, type.declaration, (_d = type.genericArguments) === null || _d === void 0 ? void 0 : _d.map((t) => resolveType(t, hasTypeParameters)), type.functionArgumentNames);
        }
    }
    isList() {
        return this.decl.kind === "Type" && this.decl.isList();
    }
    getListItems() {
        if (this.isList() && ask.isListLiteral(this.call.arguments)) {
            return this.call.arguments.items.map((item) => item.item);
        }
        return undefined;
    }
    isArgs() {
        return this.decl.kind === "Type" && this.decl.isArgs();
    }
    isType() {
        return (this.decl.kind === "Type" && !this.decl.isFunction()) || this.decl.kind === "TypeDeclaration";
    }
    isIs() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.is;
    }
    isIsInCatalog() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.isInCatalog;
    }
    isIn() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.in;
    }
    isWhen() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.when;
    }
    isEq() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Eq;
    }
    isNeq() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Neq;
    }
    isAnd() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.And;
    }
    isOr() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Or;
    }
    isNot() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Not;
    }
    isGt() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Gt;
    }
    isGte() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Gte;
    }
    isLt() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Lt;
    }
    isLte() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Lte;
    }
    /**
     * Check if this call is to the `com.amazon.alexa.ask.conversations.skill` action.
     */
    isSkillAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.skill;
    }
    /**
     * Check if this call is to the `com.amazon.alexa.ask.conversations.Skill` type.
     */
    isSkillType() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Skill;
    }
    /**
     * Checks if this apply is targeting the core `annotation` action.
     */
    isAnnotationAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.annotation;
    }
    /**
     * Checks if the target of this Apply is an action annotated with the `@annotation` meta-annotation?
     */
    isAnnotation() {
        var _a;
        return (this.isAction() &&
            this.decl.kind === "ActionDeclaration" &&
            ((_a = this.decl.annotations) === null || _a === void 0 ? void 0 : _a.find((a) => this.checker.qualifyName(this.decl, a.call.name) === AlexaConversations.annotation)) !== undefined);
    }
    /**
     * Get the `allowMultiple` field from an instance of the meta-annotation, `com.amazon.alexa.ask.conversations.Annotation`.
     *
     * @returns true/false if this is an instance of `Annotation`, otherwise `undefined.
     */
    getAnnotationAllowMultiple() {
        if (this.isAnnotationAction()) {
            const allowMultiple = this.getArgumentValueAndResolveToCallIfNameRef("allowMultiple");
            if ((allowMultiple === null || allowMultiple === void 0 ? void 0 : allowMultiple.kind) === "Call" && typeof allowMultiple.arguments === "boolean") {
                return allowMultiple.arguments;
            }
            return false;
        }
        return undefined;
    }
    /**
     * Get the `targets` field if this is a call to the meta-annotation, `com.amazon.alexa.ask.conversations.Annotation`.
     *
     * Ex.
     * ```
     * // returns [AnnotationTarget.Type]
     * @Annotation(targets = [AnnotationTarget.Type])
     * ..
     * ```
     */
    getAnnotationTargets() {
        if (this.isAnnotationAction()) {
            const annotationTargets = this.getArgumentValueAndResolveToCallIfNameRef("targets");
            if ((annotationTargets === null || annotationTargets === void 0 ? void 0 : annotationTargets.kind) === "Call" && ask.isListLiteral(annotationTargets.arguments)) {
                return annotationTargets.arguments.items
                    .map((item) => {
                    var _a, _b, _c, _d;
                    if (((_a = item.item) === null || _a === void 0 ? void 0 : _a.kind) === "PropertyReference") {
                        const name = (_b = item.item.name) === null || _b === void 0 ? void 0 : _b.name;
                        const exprType = this.checker.getType(item.item.expression);
                        // if this is a reference to `enum AnnotationTarget`, then its type should be `Type<AnnotationTarget>`.
                        const isAnnotationTargetEnum = (exprType === null || exprType === void 0 ? void 0 : exprType.isType()) && ((_c = exprType.getTypeType()) === null || _c === void 0 ? void 0 : _c.isAnnotationTarget()); // getTypeType() => AnnotationTarget type
                        if (isAnnotationTargetEnum && isAnnotationTarget(name)) {
                            // ex. AnnotationTarget.Dialog
                            // name => Dialog
                            // exprType => Type<AnnotationTarget>
                            // yields AnnotationTarget.Dialog
                            return name;
                        }
                    }
                    else if (((_d = item.item) === null || _d === void 0 ? void 0 : _d.kind) === "NameReference") {
                    }
                    return undefined;
                })
                    .filter((t) => t !== undefined);
            }
        }
        return undefined;
    }
    isAction() {
        return this.decl.kind === "ActionDeclaration" || (this.decl.kind === "Type" && this.decl.isAction());
    }
    isBuiltin() {
        var _a, _b;
        return ((_b = (_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.startsWith(AlexaConversationsNamespace)) || false;
    }
    isUserDefinedApi() {
        var _a;
        return (this.isAction() || (this.decl.kind === "Type" && ((_a = this.decl.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "ActionDeclaration")) && !this.isBuiltin();
    }
    isDialog() {
        return this.decl.kind === "DialogDeclaration" || (this.decl.kind === "Type" && this.decl.isDialog());
    }
    isBinaryOperator() {
        var _a, _b;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) !== undefined && Constants.BINARY_OPERATOR_ACTIONS_SET.has((_b = this.decl.name) === null || _b === void 0 ? void 0 : _b.name);
    }
    isOperator() {
        var _a, _b;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) !== undefined && Constants.OPERATOR_ACTIONS_SET.has((_b = this.decl.name) === null || _b === void 0 ? void 0 : _b.name);
    }
    // This method tracks the legal data binding function calls in ACDL syntax. Might need a more precise name for this function..
    isNativeAction() {
        return this.isSize() || this.isLength() || this.isExists() || this.isGetListItem() || this.isIs();
    }
    isFileAccessAction() {
        var _a, _b;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) !== undefined && Constants.FILE_ACCESS_ACTIONS_SET.has((_b = this.decl.name) === null || _b === void 0 ? void 0 : _b.name);
    }
    isGetListItem() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.getListItem;
    }
    isEnsure() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.ensure;
    }
    isExpect() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.expect;
    }
    isConfirmAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.confirmAction;
    }
    isConfirmActionAct() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.ConfirmAction;
    }
    /**
     * Checks if this is a call to the `confirmArgs` action.
     */
    isConfirmArgs() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.confirmArgs;
    }
    /**
     * Checks if this is a call to the `ConfirmArgs` Dialog Act Type.
     */
    isConfirmArgsAct() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.ConfirmArgs;
    }
    /**
     * Checks if this is a call to the `ConfirmArgs` Dialog Act Type.
     */
    isConfirmArguments() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.ConfirmArguments;
    }
    isUtterances() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.utterances;
    }
    isTouch() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.touch;
    }
    isMultiModalEvent() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.multiModalEvent;
    }
    isEventDecl() {
        return this.isUtterances() || this.isTouch() || this.isMultiModalEvent() || this.isIntent();
    }
    isCatalogDecl() {
        return this.isListBasedCatalogAction() || this.isExtendCatalogAction() || this.isBuiltinCatalogAction();
    }
    isUtterance() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Utterance;
    }
    isIntent() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.intent;
    }
    isAlexaLine() {
        return this.isResponse() || this.isConfirmAction();
    }
    isResponse() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.response;
    }
    isDelegateToIntent() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.delegateToIntent;
    }
    isIntentRequest() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.IntentRequest;
    }
    isDelegateRequest() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.delegateRequest;
    }
    isReceived() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.received;
    }
    isRequestArguments() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.RequestArguments;
    }
    isResetAllArguments() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.ResetAllArguments;
    }
    isResetArguments() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.ResetArguments;
    }
    isEnsureArgOrder() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.EnsureArgOrder;
    }
    isRequestAct() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Request;
    }
    isLength() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.length;
    }
    isAlexaSchemaNamespace() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.startsWith(AlexaSchemaNamespace)) !== null && _c !== void 0 ? _c : false;
    }
    isAlexaConversationsNamespace() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.startsWith(AlexaConversationsNamespace)) !== null && _c !== void 0 ? _c : false;
    }
    isAlexaBuiltinsNamespace() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.startsWith(BuiltinsNamespace)) !== null && _c !== void 0 ? _c : false;
    }
    isSize() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.size;
    }
    isUserSays() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.userSays;
    }
    isExists() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.exists;
    }
    isEvents() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.events;
    }
    isWelcome() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.welcome;
    }
    isLocaleAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.locale;
    }
    isVarArgs() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Args;
    }
    isValidateArg() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.validateArg;
    }
    isVariations() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.variations;
    }
    isAplaAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.apla;
    }
    isAplAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.apl;
    }
    isReferableAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.referable;
    }
    isCatalogAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.catalog;
    }
    isCatalogType() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.Catalog;
    }
    isListBasedCatalogAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.listBasedCatalog;
    }
    isExtendCatalogAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.extendCatalog;
    }
    isBuiltinCatalogAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.builtinCatalog;
    }
    isGeneratedAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.generated;
    }
    isGetAllNamesAction() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.getAllNames;
    }
    getName() {
        var _a;
        return (_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name;
    }
    getShortName() {
        var _a;
        return ((_a = this.decl.name) === null || _a === void 0 ? void 0 : _a.name) ? getName(this.decl.name.name) : undefined;
    }
    /**
     * Gets a Thing representing an Argument Value.
     *
     * @param name name of the argument value.
     * @returns a Thing representing the value (if it can be determined) or `undefined`.
     */
    getArgumentValueThing(name) {
        return this.checker.getThing(this.getArgumentValue(name));
    }
    /**
     * Gets a List of Thing representing all the argument values
     * @returns a List of Thing representing all the argument values
     */
    getArgumentValueThingList() {
        return this.getArgumentsList().map((argument) => this.checker.getThing(argument.value));
    }
    /**
     * Get the specific argument value by name
     * @param name name string or ask.Name
     */
    getArgumentValue(name) {
        var _a;
        return (_a = this.getArgument(name)) === null || _a === void 0 ? void 0 : _a.value;
    }
    /**
     * Get the specific argument by name
     * @param name name string or ask.Name
     */
    getArgument(name) {
        var _a, _b, _c, _d;
        const args = this.getArguments();
        const nameStr = name === undefined
            ? undefined
            : typeof name === "string"
                ? name
                : name.kind === "Name"
                    ? name.name
                    : ((_b = (_a = name.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.isAction()) && name.argumentName
                        ? (_d = (_c = name.parent.parent.concreteToAbstractArgumentNames) === null || _c === void 0 ? void 0 : _c[name.argumentName]) !== null && _d !== void 0 ? _d : name.argumentName
                        : name.argumentName;
        if (args !== undefined && nameStr !== undefined) {
            // return args[this.argumentNameMappings?.[nameStr] ?? nameStr];
            return args[nameStr];
        }
        return undefined;
    }
    /**
     * Get the specific argument value by name, if it's a nameReference, resolve it
     * @param name name string or ask.Name
     * @returns
     */
    getArgumentValueAndResolveIfNameRef(name) {
        const value = this.getArgumentValue(name);
        if (this.checker.isNameReference(value)) {
            return this.checker.resolveNameReference(value);
        }
        return value;
    }
    /**
     * Get the specific argument value by name, if the value kind is nameReference, resolve it to the call
     *
     * E.G.
     * ```
     * apla = APLA {}
     * temp = apla
     * response(temp, Bye {})
     *
     * if we have the response apply
     * apply.getArgumentValueAndResolveToCallIfNameRef('response') => APLA {}
     * ```
     * @param name name string or ask.Name
     */
    getArgumentValueAndResolveToCallIfNameRef(name) {
        const value = this.getArgumentValue(name);
        if (this.checker.isNameReference(value)) {
            return this.checker.resolveNameReferenceToCall(value);
        }
        return value;
    }
    getArgumentsList() {
        var _a;
        return Object.values((_a = this.getArguments()) !== null && _a !== void 0 ? _a : {});
    }
    getArgumentsThing() {
        var _a;
        return Object.entries((_a = this.getArguments()) !== null && _a !== void 0 ? _a : {})
            .map(([name, arg]) => ({
            [name]: this.checker.getThing(arg),
        }))
            .reduce((a, b) => ({ ...a, ...b }), {});
    }
    /**
     * Get a map or argument name to the ArgumentValue node passed to this call.
     */
    getArguments() {
        var _a, _b, _c, _d, _e, _f, _g;
        if (this.arguments === undefined) {
            this.arguments = {};
            if (this.call.arguments === undefined || Array.isArray(this.call.arguments)) {
                let isPositionalAllowed = true;
                let i = 0;
                let loc;
                for (const argument of this.call.arguments || []) {
                    if ((_a = argument.name) === null || _a === void 0 ? void 0 : _a.name) {
                        isPositionalAllowed = false;
                        this.arguments[argument.name.name] = argument;
                    }
                    else if (argument.index !== undefined) {
                        if (isPositionalAllowed) {
                            const argDecl = (_b = this.argumentDeclarations) === null || _b === void 0 ? void 0 : _b[i];
                            const isVarArgs = argDecl !== undefined &&
                                ((_c = argDecl.type) === null || _c === void 0 ? void 0 : _c.name) &&
                                this.checker.qualifyName(argDecl.type.name, argDecl.type.name.name) === AlexaConversations.Args;
                            const argName = typeof (argDecl === null || argDecl === void 0 ? void 0 : argDecl.name) === "string" ? argDecl.name : (_d = argDecl === null || argDecl === void 0 ? void 0 : argDecl.name) === null || _d === void 0 ? void 0 : _d.name;
                            // argName = argName ? this.argumentNameMappings?.[argName] ?? argName : argName;
                            if (argName) {
                                if (isVarArgs) {
                                    // if this is a var-args, construct a list literal call
                                    let arg = this.arguments[argName];
                                    let listCall = arg === null || arg === void 0 ? void 0 : arg.value;
                                    let list = listCall === null || listCall === void 0 ? void 0 : listCall.arguments;
                                    if (list === undefined) {
                                        list = new ask.ListLiteral([]);
                                        listCall = new ask.Call(new ask.Name(AlexaConversations.Args), list, undefined);
                                        arg = new ask.Argument(undefined, argument.index, listCall);
                                        this.call.setAsParentOn(arg);
                                        this.arguments[argName] = arg;
                                    }
                                    const item = new ask.ListItem((_e = argument === null || argument === void 0 ? void 0 : argument.value) === null || _e === void 0 ? void 0 : _e.clone(), list.items.length);
                                    list.setAsParentOn(item);
                                    list.items.push(item);
                                    if (loc && ((_f = argument.loc) === null || _f === void 0 ? void 0 : _f.end)) {
                                        loc.end = (_g = argument === null || argument === void 0 ? void 0 : argument.loc) === null || _g === void 0 ? void 0 : _g.end;
                                    }
                                    else {
                                        loc = argument.loc;
                                    }
                                    listCall.loc = loc;
                                }
                                else {
                                    this.arguments[argName] = argument;
                                    i += 1; // increment the declaration index only if we're not var-args
                                }
                            }
                        }
                    }
                }
            }
        }
        return this.arguments || undefined;
    }
    /**
     * Get the return type of this call.
     *
     * Infers generic arguments and computing generic return type if necessary
     *
     * @returns the return type if it is known, otherwise `undefined`.
     */
    getReturnType(seen) {
        var _a, _b;
        if (this.returnType === undefined) {
            this.returnType = (_a = this.resolveReturnType(seen)) !== null && _a !== void 0 ? _a : null;
        }
        return (_b = this.returnType) !== null && _b !== void 0 ? _b : undefined;
    }
    resolveReturnType(seen) {
        if (this.decl.kind === "Type") {
            if (this.decl.isFunctionN()) {
                return this.decl.getFunctionReturnType();
            }
            if (this.decl.isFunction()) {
                return this.checker.thing;
            }
            return this.decl;
        }
        if (this.decl.genericArguments === undefined) {
            if (this.decl.kind === "TypeDeclaration") {
                return this.checker.instantiateTypeDeclaration(this.decl);
            }
            return this.checker.instantiateTypeReference(this.decl.returnType);
        }
        if (this.decl.kind === "TypeDeclaration") {
            const args = this.getGenericArguments(seen);
            if (args !== undefined) {
                return this.checker.instantiateTypeDeclaration(this.decl, args);
            }
        }
        else {
            // ActionDeclaration and DialogDeclaration
            const env = this.getGenericEnvironment(seen);
            if (env !== undefined) {
                return this.checker.instantiateTypeReference(this.decl.returnType, env);
            }
        }
        return undefined;
    }
    /**
     * Get the type of an argument or property
     */
    getType(arg, context) {
        var _a, _b, _c;
        if (arg === undefined) {
            // `undefined` refers to a primitive expression's arguments, e.g. `null`, `string`, `[]`.
            if (this.decl.kind === "Type") {
                return this.decl;
            }
        }
        else if (arg.kind === "Argument") {
            const argDecl = ((_a = arg.name) === null || _a === void 0 ? void 0 : _a.name) ? this.argumentDeclIndex[arg.name.name] : (_b = this.argumentDeclarations) === null || _b === void 0 ? void 0 : _b[arg.index];
            if (argDecl) {
                return this.getType(argDecl, context);
            }
        }
        else {
            const name = typeof arg.name === "string" ? arg.name : (_c = arg.name) === null || _c === void 0 ? void 0 : _c.name;
            const decl = this.argumentDeclIndex[name];
            if (decl.kind === "ArgumentDeclaration") {
                return this.checker.instantiateTypeReference(decl.type, this.getGenericEnvironment());
            }
            return decl.type;
        }
        return undefined;
    }
    /**
     * Retuns a mapping of generic argument names to their inferred type. For instance consider the action declaration:
     *
     *    action Nothing getWeather<T,K>(T something, K somethingElse)
     *
     * For the call/apply below:
     *    sample {
     *      ...
     *      getWeather('x', 1)
     *      ...
     *    }
     * The return value will be: { "T" : <Type object refering to string>, "K": <Type object refering to number>}
     *
     * For anonymous functions the generic arguments are also types as opposed to something like T or K above.
     * For instance consider the reusable dialog declaration containing an anonymous function receiving Optional<T>
     * and returning Nothing:
     *     dialog Nothing reusableDialog<T>( Action1<Optional<T>, Nothing> anonAction, T value) {
     *        sample {
     *            ...
     *            anonAction(value);
     *            ...
     *        }
     *     }
     * for the call/apply inside the sample the generic arguments are the types Optional<T> and Nothing
     * seen in Action1<Optional<T>, Nothing> anonAction
     * The return value for this call is {"T": <Type object refering to T>, "Nothing": <Type object refering to Nothing>}
     * @param seen used  to prevent infinite recursion in type lookups
     */
    getGenericEnvironment(seen) {
        var _a, _b;
        if (this.genericEnvironment === undefined) {
            this.genericEnvironment = this.genericEnvironment = (_a = this.resolveGetGenericEnvironment(seen)) !== null && _a !== void 0 ? _a : null;
        }
        return (_b = this.genericEnvironment) !== null && _b !== void 0 ? _b : undefined;
    }
    /**
     * Does the actual work in getGenericEnvironment.
     * @param seen used  to prevent infinite recursion in type lookups
     */
    resolveGetGenericEnvironment(seen) {
        var _a;
        const genericArgumentTypes = this.getGenericArguments(seen);
        return (_a = this.decl.genericArguments) === null || _a === void 0 ? void 0 : _a.map((declGenericArgument, i) => {
            var _a;
            if ((declGenericArgument === null || declGenericArgument === void 0 ? void 0 : declGenericArgument.kind) === "TypeParameter") {
                const type = genericArgumentTypes === null || genericArgumentTypes === void 0 ? void 0 : genericArgumentTypes[i];
                return type ? { [(_a = declGenericArgument === null || declGenericArgument === void 0 ? void 0 : declGenericArgument.name) === null || _a === void 0 ? void 0 : _a.name]: type } : {};
            }
            else if ((declGenericArgument === null || declGenericArgument === void 0 ? void 0 : declGenericArgument.kind) === "Type") {
                // The generic argument here might look like Apply<Optional<T>,K>. We need to find nested generic arguments T and K.
                // Because of that, one generic argument like Apply<Optional<T>,K> might turn into many: [T,K]. The map below will
                // add a nested dimension to the array that will be flatened below.
                const nestedGenericArguments = declGenericArgument.getNestedGenericArguments();
                return nestedGenericArguments.map((nestedGenericArgument) => {
                    var _a;
                    return { [(_a = nestedGenericArgument === null || nestedGenericArgument === void 0 ? void 0 : nestedGenericArgument.name) === null || _a === void 0 ? void 0 : _a.name]: nestedGenericArgument };
                });
            }
            else {
                return {};
            }
        }).flat().reduce((a, b) => ({ ...a, ...b }), {});
    }
    getGenericArguments(seen) {
        var _a, _b;
        if (this.genericArguments === undefined) {
            this.genericArguments = (_a = this.resolveGenericArguments(seen)) !== null && _a !== void 0 ? _a : null;
        }
        return (_b = this.genericArguments) !== null && _b !== void 0 ? _b : undefined;
    }
    resolveGenericArguments(seen) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        if (this.decl.kind === "Type" && this.decl.genericArguments !== undefined) {
            // TODO: infer
            return this.decl.genericArguments;
        }
        if (this.decl.genericArguments === undefined) {
            return undefined;
        }
        if (((_a = this.call.genericArguments) === null || _a === void 0 ? void 0 : _a.length) === this.decl.genericArguments.length) {
            return this.call.genericArguments.map((a) => { var _a; return (_a = this.checker.instantiateTypeReference(a)) !== null && _a !== void 0 ? _a : this.checker.thing; });
        }
        if (this.call.genericArguments === undefined) {
            // infer the arguments from the values
            if (ask.isListLiteral(this.call.arguments) && this.decl.kind === "TypeDeclaration") {
                // we're instantiating a List declaration
                const listValueType = this.checker.getType(this.call.arguments, false, seen);
                const listDeclType = this.checker.instantiateTypeDeclaration(this.decl, this.decl.genericArguments.map((arg) => this.checker.instantiateTypeParameter(arg)));
                if (listValueType && listDeclType) {
                    // the list could be a complex sub type
                    // e.g. type MyList<A> : List<List<A>>
                    // e.g. type MyList2<A> : MyList<List<A>> : List<List<List<A>>
                    // ... so we first reduce it to the value's type
                    return this.decl.genericArguments.map((genericArg) => { var _a, _b; return (_b = inferTypeParameter((_a = genericArg.name) === null || _a === void 0 ? void 0 : _a.name, listDeclType, listValueType)) !== null && _b !== void 0 ? _b : this.checker.thing; });
                }
            }
            else {
                const declarations = this.decl.kind === "Type" ? this.decl.properties : this.argumentDeclarations;
                const args = this.getArguments();
                // store a mapping of Type Parameter to:
                // 1. `string` - another type parameter in the parameter list
                // 2. Type - a type inferred from the values
                const inferredTypes = {};
                // first pass over the generic arguments, infer what we can from the values
                for (const genericArg of this.decl.genericArguments) {
                    let inferredType;
                    if (args !== undefined && declarations !== undefined) {
                        for (const argDecl of declarations) {
                            const argName = typeof argDecl.name === "string" ? argDecl.name : (_b = argDecl.name) === null || _b === void 0 ? void 0 : _b.name;
                            const arg = args[argName];
                            if (arg === undefined || argDecl.type === undefined) {
                                continue;
                            }
                            const argType = this.checker.getType(arg.value, false, seen);
                            if (argType === undefined) {
                                continue;
                            }
                            const argDeclType = argDecl.kind === "ArgumentDeclaration" ? this.checker.instantiateTypeReference(argDecl.type) : argDecl.type;
                            if (argDeclType) {
                                const inferred = inferTypeParameter((_c = genericArg === null || genericArg === void 0 ? void 0 : genericArg.name) === null || _c === void 0 ? void 0 : _c.name, argDeclType, argType);
                                inferredType = (_d = inferredType === null || inferredType === void 0 ? void 0 : inferredType.union(inferred)) !== null && _d !== void 0 ? _d : inferred;
                            }
                        }
                    }
                    if (inferredType) {
                        // we found a value in the arguments that informs this generic argument
                        inferredTypes[(_e = genericArg === null || genericArg === void 0 ? void 0 : genericArg.name) === null || _e === void 0 ? void 0 : _e.name] = inferredType;
                    }
                    else if ((genericArg === null || genericArg === void 0 ? void 0 : genericArg.kind) === "TypeParameter") {
                        // we did not find a value for the argument, let's see if there are default types
                        if (genericArg.constraints === undefined || genericArg.constraints.length === 0) {
                            // this parameter has no constraints, default to Thing.
                            inferredTypes[(_f = genericArg.name) === null || _f === void 0 ? void 0 : _f.name] = this.checker.thing;
                        }
                        else if (genericArg.constraints.length > 1) {
                            // this generic arg has multiple constraints, e.g. T : A : B
                            // we don't yet support this case, for now we will default it to Thing.
                            inferredTypes[(_g = genericArg.name) === null || _g === void 0 ? void 0 : _g.name] = this.checker.thing;
                        }
                        else if (genericArg.constraints.length === 1) {
                            // this generic arg has a single constrain, e.g. T : V
                            // default to that type
                            const defaultType = this.checker.getType(genericArg.constraints[0], undefined, seen);
                            if (((_h = defaultType === null || defaultType === void 0 ? void 0 : defaultType.declaration) === null || _h === void 0 ? void 0 : _h.kind) === "TypeParameter") {
                                // if the constraint is another type parameter, e.g. <T : V, V>
                                // then use that name as a place-holder and attempt to resolve it in the final pass.
                                inferredTypes[(_j = genericArg.name) === null || _j === void 0 ? void 0 : _j.name] = (_k = defaultType.declaration.name) === null || _k === void 0 ? void 0 : _k.name;
                            }
                            else if (defaultType !== undefined) {
                                // this is a concrete type
                                inferredTypes[(_l = genericArg.name) === null || _l === void 0 ? void 0 : _l.name] = defaultType;
                            }
                        }
                    }
                }
                // second pass over generic arguments where we resolve the inference results
                return this.decl.genericArguments.map((genericArg) => { var _a, _b; return (_b = resolveInferredArg((_a = genericArg === null || genericArg === void 0 ? void 0 : genericArg.name) === null || _a === void 0 ? void 0 : _a.name)) !== null && _b !== void 0 ? _b : this.checker.thing; });
                /**
                 * Resolves a named argument from the results of the first pass.
                 */
                function resolveInferredArg(name, seen = immutable.Set()) {
                    if (name === undefined) {
                        return undefined;
                    }
                    const inferred = inferredTypes[name];
                    if (inferred === undefined) {
                        return undefined;
                    }
                    if (typeof inferred === "string") {
                        // the type is a place-holder referring to the inferred type of another generic argument
                        if (seen.has(inferred)) {
                            // encountered a loop, so the type is undefined.
                            return undefined;
                        }
                        // try and resolve the place-holder
                        return resolveInferredArg(inferred, seen.add(inferred));
                    }
                    if (inferred.genericArguments === undefined || inferred.genericArguments.length === 0) {
                        // this is a concrete type, terminate inference
                        return inferred;
                    }
                    // this is a generic type, we need to recursively resolve generic arguments that may be
                    // referencing other inferred generic arguments
                    // e.g foo<T : List<V>, V>(V value)
                    // foo("string")
                    // once we have inferred V => String
                    // we must then resolve T => List<V> => List<String>
                    return (function resolveType(type) {
                        if (type === undefined) {
                            return undefined;
                        }
                        if (type.genericArguments === undefined || type.genericArguments.length === 0) {
                            return type;
                        }
                        return new Type(type.checker, type.declaration, type.genericArguments.map((arg) => {
                            var _a, _b;
                            if (((_a = arg === null || arg === void 0 ? void 0 : arg.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "TypeParameter") {
                                const resolvedType = resolveInferredArg((_b = arg.declaration.name) === null || _b === void 0 ? void 0 : _b.name, seen);
                                if (resolvedType !== undefined) {
                                    return resolvedType;
                                }
                            }
                            return resolveType(arg);
                        }));
                    })(inferred);
                }
            }
        }
        return undefined;
    }
    /**
     * a util function help retrieve payload argumentDeclarations
     * @param apply
     */
    getPayloadValue() {
        if (this.isResponse() || this.isConfirmAction()) {
            let payloadValue = this.getArgumentValue("payload");
            if (payloadValue !== undefined) {
                payloadValue = this.checker.isNameReference(payloadValue)
                    ? this.checker.resolveNameReferenceToCall(payloadValue)
                    : payloadValue;
                return payloadValue;
            }
        }
        return undefined;
    }
    /**
     * get detailed response info for an Alexa response
     *
     * In current acdl, there's four response actions and eight response acts, it's hard to retrieve property in different kind of responses
     * This function try to collect all info an Alexa Response may have and represent them as ResponseInfo interface,
     * this new layer make it easier to get a specific property in an Alexa response
     *
     * E.G.
     * ```
     * ensure(
     *      RequestArguments {arguments = [getPerson.arguments.name], response = greeting_apla},
     *      RequestArguments {arguments = [getPerson.arguments.age], response = bye_apla}
     * )
     *
     * =>
     *
     * [
     *   {
     *     purpose: 'request',
     *     arguments: [getPerson.arguments.name],
     *     prompt: greeting_apla
     *   },
     *   {
     *     purpose: 'request',
     *     arguments: [getPerson.arguments.age],
     *     prompt: bye_apla
     *   }
     * ]
     * ```
     *
     * @returns
     */
    getResponseInfo() {
        const responseInfo = [];
        if (this.isConfirmAction()) {
            responseInfo.push({
                purpose: ResponsePurpose.ConfirmAction,
                actionName: this.getArgument("actionName"),
                prompt: this.getArgument("response"),
                payload: this.getArgument("payload"),
            });
        }
        else if (this.isConfirmArgs() || this.isEnsure()) {
            const argsValue = this.isConfirmArgs()
                ? this.getArgumentValueAndResolveToCallIfNameRef("confirmArgs")
                : this.getArgumentValueAndResolveToCallIfNameRef("requestArgs");
            if ((argsValue === null || argsValue === void 0 ? void 0 : argsValue.kind) === "Call" && ask.isListLiteral(argsValue.arguments)) {
                for (const confirmArguments of argsValue.arguments.items) {
                    let itemValue = confirmArguments.item;
                    if (this.checker.isNameReference(itemValue)) {
                        itemValue = this.checker.resolveNameReferenceToCall(itemValue);
                    }
                    // The expected value is ConfirmArguments Object Literal or RequestArguments Object Literal
                    if ((itemValue === null || itemValue === void 0 ? void 0 : itemValue.kind) === "Call") {
                        const argsApply = this.checker.getApply(itemValue, undefined);
                        responseInfo.push({
                            purpose: this.isConfirmArgs() ? ResponsePurpose.ConfirmArgs : ResponsePurpose.Request,
                            arguments: argsApply === null || argsApply === void 0 ? void 0 : argsApply.getArgument("arguments"),
                            prompt: argsApply === null || argsApply === void 0 ? void 0 : argsApply.getArgument("response"),
                        });
                    }
                }
            }
        }
        else if (this.isResponse()) {
            const sourceActValue = this.getArgumentValue("act");
            const actValue = this.checker.isNameReference(sourceActValue)
                ? this.checker.resolveNameReferenceToCall(sourceActValue)
                : sourceActValue;
            const actType = this.checker.getType(actValue);
            if ((actValue === null || actValue === void 0 ? void 0 : actValue.kind) === "Call") {
                const actApply = this.checker.getApply(actValue, undefined);
                responseInfo.push({
                    purpose: (actType === null || actType === void 0 ? void 0 : actType.isRequest())
                        ? ResponsePurpose.Request
                        : (actType === null || actType === void 0 ? void 0 : actType.isConfirmArgs())
                            ? ResponsePurpose.ConfirmArgs
                            : (actType === null || actType === void 0 ? void 0 : actType.isConfirmAction())
                                ? ResponsePurpose.ConfirmAction
                                : (actType === null || actType === void 0 ? void 0 : actType.isNotify())
                                    ? ResponsePurpose.Notify
                                    : (actType === null || actType === void 0 ? void 0 : actType.isOffer())
                                        ? ResponsePurpose.Offer
                                        : (actType === null || actType === void 0 ? void 0 : actType.isReqAlt())
                                            ? ResponsePurpose.ReqAlt
                                            : (actType === null || actType === void 0 ? void 0 : actType.isReqMore())
                                                ? ResponsePurpose.ReqMore
                                                : (actType === null || actType === void 0 ? void 0 : actType.isBye())
                                                    ? ResponsePurpose.Bye
                                                    : undefined,
                    arguments: actApply === null || actApply === void 0 ? void 0 : actApply.getArgument("arguments"),
                    actionName: actApply === null || actApply === void 0 ? void 0 : actApply.getArgument("actionName"),
                    carryOverArguments: actApply === null || actApply === void 0 ? void 0 : actApply.getArgument("carryOverArguments"),
                    success: actApply === null || actApply === void 0 ? void 0 : actApply.getArgument("success"),
                    prompt: this.getArgument("response"),
                    payload: this.getArgument("payload"),
                });
            }
        }
        return responseInfo;
    }
}
/**
 * Infer a TypeParameter's type by searching for it within an instantiated type.
 *
 * e.g. inferring T from passed in arguments.
 * ```
 * action T myAction(List<T> list)
 * List<String> list
 *
 * t = myAction(list)
 *
 * // declarationType: List<T>
 * // instantiatedType: List<String>
 * ```
 *
 * The declarationType is `List<T>` and the instantiatedType is List<String>. Searching
 * for `T` will find `String`.
 *
 * `T` is inferred as `String` from the passed in `List<String>`.
 *
 * @param parameter – type parameter to infer
 * @param declarationType – declaration signature of this type, e.g. List<T>
 * @param valueType – type of the value e.g. List<String>
 */
function inferTypeParameter(parameter, declaration, valueType) {
    var _a, _b, _c;
    if (valueType === undefined || declaration === undefined) {
        return undefined;
    }
    if (parameter === ((_a = declaration === null || declaration === void 0 ? void 0 : declaration.name) === null || _a === void 0 ? void 0 : _a.name)) {
        return valueType;
    }
    if (((_b = valueType.name) === null || _b === void 0 ? void 0 : _b.name) === ((_c = declaration.name) === null || _c === void 0 ? void 0 : _c.name)) {
        if (declaration.genericArguments !== undefined && valueType.genericArguments !== undefined) {
            for (let i = 0; i < declaration.genericArguments.length; i++) {
                const argumentDeclaration = declaration.genericArguments[i];
                const instantiated = valueType.genericArguments[i];
                if (instantiated !== undefined) {
                    const found = inferTypeParameter(parameter, argumentDeclaration, instantiated);
                    if (found) {
                        return found;
                    }
                }
            }
        }
    }
    else if (valueType.isOptional()) {
        // we currently have the problem where Optional<T> must be assignable to T
        // for this case, we will reduce an Optional<T> value to T and infer from that.
        return inferTypeParameter(parameter, declaration, valueType.getOptionalType());
    }
    else if (declaration.isOptional()) {
        // Optional<T> is effectively a union type, we want to traverse its type parameters (the items in its set) and not its extensions
        return inferTypeParameter(parameter, declaration.getOptionalType(), valueType);
    }
    else if (valueType.extensions) {
        for (const extension of valueType.extensions) {
            const found = inferTypeParameter(parameter, declaration, extension);
            if (found) {
                return found;
            }
        }
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,