import * as ask from "./ast";
import { TypeChecker } from "./checker";
import { Project } from "./project";
export interface CompiledProject {
    modules: Record<string, CompiledModule>;
}
export interface CompiledModule extends ask.Serialized<ask.Module> {
}
/**
 * Compile a Project to a record of relative build paths to serialized ASK IR files.
 *
 * @param project ACDL project to compile.
 */
export declare function compileProject(project: Project): CompiledProject;
/**
 * Compile source to valid ask-module JSON.
 *
 * @param project project containing the source.
 * @param module source module, either an ACDLFile or ask-module.
 * @param validateJsonSchema whether to validate JSON schema or not
 */
export declare function compileModule(project: Project, module: ask.Module, validateJsonSchema?: boolean): CompiledModule;
export interface ModuleCompileContext {
    checker: TypeChecker;
    moduleUri: string;
    /**
     * Needed to strip Optional argument values. Before this change there was Beta1 used to compile skills
     * and Beta2 used to compile modules (reusable components, core, etc).
     * For skills, the Beta1 code stripped Optional from everything, but it is only in argument
     * values that it makes a difference avoiding type mismatch errors in the backend.
     * We removed Beta1/Beta2 but we stll need to remove Optional when compiling dialogs
     */
    blockOptionalTypeReferences?: boolean;
    /**
     * Needed to replace void with nothing for non reusable dialogs. In skills the Beta1 code
     * present before this change replaced all voids with nothing, and the backend still relies on it
     * inside dialogs as I mention in other comments to detect deployable (non reusable) dialogs.
     */
    blockVoid?: boolean;
}
/**
 * Maps an internal AST Expression to its equivalent `@alexa/ask-module-spec` representation.
 *
 * @param data data to serialize
 */
export declare function compileExpression(data: ask.Node | (ask.Node | undefined)[] | undefined, context: ModuleCompileContext): any;
//# sourceMappingURL=compile.d.ts.map