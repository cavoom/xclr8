import * as os from "os";
import * as fs from "fs-extra";
import { v4 as uuid } from "uuid";
export class AskCliConfig {
    /**
     * Load the user's ASK CLI Config.
     *
     * @param path path of the cli_config - defaults to `~/.ask/cli_config`
     */
    constructor() {
        Object.defineProperty(this, "askCliConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cliConfigPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "errorLoadingAskCliConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.cliConfigPath = os.homedir() + "/.ask/cli_config";
        let cliConfigString;
        try {
            cliConfigString = fs.readFileSync(this.cliConfigPath).toString("utf8");
        }
        catch (err) {
            this.errorLoadingAskCliConfig = `cannot read config file: ${this.cliConfigPath}. Run 'ask configure'.`;
            return;
        }
        try {
            this.askCliConfig = JSON.parse(cliConfigString);
        }
        catch (err) {
            this.errorLoadingAskCliConfig = `failed to parse config file: ${this.cliConfigPath}`;
            return;
        }
    }
    hasConfig() {
        return !!this.askCliConfig;
    }
    createMachineId() {
        const machine_id = uuid();
        try {
            fs.writeFileSync(this.cliConfigPath, JSON.stringify({ ...(this.askCliConfig || {}), machine_id }, null, 2), "utf-8");
        }
        catch (error) {
            return "";
        }
        return machine_id;
    }
    getLwaProfile(profileName) {
        if (this.errorLoadingAskCliConfig) {
            throw new Error(this.errorLoadingAskCliConfig);
        }
        const lwaProfile = this.askCliConfig.profiles[profileName];
        if (lwaProfile === undefined) {
            this.errorLoadingAskCliConfig = `could not load profile '${profileName}' from ${this.cliConfigPath}`;
        }
        return lwaProfile;
    }
    getShareUsage() {
        const shareUsage = this.askCliConfig.share_usage;
        if (shareUsage !== undefined)
            return !!shareUsage;
        return true;
    }
    getMachineId() {
        return this.askCliConfig.machine_id;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNrLWNsaS1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXNrLWNsaS1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxFQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUMsTUFBTSxNQUFNLENBQUM7QUE4RGhDLE1BQU0sT0FBTyxZQUFZO0lBS3ZCOzs7O09BSUc7SUFDSDtRQVRBOzs7OztXQUF1QztRQUN2Qzs7Ozs7V0FBOEI7UUFDOUI7Ozs7O1dBQXlDO1FBUXZDLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLGtCQUFrQixDQUFDO1FBQ3ZELElBQUksZUFBZSxDQUFDO1FBQ3BCLElBQUk7WUFDRixlQUFlLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsd0JBQXdCLEdBQUcsNEJBQTRCLElBQUksQ0FBQyxhQUFhLHdCQUF3QixDQUFDO1lBQ3ZHLE9BQU87U0FDUjtRQUVELElBQUk7WUFDRixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFxQixDQUFDO1NBQ3JFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsd0JBQXdCLEdBQUcsZ0NBQWdDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyRixPQUFPO1NBQ1I7SUFDSCxDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVELGVBQWU7UUFDYixNQUFNLFVBQVUsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJO1lBQ0YsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDcEg7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsYUFBYSxDQUFDLFdBQW1CO1FBQy9CLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDaEQ7UUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1RCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFDNUIsSUFBSSxDQUFDLHdCQUF3QixHQUFHLDJCQUEyQixXQUFXLFVBQVUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RHO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVELGFBQWE7UUFDWCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUNqRCxJQUFJLFVBQVUsS0FBSyxTQUFTO1lBQUUsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBRWxELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0lBQ3RDLENBQUM7Q0FDRiJ9