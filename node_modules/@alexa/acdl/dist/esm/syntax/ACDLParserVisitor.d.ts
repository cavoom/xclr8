import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { ConditionExprContext } from "./ACDLParser";
import { CorrectionExprContext } from "./ACDLParser";
import { CallExprContext } from "./ACDLParser";
import { LiteralExprContext } from "./ACDLParser";
import { IsExprContext } from "./ACDLParser";
import { ListIndexContext } from "./ACDLParser";
import { PropertyReferenceContext } from "./ACDLParser";
import { InExprContext } from "./ACDLParser";
import { BinaryExprContext } from "./ACDLParser";
import { IdentifierExprContext } from "./ACDLParser";
import { ParenthesizedExprContext } from "./ACDLParser";
import { LineContext } from "./ACDLParser";
import { JsdocContext } from "./ACDLParser";
import { SingleLineExprContext } from "./ACDLParser";
import { ModuleContext } from "./ACDLParser";
import { ModuleExpressionContext } from "./ACDLParser";
import { KeywordContext } from "./ACDLParser";
import { IdentifierContext } from "./ACDLParser";
import { QualifiedNameContext } from "./ACDLParser";
import { NamespaceDeclarationContext } from "./ACDLParser";
import { ImportDeclarationContext } from "./ACDLParser";
import { EnumDeclarationContext } from "./ACDLParser";
import { EnumItemContext } from "./ACDLParser";
import { TypeReferenceContext } from "./ACDLParser";
import { TypeArgumentsContext } from "./ACDLParser";
import { TypeDeclarationContext } from "./ACDLParser";
import { TypeArgumentDeclarationsContext } from "./ACDLParser";
import { TypeArgumentDeclarationContext } from "./ACDLParser";
import { TypeConstraintContext } from "./ACDLParser";
import { TypePropertiesContext } from "./ACDLParser";
import { TypePropertyContext } from "./ACDLParser";
import { ArgumentDeclarationsContext } from "./ACDLParser";
import { ArgumentDeclarationContext } from "./ACDLParser";
import { StandardArgumentDeclarationContext } from "./ACDLParser";
import { FunctionArgumentDeclarationContext } from "./ACDLParser";
import { ArgumentDefaultContext } from "./ACDLParser";
import { ActionDeclarationContext } from "./ACDLParser";
import { InteractionDeclarationContext } from "./ACDLParser";
import { DialogDeclarationContext } from "./ACDLParser";
import { DialogScopeContext } from "./ACDLParser";
import { FunctionSignatureContext } from "./ACDLParser";
import { SampleDeclarationContext } from "./ACDLParser";
import { BlockContext } from "./ACDLParser";
import { BlockExpressionContext } from "./ACDLParser";
import { QualifiedNameDeclarationContext } from "./ACDLParser";
import { NameDeclarationContext } from "./ACDLParser";
import { ExpressionContext } from "./ACDLParser";
import { LiteralContext } from "./ACDLParser";
import { NullContext } from "./ACDLParser";
import { NothingContext } from "./ACDLParser";
import { VoidContext } from "./ACDLParser";
import { NumberContext } from "./ACDLParser";
import { StringContext } from "./ACDLParser";
import { String_contentContext } from "./ACDLParser";
import { BoolContext } from "./ACDLParser";
import { AnnotationContext } from "./ACDLParser";
import { AnnotationListContext } from "./ACDLParser";
import { CallContext } from "./ACDLParser";
import { CallArgumentsContext } from "./ACDLParser";
import { CallArgumentContext } from "./ACDLParser";
import { ObjectContext } from "./ACDLParser";
import { ObjectKeyValueContext } from "./ACDLParser";
import { ListContext } from "./ACDLParser";
import { ConditionContext } from "./ACDLParser";
import { OtherwiseContext } from "./ACDLParser";
import { CorrectionContext } from "./ACDLParser";
import { RelationalContext } from "./ACDLParser";
import { EqualityContext } from "./ACDLParser";
/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `ACDLParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export interface ACDLParserVisitor<Result> extends ParseTreeVisitor<Result> {
    /**
     * Visit a parse tree produced by the `conditionExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConditionExpr?: (ctx: ConditionExprContext) => Result;
    /**
     * Visit a parse tree produced by the `correctionExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCorrectionExpr?: (ctx: CorrectionExprContext) => Result;
    /**
     * Visit a parse tree produced by the `callExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCallExpr?: (ctx: CallExprContext) => Result;
    /**
     * Visit a parse tree produced by the `literalExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLiteralExpr?: (ctx: LiteralExprContext) => Result;
    /**
     * Visit a parse tree produced by the `isExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIsExpr?: (ctx: IsExprContext) => Result;
    /**
     * Visit a parse tree produced by the `listIndex`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitListIndex?: (ctx: ListIndexContext) => Result;
    /**
     * Visit a parse tree produced by the `propertyReference`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPropertyReference?: (ctx: PropertyReferenceContext) => Result;
    /**
     * Visit a parse tree produced by the `inExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInExpr?: (ctx: InExprContext) => Result;
    /**
     * Visit a parse tree produced by the `binaryExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBinaryExpr?: (ctx: BinaryExprContext) => Result;
    /**
     * Visit a parse tree produced by the `identifierExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIdentifierExpr?: (ctx: IdentifierExprContext) => Result;
    /**
     * Visit a parse tree produced by the `parenthesizedExpr`
     * labeled alternative in `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitParenthesizedExpr?: (ctx: ParenthesizedExprContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.line`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLine?: (ctx: LineContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.jsdoc`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitJsdoc?: (ctx: JsdocContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.singleLineExpr`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSingleLineExpr?: (ctx: SingleLineExprContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.module`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitModule?: (ctx: ModuleContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.moduleExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitModuleExpression?: (ctx: ModuleExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.keyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKeyword?: (ctx: KeywordContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.identifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIdentifier?: (ctx: IdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.qualifiedName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitQualifiedName?: (ctx: QualifiedNameContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.namespaceDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNamespaceDeclaration?: (ctx: NamespaceDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.importDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitImportDeclaration?: (ctx: ImportDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.enumDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEnumDeclaration?: (ctx: EnumDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.enumItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEnumItem?: (ctx: EnumItemContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeReference`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeReference?: (ctx: TypeReferenceContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeArguments`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeArguments?: (ctx: TypeArgumentsContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeDeclaration?: (ctx: TypeDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeArgumentDeclarations`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeArgumentDeclarations?: (ctx: TypeArgumentDeclarationsContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeArgumentDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeArgumentDeclaration?: (ctx: TypeArgumentDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeConstraint`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeConstraint?: (ctx: TypeConstraintContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeProperties`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeProperties?: (ctx: TypePropertiesContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.typeProperty`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeProperty?: (ctx: TypePropertyContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.argumentDeclarations`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArgumentDeclarations?: (ctx: ArgumentDeclarationsContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.argumentDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArgumentDeclaration?: (ctx: ArgumentDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.standardArgumentDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStandardArgumentDeclaration?: (ctx: StandardArgumentDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.functionArgumentDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionArgumentDeclaration?: (ctx: FunctionArgumentDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.argumentDefault`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArgumentDefault?: (ctx: ArgumentDefaultContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.actionDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitActionDeclaration?: (ctx: ActionDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.interactionDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInteractionDeclaration?: (ctx: InteractionDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.dialogDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDialogDeclaration?: (ctx: DialogDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.dialogScope`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDialogScope?: (ctx: DialogScopeContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.functionSignature`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionSignature?: (ctx: FunctionSignatureContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.sampleDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSampleDeclaration?: (ctx: SampleDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.block`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBlock?: (ctx: BlockContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.blockExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBlockExpression?: (ctx: BlockExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.qualifiedNameDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitQualifiedNameDeclaration?: (ctx: QualifiedNameDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.nameDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNameDeclaration?: (ctx: NameDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.expression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression?: (ctx: ExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.literal`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLiteral?: (ctx: LiteralContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.null`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNull?: (ctx: NullContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.nothing`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNothing?: (ctx: NothingContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.void`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVoid?: (ctx: VoidContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.number`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumber?: (ctx: NumberContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.string`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitString?: (ctx: StringContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.string_content`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitString_content?: (ctx: String_contentContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.bool`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBool?: (ctx: BoolContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.annotation`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnnotation?: (ctx: AnnotationContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.annotationList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnnotationList?: (ctx: AnnotationListContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.call`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCall?: (ctx: CallContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.callArguments`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCallArguments?: (ctx: CallArgumentsContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.callArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCallArgument?: (ctx: CallArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.object`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObject?: (ctx: ObjectContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.objectKeyValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectKeyValue?: (ctx: ObjectKeyValueContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.list`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitList?: (ctx: ListContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.condition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCondition?: (ctx: ConditionContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.otherwise`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOtherwise?: (ctx: OtherwiseContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.correction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCorrection?: (ctx: CorrectionContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.relational`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelational?: (ctx: RelationalContext) => Result;
    /**
     * Visit a parse tree produced by `ACDLParser.equality`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEquality?: (ctx: EqualityContext) => Result;
}
//# sourceMappingURL=ACDLParserVisitor.d.ts.map