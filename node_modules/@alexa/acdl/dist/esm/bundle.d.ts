import { Project } from "./project";
import { ProjectError } from "./error";
export interface BundleProjectProps {
    /**
     * Directory to write the bundle to.
     *
     * @default - ask.outDir in package.json
     */
    outDir?: string;
    /**
     * Specify the endpoint to overwrite in the skill.json manifest.
     */
    endpoint?: string;
    /**
     * Should the bundler delete the `skill-package` folder if it already exists?
     *
     * @default - false
     */
    cleanBuild?: boolean;
    /**
     * Optional additional fully qualified names to include when tree-shaking.
     */
    include?: string[];
}
export interface BundleProjectOutput {
    /**
     * The destination of zipped skill-package
     */
    skillPackageZip?: string;
    /**
     * The destination of bundled skill-package
     */
    skillPackagePath: string;
    /**
     * The errors detected during bundle project
     */
    errors: ProjectError[];
}
/**
 * Zips up the `skill-package` folder.
 *
 * @param bundleProjectOutput project output from bundleProject
 * returns a promise for a new BundleProjectOutput with a skillPackageZip property
 */
export declare function zipBundleOutput(bundleProjectOutput: BundleProjectOutput): Promise<BundleProjectOutput>;
/**
 * Synchronously bundle a project and prepare a `skill-package` folder ready for import to SMAPI.
 *
 * @param project skill project to bundle
 * @param props bundling properties
 */
export declare function bundleProjectSync(project: Project, props?: BundleProjectProps): BundleProjectOutput;
/**
 * Asynchronously bundle a project and prepare a `skill-package` folder ready for import to SMAPI.
 *
 * @param project skill project to bundle
 * @param props bundling properties
 */
export declare function bundleProject(project: Project, props?: BundleProjectProps): Promise<BundleProjectOutput>;
//# sourceMappingURL=bundle.d.ts.map