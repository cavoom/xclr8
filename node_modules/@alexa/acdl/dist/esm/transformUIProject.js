import fs from "fs-extra";
import path from "path";
import * as ask from "./ast";
import { Project } from "./project";
import { AlexaConversations, AlexaSchema, Locale } from "./ast/prelude";
import { printModule } from "./print";
import { transformEachChild } from "./visit";
import { loadPackage } from "./package";
/**
 * UI Skill Namespaces
 */
const uiSkillNamespaces = new Set(["dialogs", "audio_responses", "visual_responses", "utterance_sets", "apis", "types"]);
/**
 * Skill Level Responses Name
 */
const skillLevelResponses = [
    { skillLevelResponse: "welcome", skillLevelResponseName: "AlexaConversationsWelcome" },
    { skillLevelResponse: "out_of_domain", skillLevelResponseName: "AlexaConversationsOutOfDomain" },
    { skillLevelResponse: "bye", skillLevelResponseName: "AlexaConversationsBye" },
    { skillLevelResponse: "reqmore", skillLevelResponseName: "AlexaConversationsRequestMore" },
    { skillLevelResponse: "provide_help", skillLevelResponseName: "AlexaConversationsProvideHelp" },
];
/**
 * Called when decompiling UI skill to move files from locale directories to conversations/ and to
 * add skill.acdl
 * @param project Project
 * @param localesUsed locales used in the project as returned from getUISkillInformation
 * @returns the project reloaded after files creation
 */
export async function transformUIProjectForDecompile(project, localesUsed) {
    await flattenDirectoryAndChangeFileNames(project, localesUsed);
    await fs.writeFile(path.join(project.config.rootDir, "skill-package", project.config.srcDir, "skill.acdl"), printModule(await createSkillAction(project, localesUsed), project.getTypeChecker()));
    const source = await loadPackage(project.config.rootDir, undefined, true); // load project again due to updated paths and filenames and skill action json
    if (source === undefined) {
        throw new Error(`failed to reload source`);
    }
    return transformUIProject(new Project({
        config: project.config,
        source,
        external: project.external,
    }), localesUsed, true);
}
/**
 * Passes each source to resolveUIModule, where it updates the namespaces and relative paths to prompts
 * @param project Project
 * @param localesUsed locales used in the project as returned from getUISkillInformation
 * @param willMoveASKIRUp true when migrating to CLI when the files like "conversations/en-US/audio_response.json" are moved to
 * "conversations/". When this happens response paths need one less '../'
 * @returns project with updated namespaces and relative paths to prompts
 */
export function transformUIProject(project, localesUsed, willMoveASKIRUp) {
    const eventRequestActs = new Map();
    return new Project({
        config: project.config,
        external: project.external,
        source: {
            ...project.source,
            modules: project.source.modules
                .sort((a, b) => { var _a, _b; return (((_a = b.content) === null || _a === void 0 ? void 0 : _a._uri) || "").localeCompare(((_b = a.content) === null || _b === void 0 ? void 0 : _b._uri) || ""); })
                .map((mod) => ({
                ...mod,
                content: mod.content
                    ? resolveUIModule(mod.content, project.getTypeChecker(), eventRequestActs, localesUsed, willMoveASKIRUp)
                    : undefined,
            })),
        },
    });
}
/**
 * Updates the namespaces and relative paths to prompts for each expressions on Module
 * @param mod Module content
 * @param checker project type checker
 * @param eventRequestActs map of event names for request acts
 * @param localesUsed locales used in the project as returned from getUISkillInformation
 * @param willMoveASKIRUp true when migrating to CLI when the files like "conversations/en-US/audio_response.json" are moved to
 * "conversations/". When this happens response paths need one less '../'
 * @returns Module content with updated namespaces and relative paths to prompts and display
 */
function resolveUIModule(mod, checker, eventRequestActs, localesUsed, willMoveASKIRUp) {
    var _a, _b;
    const localePrefix = localesUsed.size === 1 ? "" : `${(_a = mod.uri.split("/").pop()) === null || _a === void 0 ? void 0 : _a.substr(0, 5).replace("-", "_")}.`;
    return new ask.Module(mod.uri, mod.schema, mod.namespace, mod.imports, mod.exports, (_b = mod.expressions) === null || _b === void 0 ? void 0 : _b.map((expr) => transformUINodes(expr, localePrefix, checker, eventRequestActs, willMoveASKIRUp)));
}
/**
 * Updates the namespaces with locale prefix
 * i.e. apis.AddCustomPizzaApi => en_GB.apis.AddCustomPizzaApi
 * @param oldName name to potentially update
 * @param localePrefix The prefix containing the locale to be added to type names
 * @returns the name with locale prefix if oldName uses one of the UI namespaces
 */
function getNameInLocale(oldName, localePrefix) {
    if (!localePrefix) {
        return oldName || "";
    }
    const name = oldName || "";
    const dotIndex = name.indexOf(".");
    if (dotIndex === -1) {
        return name;
    }
    const beforeDot = name.substring(0, dotIndex);
    if (!uiSkillNamespaces.has(beforeDot)) {
        return name;
    }
    return localePrefix + name;
}
/**
 * Updates the namespaces by appending the locale prefix to avoid conflict
 * As well as updating all the relative paths to prompts as the directory structure is changed.
 * It is safe to assume to change all occurrences of "../../" to "../" as this is only used when referencing prompts
 * @param node Expression of the Module
 * @param localePrefix The prefix containing the locale to be added to type names
 * @param checker project type checker
 * @param eventRequestActs map of event names for request acts
 * @param willMoveASKIRUp true when migrating to CLI when the files like "conversations/en-US/audio_response.json" are moved to
 * "conversations/". When this happens response paths need one less '../'
 * @returns New node with updated namespace and relative path to prompts and display
 */
function transformUINodes(node, localePrefix, checker, eventRequestActs, willMoveASKIRUp) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    if (node.kind === "Name" && node.name) {
        return new ask.Name(getNameInLocale(node.name, localePrefix));
    }
    if (node.kind === "NameDeclaration") {
        if (((_a = node.name) === null || _a === void 0 ? void 0 : _a.name) &&
            ((_b = node.expression) === null || _b === void 0 ? void 0 : _b.kind) === "Call" &&
            ((_c = node.expression.name) === null || _c === void 0 ? void 0 : _c.name) === AlexaConversations.utterances &&
            Array.isArray(node.expression.arguments) &&
            node.expression.arguments.length === 2 &&
            ((_d = node.expression.arguments[0].name) === null || _d === void 0 ? void 0 : _d.name) === "act" &&
            ((_e = checker.getType(node.expression.arguments[0])) === null || _e === void 0 ? void 0 : _e.isRequestAct()) &&
            ((_f = node.expression.arguments[1].name) === null || _f === void 0 ? void 0 : _f.name) === "samples" &&
            Array.isArray(node.expression.genericArguments) &&
            node.expression.genericArguments.length >= 1) {
            // This large condition detects the exact form that the UI produces utterance sets.
            // The UI produces the ASKIR equivallent to this ACDL:
            //
            //    weatherRequestInvoke = utterances<WeatherRequestType, Invoke>(
            //           act: Invoke{},
            //           samples:["what is the weather in {city}", "how cold it is in {city}"])
            //
            // <WeatherRequestType, Invoke> are the two generic arguments refered to in the condition.
            // act and samples are the two arguments in the condition where act is a request act.
            // This code will transform ASKIR equivalent to the ACDL above into ASKIR equivalent to the ACDL below:
            //
            //    weatherRequestInvoke = utterances<WeatherRequestType>(
            //           samples:["what is the weather in {city}", "how cold it is in {city}"])
            //
            // Another possible variant of the UI code is
            //
            //    weatherRequestInvoke = utterances<Invoke>(
            //           act: Invoke{},
            //           samples:["what is the weather", "how cold is it"])
            //
            // Which gets turned into:
            //
            //     weatherRequestInvoke = utterances(
            //           samples:["what is the weather", "how cold is it"])
            //
            // This transformation is necessary because ACDL does not yet support the 'utterances' with two arguments
            // which would be a breaking change, and there is not yet a good version solution to introduce breaking changes.
            // The code here will store Invoke in requestActArgumentValue for later use in an expect call as mentioned in the
            // comment close to the use of requestActArgumentValue
            const nameWithLocale = getNameInLocale(node.name.name, localePrefix);
            const requestAct = ((_h = (_g = node.expression.arguments[0].value) === null || _g === void 0 ? void 0 : _g.name) === null || _h === void 0 ? void 0 : _h.name) || "";
            const listCallArgument = node.expression.arguments[1];
            const genericArguments = node.expression.genericArguments.length === 2
                ? [new ask.TypeReference(new ask.Name(getNameInLocale(((_k = (_j = node.expression.genericArguments[0]) === null || _j === void 0 ? void 0 : _j.name) === null || _k === void 0 ? void 0 : _k.name) || "", localePrefix)))]
                : undefined;
            eventRequestActs.set(nameWithLocale, requestAct);
            const typeArguments = !node.type || !((_l = node.type.arguments) === null || _l === void 0 ? void 0 : _l.length)
                ? node.type
                : new ask.TypeReference(node.type.name, node.type.arguments.filter((type) => { var _a; return !((_a = checker.getType(type)) === null || _a === void 0 ? void 0 : _a.isRequestAct()); }));
            // Note that the annotations of the original expressions are preserved
            return new ask.NameDeclaration(new ask.Name(nameWithLocale), typeArguments, new ask.Call(new ask.Name(AlexaConversations.utterances), [listCallArgument], genericArguments, node.expression.annotations, node.expression.loc), node.annotations, node.comment, node.loc);
        }
    }
    else if (node.kind === "Call") {
        const nameWithLocale = getNameInLocale((_m = node.name) === null || _m === void 0 ? void 0 : _m.name, localePrefix);
        if (nameWithLocale && eventRequestActs.has(nameWithLocale)) {
            // This code transforms the ASKIR generated by the UI corresponding to this ACDL:
            //
            //     dialog Nothing dialogName_GetWeather() {
            //        sample {
            //           weatherRequest = weatherRequestInvoke()
            //
            // To the format supported in the current ACDL:
            //
            //     dialog Nothing dialogName_GetWeather() {
            //        sample {
            //           weatherRequest = expect(Invoke, weatherRequestInvoke)
            //
            // This is done because ACDL does not yet support callable events which is a breaking change
            // and we do not yet have a good versioning story for ACDL
            const eventRequestAct = eventRequestActs.get(nameWithLocale);
            return new ask.Call(new ask.Name(AlexaConversations.expect), [
                new ask.Argument(undefined, 0, new ask.NameReference(new ask.Name(eventRequestAct))),
                new ask.Argument(undefined, 1, new ask.NameReference(new ask.Name(nameWithLocale))),
            ]);
        }
        if (willMoveASKIRUp && typeof node.arguments === "string") {
            const aplAorAplInContext = node.findInContext((n) => { var _a, _b; return (n === null || n === void 0 ? void 0 : n.kind) === "Call" && (((_a = n.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaConversations.apl || ((_b = n.name) === null || _b === void 0 ? void 0 : _b.name) === AlexaConversations.apla); });
            if (((_o = node.name) === null || _o === void 0 ? void 0 : _o.name) === AlexaConversations.Path && aplAorAplInContext && node.arguments.startsWith("../../response")) {
                // change from "../../" to "../"
                return new ask.Call(node.name, node.arguments.substr(3), node.genericArguments, node.annotations, node.loc);
            }
        }
    }
    return transformEachChild(node, (child) => transformUINodes(child, localePrefix, checker, eventRequestActs, willMoveASKIRUp));
}
const UIFileNames = new Set([
    "dialogs.json",
    "audio_responses.json",
    "visual_responses.json",
    "utterances.json",
    "apis.json",
    "types.json",
]);
/**
 * A skill is UI skill if it has the following directory structure and file names
 * conversations/<locale>/6 JSON files of names (variable UIFileNames in this method)
 * @param project Project
 * @returns an object indicating if it is a UI skill and, if so, what locales are used
 */
export function getUISkillInformation(sourceModules) {
    const acdlLocales = new Set(Object.keys(Locale));
    const localesUsed = new Set();
    for (const askirFile of sourceModules) {
        const filePath = askirFile.uri.split("/");
        if (filePath.length < 2) {
            // expected locale and file name
            return { isUISkill: false, localesUsed };
        }
        const locale = filePath[filePath.length - 2];
        const fileName = filePath[filePath.length - 1];
        if (!acdlLocales.has(locale.replace("-", "_")) || !UIFileNames.has(fileName)) {
            return { isUISkill: false, localesUsed };
        }
        localesUsed.add(locale);
    }
    return { isUISkill: true, localesUsed };
}
/**
 * Moves all the ASKIR json files to directly under conversations folder, with locale prefix appended to file names
 * @param project Project
 * @param localesUsed locales used in the project as returned from getUISkillInformation
 */
async function flattenDirectoryAndChangeFileNames(project, localesUsed) {
    const conversationsDir = path.join(project.config.rootDir, "skill-package", project.config.srcDir);
    for (const locale of localesUsed) {
        const localePrefix = localesUsed.size > 1 ? `${locale}.` : "";
        const jsonFiles = await fs.readdir(path.join(conversationsDir, locale));
        for (const file of jsonFiles) {
            await fs.rename(path.join(conversationsDir, locale, file), path.join(conversationsDir, localePrefix + file));
        }
        await fs.rm(path.join(conversationsDir, locale), { recursive: true });
    }
}
/**
 * Creates the APLA declarations for each skill level responses for each locale,
 * Groups them together using variations,
 * and creates skill action
 * @param project
 * @param localesUsed locales used in the project as returned from getUISkillInformation
 * @returns Newly created ask.Module
 */
async function createSkillAction(project, localesUsed) {
    const expr = [];
    let lastAPLANames = [];
    for (const { skillLevelResponseName } of skillLevelResponses) {
        lastAPLANames = [];
        for (const locale of localesUsed) {
            const myAPLAName = `skill.my${skillLevelResponseName}_${locale.replace("-", "_")}`;
            lastAPLANames.push(new ask.NameReference(new ask.Name(myAPLAName)));
            expr.push(new ask.NameDeclaration(new ask.Name(myAPLAName), undefined, new ask.Call(new ask.Name(AlexaConversations.apla), [
                new ask.Argument(new ask.Name("path"), undefined, new ask.Call(new ask.Name("com.amazon.alexa.ask.conversations.Path"), path.join("..", "response", "prompts", skillLevelResponseName, "document.json"))),
            ]), [
                new ask.Annotation(new ask.Call(new ask.Name(AlexaConversations.locale), [
                    new ask.Argument(new ask.Name("locales"), 0, new ask.PropertyReference(new ask.Name(locale.replace("-", "_")), new ask.NameReference(new ask.Name(AlexaConversations.Locale)))),
                ])),
            ]));
        }
        /**
         * Creates
         * AlexaConversationsWelcome = variations(
         * myAlexaConversationsWelcome_en_GB,
         * myAlexaConversationsWelcome_en_US
         * )
         */
        const aplaListItemArray = [];
        let idx = 0;
        for (const aplaNames of lastAPLANames) {
            aplaListItemArray.push(new ask.ListItem(aplaNames, idx++));
        }
        const variationsSkillLevelResponse = [];
        variationsSkillLevelResponse.push(new ask.Argument(new ask.Name("variations"), undefined, new ask.Call(new ask.Name(AlexaConversations.Args), new ask.ListLiteral(aplaListItemArray))));
        expr.push(new ask.NameDeclaration(new ask.Name(`skill.${skillLevelResponseName}`), undefined, new ask.Call(new ask.Name(AlexaConversations.variations), variationsSkillLevelResponse)));
    }
    /**
     * Gets the skillLevelResponses parameter for skill action
     */
    const skillActionSkillLevelResponseParameter = [];
    for (const { skillLevelResponse, skillLevelResponseName } of skillLevelResponses) {
        skillActionSkillLevelResponseParameter.push(new ask.Argument(new ask.Name(skillLevelResponse), undefined, new ask.NameReference(new ask.Name(`skill.${skillLevelResponseName}`))));
    }
    /**
     * Gets the locale parameter for skill action
     */
    const skillActionLocaleParameter = [];
    for (const locale of localesUsed) {
        skillActionLocaleParameter.push(new ask.PropertyReference(new ask.Name(typeof locale === "string" ? locale.replace("-", "_") : undefined), new ask.NameReference(new ask.Name(AlexaConversations.Locale))));
    }
    let idx = 0;
    expr.push(new ask.NameDeclaration(new ask.Name("skill.mySkill"), undefined, new ask.Call(new ask.Name(AlexaConversations.skill), [
        new ask.Argument(new ask.Name("locales"), undefined, new ask.Call(new ask.Name(AlexaSchema.List), new ask.ListLiteral(skillActionLocaleParameter.map((item) => new ask.ListItem(item, idx++))))),
        new ask.Argument(new ask.Name("skillLevelResponses"), undefined, new ask.Call(new ask.Name(AlexaConversations.SkillLevelResponses), skillActionSkillLevelResponseParameter)),
    ])));
    const module = new ask.Module(path.join(project.config.rootDir, "skill-package", project.config.srcDir), ask.ModuleSchema, new ask.Name("skill"), undefined, // import
    undefined, // export
    expr);
    return module;
}
//# sourceMappingURL=data:application/json;base64,