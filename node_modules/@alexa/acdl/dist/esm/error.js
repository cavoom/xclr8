import path from "path";
import { ValidationErrorFactory, getExpressionIfLocField } from "./error-factory";
/**
 * Used for errors in non ACDL files, most likely JSON files
 */
export class FileError extends Error {
    constructor(message, uri) {
        super(message);
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: message
        });
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: uri
        });
        this.uri = uri;
        this.message = message;
    }
}
export function logProjectErrors(errors) {
    errors.forEach(logProjectError);
}
export function logProjectWarnings(errors) {
    if (errors !== undefined) {
        errors.filter((error) => error.code.category === "Warning" /* ErrorCategory.Warning */).forEach(logProjectError);
    }
}
export function logProjectError(error) {
    console.error(stringifyProjectError(error));
}
/**
 * Gets a string out of an error if it is a ProjectError or a regular Javascript Error
 */
export function stringifyError(error) {
    var _a;
    const errorAny = error;
    if ((_a = errorAny.code) === null || _a === void 0 ? void 0 : _a.category) {
        return stringifyProjectError(error);
    }
    return error.message;
}
export function stringifyProjectError(error) {
    const errorStringArray = [];
    if (error.code.category === "Warning" /* ErrorCategory.Warning */) {
        errorStringArray.push(error.code.category);
    }
    if (error.loc && error.uri) {
        errorStringArray.push(stringifyLocation(error.uri, error.loc));
    }
    errorStringArray.push(error.message);
    return errorStringArray.join(": ");
}
export function stringifyLocation(errorUri, loc) {
    // print the error relative to the current working directory so that links in the terminal link directly to the file
    const uri = path.isAbsolute(errorUri) ? path.relative(process.cwd(), errorUri) : errorUri;
    if (loc) {
        return `${uri}(${loc.begin.line},${loc.begin.character})`;
    }
    return uri;
}
export function filterDuplicateErrors(errors) {
    const seen = new Set();
    const e = errors.filter((err) => {
        if (err === undefined) {
            return false;
        }
        const str = `${err.message}${JSON.stringify(err.loc)}`;
        if (seen.has(str)) {
            return false;
        }
        seen.add(str);
        return true;
    });
    return e;
}
/**
 * Sort error array based on uri and loc
 * error without uri directly compare the loc
 * error with uri first compare uri then compare the loc
 * when loc are identical, compare the error message
 * @param errors
 * @returns
 */
export function sortErrors(errors) {
    return errors.sort((a, b) => {
        if (a.uri === undefined && b.uri === undefined) {
            const result = compareLoc(a.loc, b.loc);
            return result === 0 ? compareMessage(a.message, b.message) : result;
        }
        if (a.uri === undefined) {
            return -1;
        }
        if (b.uri === undefined) {
            return 1;
        }
        if (a.uri > b.uri) {
            return 1;
        }
        if (a.uri < b.uri) {
            return -1;
        }
        const result = compareLoc(a.loc, b.loc);
        return result === 0 ? compareMessage(a.message, b.message) : result;
    });
    /**
     * compare two location
     * error without loc is placed before other errors
     * when loc is exist, compare the start and then end
     * @param firstLoc
     * @param secondLoc
     * @returns
     */
    function compareLoc(firstLoc, secondLoc) {
        if (firstLoc === undefined && secondLoc === undefined) {
            return -1;
        }
        if (firstLoc === undefined) {
            return -1;
        }
        if (secondLoc === undefined) {
            return 1;
        }
        return firstLoc.begin.line !== secondLoc.begin.line
            ? firstLoc.begin.line - secondLoc.begin.line
            : firstLoc.begin.character !== secondLoc.begin.character
                ? firstLoc.begin.character - secondLoc.begin.character
                : firstLoc.end.line !== secondLoc.end.line
                    ? firstLoc.end.line - secondLoc.end.line
                    : firstLoc.end.character - secondLoc.end.character;
    }
    function compareMessage(firstMessage, secondMessage) {
        if (firstMessage <= secondMessage) {
            return -1;
        }
        return 1;
    }
}
export function typeError(actual, expected, scope, errorExpr) {
    return ValidationErrorFactory.TypeError({
        expr: getExpressionIfLocField(errorExpr, scope),
        attributes: {
            actualType: actual.toString(scope),
            expectedType: typeof expected === "string" ? expected : expected.toString(scope),
        },
    });
}
export function nameNotFound(name, loc, node) {
    var _a, _b;
    const fqn = name.name ? [name.name] : [];
    let context = node === null || node === void 0 ? void 0 : node.context;
    while ((context === null || context === void 0 ? void 0 : context.kind) === "PropertyReference") {
        if (((_a = context.name) === null || _a === void 0 ? void 0 : _a.name) === undefined) {
            break;
        }
        fqn.push((_b = context.name) === null || _b === void 0 ? void 0 : _b.name);
        context = context.context;
    }
    return ValidationErrorFactory.NameNotFound({
        expr: name,
        attributes: {
            name: fqn.join("."),
        },
    });
}
export function hasTerminalErrors(errors) {
    return errors.some((error) => isTerminalError(error));
}
function isTerminalError(error) {
    return error.code.category !== "Warning" /* ErrorCategory.Warning */;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBbUIsc0JBQXNCLEVBQUUsdUJBQXVCLEVBQWdDLE1BQU0saUJBQWlCLENBQUM7QUFhakk7O0dBRUc7QUFDSCxNQUFNLE9BQU8sU0FBVSxTQUFRLEtBQUs7SUFDbEMsWUFBbUIsT0FBZSxFQUFTLEdBQVc7UUFDcEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7OzttQkFERTs7Ozs7O21CQUF3Qjs7UUFFekMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFJRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsTUFBc0I7SUFDckQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLE1BQXVCO0lBQ3hELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN4QixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsMENBQTBCLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDbEc7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFtQjtJQUNqRCxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxLQUFZOztJQUN6QyxNQUFNLFFBQVEsR0FBRyxLQUFZLENBQUM7SUFDOUIsSUFBSSxNQUFBLFFBQVEsQ0FBQyxJQUFJLDBDQUFFLFFBQVEs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