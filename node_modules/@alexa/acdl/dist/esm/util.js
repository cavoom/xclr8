import fs from "fs-extra";
import archiver from "archiver";
import * as ask from "./ast";
import { Constants, GeneratedInteractionModelModule } from "./constants";
import { FileError } from "./error";
export function time(description, f) {
    // const start = new Date().getTime();
    const result = f();
    if (typeof result.then === "function") {
        return result.then((result) => {
            emit();
            return result;
        });
    }
    emit();
    return result;
    function emit() {
        // console.log(description, `${new Date().getTime() - start}ms`);
    }
}
export function trimScheme(uri) {
    if (uri.startsWith("file://")) {
        return uri.slice("file://".length);
    }
    return uri;
}
/**
 * Asynchronously check if a file exists
 */
export function existsSync(file) {
    try {
        fs.accessSync(file, fs.constants.R_OK);
        return true;
    }
    catch (err) {
        if (err.code === "ENOENT") {
            return false;
        }
        throw err;
    }
}
/**
 * Asynchronously check if a file exists
 */
export async function exists(file) {
    try {
        await fs.access(file, fs.constants.R_OK);
        return true;
    }
    catch (err) {
        if (err.code === "ENOENT") {
            return false;
        }
        throw err;
    }
}
export async function readdir(dir) {
    return fs.readdir(dir);
}
/**
 * Parses JSON throwing an error that includes the path if the JSON is invalid
 * @param jsonText text to be parsed
 * @param path path the text came from
 */
export function parseJSON(jsonText, path) {
    try {
        return JSON.parse(jsonText);
    }
    catch (error) {
        throw new FileError(`Error parsing JSON in "${path}": ${error.message}.`, path);
    }
}
/**
 * Reads a file and parses the JSON throwing an error that includes the path if
 * cannot read file or if the JSON is invalid
 * @param path path of file to read
 * @returns the JSON object read from the file
 */
export function readAndParseMandatoryJSONFileSync(path) {
    const fileContents = readJsonFileSync(path);
    if (!fileContents) {
        throw new FileError(`Error reading file "${path}".`, path);
    }
    return fileContents;
}
export function readJsonFileSync(filePath) {
    const file = readFileSync(filePath);
    if (file === undefined) {
        return undefined;
    }
    return parseJSON(file, filePath);
}
export async function readJsonFile(filePath) {
    const file = await readFile(filePath);
    if (file === undefined) {
        return undefined;
    }
    return parseJSON(file, filePath);
}
export function readFileSync(path) {
    if (existsSync(path)) {
        return fs.readFileSync(path).toString("utf8");
    }
    return undefined;
}
export async function readFile(path) {
    if (await exists(path)) {
        return (await fs.readFile(path)).toString("utf8");
    }
    return undefined;
}
export function isFileSync(path) {
    var _a;
    return (_a = statSync(path)) === null || _a === void 0 ? void 0 : _a.isFile();
}
export async function isFile(path) {
    var _a;
    return (_a = (await stat(path))) === null || _a === void 0 ? void 0 : _a.isFile();
}
export function isDirSync(path) {
    var _a;
    return ((_a = statSync(path)) === null || _a === void 0 ? void 0 : _a.isDirectory()) === true;
}
export async function isDir(path) {
    var _a;
    return ((_a = (await stat(path))) === null || _a === void 0 ? void 0 : _a.isDirectory()) === true;
}
export function statSync(path) {
    return safeFsSync(() => fs.statSync(path));
}
export async function stat(path) {
    return safeFs(() => fs.stat(path));
}
export async function lstat(path) {
    return safeFs(() => fs.lstat(path));
}
export function safeFsSync(f) {
    try {
        return f();
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // file doesn't exist, so stat is undefined
            return undefined;
        }
        // we can't read the file, throw the error
        throw err;
    }
}
export async function safeFs(f) {
    try {
        const t = f();
        if (t.then && t.catch) {
            return await t;
        }
        return t;
    }
    catch (err) {
        if (err.code === "ENOENT") {
            // file doesn't exist, so stat is undefined
            return undefined;
        }
        // we can't read the file, throw the error
        throw err;
    }
}
export function getNamespace(fqn) {
    return fqn.slice(0, fqn.lastIndexOf("."));
}
export function getName(fqn) {
    return fqn.slice(fqn.lastIndexOf(".") + 1);
}
export function isQualifiedNamePattern(name) {
    // poor man's algorithm for now - TODO: use regex from spec
    return name !== undefined && name.includes(".");
}
export function stringifyTypeReference(ref) {
    var _a;
    if (ref === undefined) {
        return ask.AlexaSchema.Thing;
    }
    return `${(_a = ref.name) === null || _a === void 0 ? void 0 : _a.name}${ref.arguments ? `<${ref.arguments.map((arg) => stringifyTypeReference(arg))}>` : ""}`;
}
export function stringifyTypeParameter(param) {
    return `T${param.constraints ? ` : ${param.constraints.map(stringifyTypeReference).join(", ")}` : ""}`;
}
export function sanitize(a) {
    if (a === undefined) {
        return undefined;
    }
    if (a === null) {
        return a;
    }
    if (typeof a === "object") {
        if (Array.isArray(a)) {
            if (a.length === 0) {
                return undefined;
            }
        }
        else if (Object.keys(a).length === 0) {
            return undefined;
        }
    }
    return a;
}
export function log(a, keepLoc) {
    if (a === undefined) {
        console.log("");
    }
    else if (typeof a === "string") {
        console.log(a);
    }
    else {
        console.log(JSON.stringify(a, (k, v) => (k === "loc" && keepLoc !== true ? undefined : k === "parent" ? undefined : v), 2));
    }
}
export function zipDirectory(source, out) {
    const archive = archiver("zip", { zlib: { level: 9 } });
    const stream = fs.createWriteStream(out);
    return new Promise((resolve, reject) => {
        archive
            .directory(source, false)
            .on("error", (err) => reject(err))
            .pipe(stream);
        stream.on("close", () => resolve(undefined));
        archive.finalize();
    });
}
export function isBuiltinSlotType(slotName) {
    return slotName.startsWith("AMAZON.");
}
export function isNotUndefined(value) {
    return value !== undefined;
}
/**
 * Stringifies a type array to their short type names
 */
export function typesToNameString(types) {
    return types.map((type) => `"${type.shortName}"`).join(", ");
}
/**
 * Returns if this file is generated ASKIR module.
 */
export function isGeneratedFile(fileName) {
    return fileName.includes(GeneratedInteractionModelModule.uriPrefix);
}
/**
 * returns if the string starts with AMAZON.
 */
export function isAmazonBuiltin(name) {
    return name.startsWith(Constants.BuiltinIntentPrefix);
}
/**
 * gets all directories recursively under parentDirectoryPath
 * @param parentDirectoryPath path of parentDirectory
 * @returns an array of all directories recursively under parentDirectoryPath
 */
export async function getDirectories(parentDirectoryPath) {
    return (await fs.readdir(parentDirectoryPath, { withFileTypes: true }))
        .filter((dir) => dir.isDirectory())
        .map((dir) => dir.name);
}
/**
 * gets all directories recursively under parentDirectoryPath
 * @param parentDirectoryPath path of parentDirectory
 * @returns an array of all directories recursively under parentDirectoryPath
 */
export function getDirectoriesSync(parentDirectoryPath) {
    return fs
        .readdirSync(parentDirectoryPath, { withFileTypes: true })
        .filter((dir) => dir.isDirectory())
        .map((dir) => dir.name);
}
//# sourceMappingURL=data:application/json;base64,