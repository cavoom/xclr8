import immutable from "immutable";
import * as ask from "./ast";
import { getName, getNamespace } from "./util";
import { emptyLexicalScope, mergeLexicalScope } from "./lexical-scope";
export function defaultNamespaces() {
    return immutable.Map([
        [ask.PromptsNamespace, immutable.Map()],
        [ask.DisplayNamespace, immutable.Map()],
        [ask.SlotTypesNamespace, immutable.Map()],
    ]);
}
export const mergeNamespaces = (a, b) => a.mergeWith(mergeLexicalScope, b);
/**
 * Compute the Global scope and Namespace Index from a Project.
 */
export function computeGlobal(project) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const globalExpressions = project.modules
        .map((file) => {
        var _a, _b, _c;
        return (_c = (_b = (_a = file.content) === null || _a === void 0 ? void 0 : _a.expressions) === null || _b === void 0 ? void 0 : _b.map((expression) => {
            var _a;
            return (expression.kind === "ActionDeclaration" ||
                expression.kind === "DialogDeclaration" ||
                expression.kind === "NameDeclaration" ||
                expression.kind === "TypeDeclaration" ||
                expression.kind === "EnumDeclaration") &&
                ((_a = expression.name) === null || _a === void 0 ? void 0 : _a.name)
                ? expression
                : undefined;
        })) !== null && _c !== void 0 ? _c : [];
    })
        .reduce((a, b) => a.concat(b), [])
        .filter((expr) => expr !== undefined);
    const globalScope = globalExpressions
        .map((expr) => { var _a; return immutable.Map([[(_a = expr.name) === null || _a === void 0 ? void 0 : _a.name, expr]]); })
        .concat((_b = (_a = project.responseTemplates) === null || _a === void 0 ? void 0 : _a.map((template) => immutable.Map([
        [`${template.isDisplay() ? ask.DisplayNamespace : ask.PromptsNamespace}.${template.name}`, template],
    ]))) !== null && _b !== void 0 ? _b : [])
        .concat((_d = (_c = project.slotTypes) === null || _c === void 0 ? void 0 : _c.map((slotType) => immutable.Map([[slotType.name.name, slotType]]))) !== null && _d !== void 0 ? _d : [])
        .reduce(mergeLexicalScope, emptyLexicalScope());
    const namespaces = globalExpressions
        .map((expression) => immutable.Map({
        [getNamespace(expression.name.name)]: immutable.Map([[getName(expression.name.name), expression]]),
    }))
        .concat((_f = (_e = project.responseTemplates) === null || _e === void 0 ? void 0 : _e.map((template) => immutable.Map([
        [template.isDisplay() ? ask.DisplayNamespace : ask.PromptsNamespace, immutable.Map([[template.name, template]])],
    ]))) !== null && _f !== void 0 ? _f : [])
        .concat((_h = (_g = project.slotTypes) === null || _g === void 0 ? void 0 : _g.map((slotType) => immutable.Map([[ask.SlotTypesNamespace, immutable.Map([[getName(slotType.name.name), slotType]])]]))) !== null && _h !== void 0 ? _h : [])
        .reduce(mergeNamespaces, defaultNamespaces());
    return {
        scope: globalScope,
        namespaces,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dsb2JhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUM7QUFFN0IsT0FBTyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDN0MsT0FBTyxFQUFDLGlCQUFpQixFQUFnQixpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBc0JuRixNQUFNLFVBQVUsaUJBQWlCO0lBQy9CLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBdUI7UUFDekMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDMUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQWEsRUFBRSxDQUFhLEVBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFL0c7O0dBRUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFDLE9BQWdCOztJQUM1QyxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxPQUFPO1NBQ3RDLEdBQUcsQ0FDRixDQUFDLElBQUksRUFBRSxFQUFFOztRQUNQLE9BQUEsTUFBQSxNQUFBLE1BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsV0FBVywwQ0FBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTs7WUFDNUMsT0FBQSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssbUJBQW1CO2dC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