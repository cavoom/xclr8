export function isFailure(a) {
    return a.kind === "Failure";
}
/**
 * Check if a value is an instance of `Try`.
 */
export function isTry(a) {
    return a && typeof a.getOrThrow === "function";
}
/**
 * Monad for safely calling a function that can throw errors.
 *
 * @param get function so safely call
 * @param errorHandler optional handler for transforming errors
 */
export function Try(get, errorHandler) {
    return new TryMonad(get, errorHandler);
}
/**
 * Encapsulates a computation that may throw errors.
 */
export class TryMonad {
    constructor(thunk, errorHandler) {
        Object.defineProperty(this, "thunk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: thunk
        });
        Object.defineProperty(this, "errorHandler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: errorHandler
        });
    }
    map(f, err) {
        return Try(() => f(this.thunk()), err || this.errorHandler);
    }
    flatMap(f, err) {
        return Try(() => f(this.thunk()).getOrThrow(), err || this.errorHandler);
    }
    resolve(context) {
        try {
            return this.thunk();
        }
        catch (err) {
            if (this.errorHandler === undefined && err.code === undefined) {
                return undefined;
            }
            context.errors.push(...(this.errorHandler ? this.errorHandler(err) : [err]));
        }
        return undefined;
    }
    getOrDefault(t) {
        try {
            return this.getOrThrow();
        }
        catch (err) {
            return t;
        }
    }
    getOrThrow(error) {
        try {
            return this.thunk();
        }
        catch (err) {
            throw error || err;
        }
    }
}
export const left = (left) => ({ left });
export const right = (right) => ({ right });
export const isLeft = (a) => "left" in a;
export const isRight = (a) => "Right" in a;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxNQUFNLFVBQVUsU0FBUyxDQUFDLENBQU07SUFDOUIsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUM5QixDQUFDO0FBT0Q7O0dBRUc7QUFDSCxNQUFNLFVBQVUsS0FBSyxDQUFDLENBQU07SUFDMUIsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQztBQUNqRCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsR0FBRyxDQUFJLEdBQVksRUFBRSxZQUEyQjtJQUM5RCxPQUFPLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sUUFBUTtJQUNuQixZQUE0QixLQUFjLEVBQWtCLFlBQTJCOzs7OzttQkFBM0Q7Ozs7OzttQkFBZ0M7O0lBQThCLENBQUM7SUFFcEYsR0FBRyxDQUFJLENBQWMsRUFBRSxHQUFrQjtRQUM5QyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0sT0FBTyxDQUFJLENBQXdCLEVBQUUsR0FBa0I7UUFDNUQsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVNLE9BQU8sQ0FBQyxPQUFxQjtRQUNsQyxJQUFJO1lBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDckI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLElBQUssR0FBa0IsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUM3RSxPQUFPLFNBQVMsQ0FBQzthQUNsQjtZQUNELE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUY7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU0sWUFBWSxDQUFJLENBQUk7UUFDekIsSUFBSTtZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQzFCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLENBQUMsQ0FBQztTQUNWO0lBQ0gsQ0FBQztJQUVNLFVBQVUsQ0FBQyxLQUFXO1FBQzNCLElBQUk7WUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNyQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxLQUFLLElBQUksR0FBRyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztDQUNGO0FBaUJELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFJLElBQU8sRUFBVyxFQUFFLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUM7QUFDdEQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUksS0FBUSxFQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztBQUMxRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBTyxDQUFlLEVBQWdCLEVBQUUsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO0FBQzNFLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFPLENBQWUsRUFBaUIsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMifQ==