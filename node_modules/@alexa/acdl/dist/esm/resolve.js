import { Project } from "./project";
import * as ask from "./ast";
import { transformEachChild } from "./visit";
/**
 * Walks over all modules in the Project and performs all type and argument inference on the tree once to avoid repeating this cost later.
 *
 * @param project
 * @returns a project where all modules
 */
export function resolveProject(project) {
    const checker = project.getTypeChecker();
    return new Project({
        config: project.config,
        external: project.external,
        source: {
            ...project.source,
            modules: project.sourceModules.map((mod) => ({
                ...mod,
                content: mod.content ? resolveModule(mod.content, checker) : undefined,
            })),
        },
    });
}
export function resolveModule(mod, checker) {
    var _a;
    return new ask.Module(mod.uri, mod.schema, mod.namespace, mod.imports, mod.exports, (_a = mod.expressions) === null || _a === void 0 ? void 0 : _a.map((expr) => resolveExpr(expr, checker)));
}
export function resolveExpr(expr, checker) {
    var _a, _b, _c, _d;
    if (expr.kind === "Call") {
        const apply = checker.getApply(expr);
        if (apply !== undefined) {
            const args = apply === null || apply === void 0 ? void 0 : apply.getArguments();
            // resolve the generic arguments
            const typeArgs = expr.genericArguments !== undefined
                ? (_a = expr.genericArguments) === null || _a === void 0 ? void 0 : _a.map((arg) => arg === null || arg === void 0 ? void 0 : arg.clone())
                : (_b = apply === null || apply === void 0 ? void 0 : apply.getGenericArguments()) === null || _b === void 0 ? void 0 : _b.map((type) => resolveTypeReference(type === null || type === void 0 ? void 0 : type.toTypeReference(), checker));
            const annotations = (_c = expr.annotations) === null || _c === void 0 ? void 0 : _c.map((annotation) => new ask.Annotation(resolveExpr(annotation.call, checker), annotation.loc));
            return new ask.Call((_d = expr.name) === null || _d === void 0 ? void 0 : _d.clone(), typeof expr.arguments === "string" ||
                typeof expr.arguments === "number" ||
                typeof expr.arguments === "boolean" ||
                expr.arguments === null ||
                expr.arguments === undefined
                ? expr.arguments
                : ask.isListLiteral(expr.arguments)
                    ? transformEachChild(expr.arguments, (child) => resolveExpr(child, checker))
                    : typeof args === "object"
                        ? // TODO: is this preserving order and name locations
                            Object.entries(args).map(([name, arg], i) => new ask.Argument(new ask.Name(name), i, resolveExpr(arg.value, checker), arg.loc))
                        : undefined, typeArgs, annotations, expr.loc);
        }
    }
    const child = transformEachChild(expr, (child) => resolveExpr(child, checker));
    return child;
}
function resolveTypeReference(type, checker) {
    var _a, _b, _c;
    if (type === undefined) {
        return undefined;
    }
    return new ask.TypeReference((_a = type.name) === null || _a === void 0 ? void 0 : _a.clone(), (_b = type.arguments) === null || _b === void 0 ? void 0 : _b.map((arg) => resolveTypeReference(arg, checker)), (_c = type.annotations) === null || _c === void 0 ? void 0 : _c.map((ann) => ann.clone()), undefined, undefined, // place the location of the resolved type arguments on the call's name
    true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUM7QUFFN0IsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRTNDOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFnQjtJQUM3QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekMsT0FBTyxJQUFJLE9BQU8sQ0FBQztRQUNqQixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07UUFDdEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQzFCLE1BQU0sRUFBRTtZQUNOLEdBQUcsT0FBTyxDQUFDLE1BQU07WUFDakIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQyxHQUFHLEdBQUc7Z0JBQ04sT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO2FBQ3ZFLENBQUMsQ0FBQztTQUNKO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsR0FBZSxFQUFFLE9BQW9COztJQUNqRSxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FDbkIsR0FBRyxDQUFDLEdBQUcsRUFDUCxHQUFHLENBQUMsTUFBTSxFQUNWLEdBQUcsQ0FBQyxTQUFTLEVBQ2IsR0FBRyxDQUFDLE9BQU8sRUFDWCxHQUFHLENBQUMsT0FBTyxFQUNYLE1BQUEsR0FBRyxDQUFDLFdBQVcsMENBQUUsR0FB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