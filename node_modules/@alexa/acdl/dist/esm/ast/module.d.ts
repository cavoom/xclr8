import { ActionDeclaration } from "./action";
import { DialogDeclaration } from "./dialog";
import { Import } from "./import";
import { SourceLocation } from "./source-location";
import { Tree } from "./tree";
import { TypeDeclaration } from "./type";
import { Name } from "./name";
import { NameDeclaration } from "./name-declaration";
import { Call } from "./call";
import { EnumDeclaration } from "./enum";
import { InteractionDeclaration } from "./interaction";
/**
 * Expressions allowed at the top-level of a Module.
 */
export type ModuleExpression = NameDeclaration | ActionDeclaration | DialogDeclaration | EnumDeclaration | InteractionDeclaration | TypeDeclaration | Call;
export declare const isModuleExpression: (node: any) => node is ActionDeclaration | Call<import("./call").CallContext> | InteractionDeclaration | DialogDeclaration | NameDeclaration<import("./name-declaration").Named> | TypeDeclaration;
/**
 * JSON schema version of the Module.
 */
export declare const ModuleSchema: "https://amazonalexa.com/ask/2020/12/Module";
export type ModuleSchema = typeof ModuleSchema;
export declare function isModule(a: any): a is Module;
/**
 * A module contains a set of expressions.
 */
export declare class Module extends Tree<"Module", undefined> {
    /**
     * URI of the file that produced this Module.
     */
    readonly _uri: string;
    /**
     * The schema for the module file.
     */
    readonly schema: ModuleSchema;
    /**
     * Module namespace.
     */
    readonly namespace?: Name | undefined;
    /**
     * Imports of the module.
     */
    readonly imports?: Import[] | undefined;
    /**
     * The declared names that are visible outside this module.
     */
    readonly exports?: string[] | undefined;
    /**
     * The expressions in this module.
     */
    readonly expressions?: ModuleExpression[] | undefined;
    constructor(
    /**
     * URI of the file that produced this Module.
     */
    _uri: string, 
    /**
     * The schema for the module file.
     */
    schema: ModuleSchema, 
    /**
     * Module namespace.
     */
    namespace?: Name | undefined, 
    /**
     * Imports of the module.
     */
    imports?: Import[] | undefined, 
    /**
     * The declared names that are visible outside this module.
     */
    exports?: string[] | undefined, 
    /**
     * The expressions in this module.
     */
    expressions?: ModuleExpression[] | undefined, loc?: SourceLocation);
    get uri(): string;
    clone(): Module;
}
//# sourceMappingURL=module.d.ts.map