import Ajv from "ajv";
import addFormats from "ajv-formats";
import fs from "fs-extra";
import path from "path";
import ModuleSchema from "@alexa/ask-expressions-spec/schemas/Module.json";
// The webpack method for require.resolve returns a numerical module identifier.
// The `eval` here is present to preserve the node.js behavior of returning a filepath when bundling with webpack.
// eslint-disable-next-line no-eval
const schemaDir = path.resolve(path.dirname(eval('require.resolve("@alexa/ask-expressions-spec/package.json")')), "schemas");
const schemas = fs.readdirSync(schemaDir).reduce((acc, schemaPathRelative) => {
    if (schemaPathRelative.endsWith(".json") && schemaPathRelative !== "Module.json") {
        const schemaPath = path.join(schemaDir, schemaPathRelative);
        return [...acc, JSON.parse(fs.readFileSync(schemaPath, "utf-8"))];
    }
    return acc;
}, []);
const ajv = addFormats(new Ajv({ schemas, strict: false }));
const validator = ajv.compile(ModuleSchema);
/**
 * Validates a Module according to a JSON schema.
 *
 * @param module
 */
export function tryValidateModuleSchema(module) {
    validator(module);
    return validator.errors;
}
export function validateModuleSchema(module, uri) {
    const errors = tryValidateModuleSchema(module);
    if (errors) {
        logValidationErrors(errors);
        throw new Error(`invalid ASK Module${uri ? `: '${uri}'` : ""}`);
    }
}
export function logValidationErrors(errors) {
    for (const e of errors) {
        console.log(e);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXN0L3ZhbGlkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBa0IsTUFBTSxLQUFLLENBQUM7QUFDckMsT0FBTyxVQUFVLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMxQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxZQUFZLE1BQU0saURBQWlELENBQUM7QUFFM0UsZ0ZBQWdGO0FBQ2hGLGtIQUFrSDtBQUNsSCxtQ0FBbUM7QUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyw2REFBNkQsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDN0gsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFRLEVBQUUsa0JBQWtCLEVBQUUsRUFBRTtJQUNoRixJQUFJLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxrQkFBa0IsS0FBSyxhQUFhLEVBQUU7UUFDaEYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUM1RCxPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkU7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVQLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFNUM7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxNQUFXO0lBQ2pELFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxNQUFXLEVBQUUsR0FBWTtJQUM1RCxNQUFNLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxJQUFJLE1BQU0sRUFBRTtRQUNWLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNqRTtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsTUFBcUI7SUFDdkQsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLEVBQUU7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNoQjtBQUNILENBQUMifQ==