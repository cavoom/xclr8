import { Tree } from "./tree";
/**
 * Types of response templates supported by the compiler.
 */
export var ResponseTemplateType;
(function (ResponseTemplateType) {
    /**
     * APL display template
     */
    ResponseTemplateType["Display"] = "display";
    /**
     * APL-A prompt template.
     */
    ResponseTemplateType["Prompt"] = "prompt";
})(ResponseTemplateType || (ResponseTemplateType = {}));
(function (ResponseTemplateType) {
    ResponseTemplateType.All = [
        ResponseTemplateType.Display,
        ResponseTemplateType.Prompt,
    ];
})(ResponseTemplateType || (ResponseTemplateType = {}));
/**
 * Node type to represent an externally loaded response template.
 *
 * This node will be removed in Beta 2 when we have generated prompts and the
 * ability to require them from disk.
 */
export class ResponseTemplate extends Tree {
    constructor(
    /**
     * URI of the folder containing the APLA `document.json` file.
     */
    templateUri, 
    /**
     * Name of the prompt.
     *
     * Example:
     * ```
     * // name: `hello`
     * response/prompts/hello/document.json
     * ```
     */
    name, type, loc) {
        super("ResponseTemplate", loc);
        Object.defineProperty(this, "templateUri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: templateUri
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
    }
    get uri() {
        return this.templateUri;
    }
    /**
     * Check if this is an APL Display Response Template.
     */
    isDisplay() {
        return this.type === ResponseTemplateType.Display;
    }
    /**
     * Check if this is an APLA Prompt Response Template.
     */
    isPrompt() {
        return this.type === ResponseTemplateType.Prompt;
    }
    clone() {
        return new ResponseTemplate(this.templateUri, this.name, this.type, this.loc);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UtdGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXN0L3Jlc3BvbnNlLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFFNUI7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxvQkFTWDtBQVRELFdBQVksb0JBQW9CO0lBQzlCOztPQUVHO0lBQ0gsMkNBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCx5Q0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBVFcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQVMvQjtBQUVELFdBQWlCLG9CQUFvQjtJQUN0Qix3QkFBRyxHQUFnRTtRQUM5RSxvQkFBb0IsQ0FBQyxPQUFPO1FBQzVCLG9CQUFvQixDQUFDLE1BQU07S0FDNUIsQ0FBQztBQUNKLENBQUMsRUFMZ0Isb0JBQW9CLEtBQXBCLG9CQUFvQixRQUtwQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxPQUFPLGdCQUF3RSxTQUFRLElBQW1DO0lBQzlIO0lBQ0U7O09BRUc7SUFDTSxXQUFtQjtJQUM1Qjs7Ozs7Ozs7T0FRRztJQUNNLElBQVksRUFDWixJQUFPLEVBQ2hCLEdBQW9CO1FBRXBCLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQzs7Ozs7bUJBZHRCOzs7Ozs7bUJBVUE7Ozs7OzttQkFDQTs7SUFJWCxDQUFDO0lBRUQsSUFBVyxHQUFHO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssb0JBQW9CLENBQUMsT0FBTyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssb0JBQW9CLENBQUMsTUFBTSxDQUFDO0lBQ25ELENBQUM7SUFFTSxLQUFLO1FBQ1YsT0FBTyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRixDQUFDO0NBQ0YifQ==