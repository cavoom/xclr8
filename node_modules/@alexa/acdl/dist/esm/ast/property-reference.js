import { guard } from "./guard";
import { Tree } from "./tree";
/**
 * Asserts if the Expression is a `PropertyReference`.
 */
export const isPropRef = guard("PropertyReference");
/**
 * Represents the access of a Property.
 */
export class PropertyReference extends Tree {
    constructor(
    /**
     * Name of the property being accessed.
     */
    name, 
    /**
     * Expression containing the property being accessed.
     *
     * Names, Calls and other PropertyAccess nodes are supported.
     */
    expression, annotations, loc) {
        super("PropertyReference", loc);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "expression", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: expression
        });
        Object.defineProperty(this, "annotations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: annotations
        });
        this.setAsParentOn(name);
        this.setAsParentOn(expression);
        this.setAsParentOn(annotations);
    }
    clone() {
        var _a, _b, _c;
        return new PropertyReference((_a = this.name) === null || _a === void 0 ? void 0 : _a.clone(), (_b = this.expression) === null || _b === void 0 ? void 0 : _b.clone(), (_c = this.annotations) === null || _c === void 0 ? void 0 : _c.map((a) => a.clone()), this.loc);
    }
    /**
     * Print the full prop chain with dot as the separator.
     *
     * @returns the dot-joined string from the called node to its root
     */
    printPropertyChainThroughRoot(sep) {
        var _a, _b, _c;
        const chainingProps = [(_a = this.name) === null || _a === void 0 ? void 0 : _a.name];
        let temp = this.expression;
        while ((temp === null || temp === void 0 ? void 0 : temp.kind) === "PropertyReference" && ((_b = temp.name) === null || _b === void 0 ? void 0 : _b.name)) {
            chainingProps.push(temp.name.name);
            temp = temp.expression;
        }
        if (temp && ((_c = temp.name) === null || _c === void 0 ? void 0 : _c.name)) {
            chainingProps.push(temp.name.name);
        }
        return chainingProps.reverse().join(sep || ".");
    }
}
(function (PropertyReference) {
    /**
     * Tries to resolves a PropertyReference to a QualifiedName.
     *
     * When we parse qualified names, e.g. `com.amazon.MyIntent`, it is ambiguous
     * as to whether this is
     * 1. `PropertyReference(MyIntent, PropertyReference(amazon, NameReference(com)))`
     * 2. `NameReference(com.amazon.MyIntent)`
     *
     * This function flattens a PropertyReference tree to a qualified name so that it can be checked.
     *
     * @param expr
     */
    function tryResolveQualifiedName(expr) {
        var _a, _b;
        if ((expr === null || expr === void 0 ? void 0 : expr.kind) === "Call") {
            return undefined;
        }
        if ((expr === null || expr === void 0 ? void 0 : expr.kind) === "NameReference") {
            return (_a = expr.name) === null || _a === void 0 ? void 0 : _a.name;
        }
        if ((expr === null || expr === void 0 ? void 0 : expr.kind) === "PropertyReference") {
            const prevName = tryResolveQualifiedName(expr.expression);
            if (prevName) {
                return `${prevName}.${(_b = expr.name) === null || _b === void 0 ? void 0 : _b.name}`;
            }
        }
        return undefined;
    }
    PropertyReference.tryResolveQualifiedName = tryResolveQualifiedName;
    /**
     * Tries to resolves a PropertyReference tree to a SourceLocation spanning the entire tree as
     * if it were a qualified name.
     *
     * When we parse qualified names, e.g. `com.amazon.MyIntent`, it is ambiguous
     * as to whether this is
     * 1. `PropertyReference(MyIntent, PropertyReference(amazon, NameReference(com)))`
     * 2. `NameReference(com.amazon.MyIntent)`
     *
     * @param expr
     */
    function tryResolveQualifiedNameLocation(expr) {
        var _a;
        if (expr === undefined) {
            return undefined;
        }
        const end = (_a = expr === null || expr === void 0 ? void 0 : expr.loc) === null || _a === void 0 ? void 0 : _a.end;
        const begin = findBeginning(expr);
        if (end && begin) {
            return {
                begin,
                end,
            };
        }
        return undefined;
        function findBeginning(expr) {
            var _a;
            if ((expr === null || expr === void 0 ? void 0 : expr.kind) === "NameReference") {
                return (_a = expr.loc) === null || _a === void 0 ? void 0 : _a.begin;
            }
            if ((expr === null || expr === void 0 ? void 0 : expr.kind) === "PropertyReference") {
                return findBeginning(expr.expression);
            }
            return undefined;
        }
    }
    PropertyReference.tryResolveQualifiedNameLocation = tryResolveQualifiedNameLocation;
})(PropertyReference || (PropertyReference = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktcmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FzdC9wcm9wZXJ0eS1yZWZlcmVuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQU05QixPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBTzVCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRXBEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFrQixTQUFRLElBQWtEO0lBQ3ZGO0lBQ0U7O09BRUc7SUFDTSxJQUFzQjtJQUMvQjs7OztPQUlHO0lBQ00sVUFBbUQsRUFDbkQsV0FBc0MsRUFDL0MsR0FBZ0M7UUFFaEMsS0FBSyxDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7OzttQkFWdkI7Ozs7OzttQkFNQTs7Ozs7O21CQUNBOztRQUlULElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxLQUFLOztRQUNWLE9BQU8sSUFBSSxpQkFBaUIsQ0FDMUIsTUFBQSxJQUFJLENBQUMsSUFBSSwwQ0FBRSxLQUFLLEVBQUUsRUFDbEIsTUFBQSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxLQUFLLEVBQUUsRUFDeEIsTUFBQSxJQUFJLENBQUMsV0FBVywwQ0FBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUN2QyxJQUFJLENBQUMsR0FBRyxDQUNULENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLDZCQUE2QixDQUFDLEdB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