/**
 * Different type of comments supported in ACDL.
 */
export declare enum CommentType {
    /**
     * `// This is line comment.`
     */
    LINE_COMMENT = 0,
    /**
     * `/&#42; this is block comment &#42;/`
     */
    BLOCK_COMMENT = 1
}
/**
 * Represents comment on a AST node. Comment can be of two types LINE_COMMENT and BLOCK COMMENT.
 *
 * Line comments start with "//" and finish at the end of the line ("\n").
 *
 * Block comments can has multi lines and are delimited by "/&#42;" and ends with "&#42;/".
 *
 * With this definition we will not be able to store exact positional information of comment on node. eg.
 * These two codes will have same AST representation. As both have comments on sample node.
 * ```
 *  dialog Foo { // This is also a line comment
 *      sample { ... }
 *  }
 * ```
 *
 * ```
 *  dialog Foo {
 *      // This is also a line comment
 *      sample { ... }
 *  }
 * ```
 *
 * TODO: In future, if we want to store positional information it need to be node in AST.
 */
export interface Comment {
    /**
     * Comment type block or line.
     */
    commentType: CommentType;
    /**
     * Comment string.
     */
    comment: string;
}
//# sourceMappingURL=comment.d.ts.map