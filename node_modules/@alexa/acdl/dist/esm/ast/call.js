import { guard } from "./guard";
import { Tree } from "./tree";
import { isListLiteral } from "./list-literal";
import { isUtterance } from "./utterance";
export const isCall = guard("Call");
export class Call extends Tree {
    constructor(
    /**
     * Name of the Action.
     */
    name, 
    /**
     * Arguments to the Action.
     */
    args, 
    /**
     * Optional type parameters of the call.
     */
    genericArguments, 
    /**
     * Annotations attached to this Call expression.
     */
    annotations, loc) {
        super("Call", loc);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "genericArguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: genericArguments
        });
        Object.defineProperty(this, "annotations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: annotations
        });
        Object.defineProperty(this, "arguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.arguments = args;
        this.setAsParentOn(name);
        this.setAsParentOn(annotations);
        if ((args && isListLiteral(args)) || Array.isArray(args) || isUtterance(args)) {
            this.setAsParentOn(args);
        }
        this.setAsParentOn(genericArguments);
    }
    clone() {
        var _a, _b, _c;
        let args = this.arguments;
        if ((this.arguments && isListLiteral(this.arguments)) || isUtterance(this.arguments)) {
            args = this.arguments.clone();
        }
        else if (Array.isArray(this.arguments)) {
            args = this.arguments.map((a) => a.clone());
        }
        return new Call((_a = this.name) === null || _a === void 0 ? void 0 : _a.clone(), args, (_b = this.genericArguments) === null || _b === void 0 ? void 0 : _b.map((a) => a === null || a === void 0 ? void 0 : a.clone()), (_c = this.annotations) === null || _c === void 0 ? void 0 : _c.map((a) => a.clone()), this.loc);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hc3QvY2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRTlCLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFRNUIsT0FBTyxFQUFDLGFBQWEsRUFBVyxNQUFNLGdCQUFnQixDQUFDO0FBRXZELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFHeEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQWVwQyxNQUFNLE9BQU8sSUFBZ0QsU0FBUSxJQUFxQjtJQUd4RjtJQUNFOztPQUVHO0lBQ00sSUFBVztJQUNwQjs7T0FFRztJQUNILElBQWdCO0lBQ2hCOztPQUVHO0lBQ00sZ0JBQWdEO0lBQ3pEOztPQUVHO0lBQ00sV0FBMEIsRUFDbkMsR0FBb0I7UUFFcEIsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQzs7Ozs7bUJBZlY7Ozs7OzttQkFRQTs7Ozs7O21CQUlBOztRQWxCWDs7Ozs7V0FBOEI7UUFzQjVCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLEtBQUs7O1FBQ1YsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNwRixJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUMvQjthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM3QztRQUNELE9BQU8sSUFBSSxJQUFJLENBQ2IsTUFBQSxJQUFJLENBQUMsSUFBSSwwQ0FBRSxLQUFLLEVBQUUsRUFDbEIsSUFBSSxFQUNKLE1BQUEsSUFBSSxDQUFDLGdCQUFnQiwwQ0FBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsYUFBRCxDQUFDLHVCQUFELENBQUMsQ0FBRSxLQUFLLEVBQUUsQ0FBQyxFQUM3QyxNQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQ0QsQ0FBQztJQUNaLENBQUM7Q0FDRiJ9