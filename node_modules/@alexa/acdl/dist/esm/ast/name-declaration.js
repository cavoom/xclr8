import { guard } from "./guard";
import { Tree } from "./tree";
export const isNameDeclaration = guard("NameDeclaration");
/**
 * This class represents name initialization operation in a Block, including Sample, Condtion, Interaction, Correction.
 * Left side of the expression will be an identifier with optional type and right side could be any allowed expression.
 * <code>
 *     String x = "Hello World!"
 *     findParkingRequest = {time = someTime, location = someLocation}
 *     parkingResult = findParkingAPI(findParkingRequest)
 * </code>
 */
export class NameDeclaration extends Tree {
    constructor(
    /**
     * Name of the variable. If type of this entity is not defined
     * it's type will be derived from return type of expression output.
     */
    name, 
    /**
     * Optional type annotation for the value of this name.
     */
    type, 
    /**
     * Right side of the NameExpr. It could any valid expression which produces output.
     */
    expression, 
    /**
     * Annotations attached to this Name Declaration.
     */
    annotations, comment, loc) {
        super("NameDeclaration", loc);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "expression", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: expression
        });
        Object.defineProperty(this, "annotations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: annotations
        });
        Object.defineProperty(this, "comment", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: comment
        });
        this.setAsParentOn(name);
        this.setAsParentOn(type);
        this.setAsParentOn(expression);
        this.setAsParentOn(annotations);
    }
    clone() {
        var _a, _b, _c, _d;
        return new NameDeclaration((_a = this.name) === null || _a === void 0 ? void 0 : _a.clone(), (_b = this.type) === null || _b === void 0 ? void 0 : _b.clone(), (_c = this.expression) === null || _c === void 0 ? void 0 : _c.clone(), (_d = this.annotations) === null || _d === void 0 ? void 0 : _d.map((a) => a.clone()), this.comment, this.loc);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZS1kZWNsYXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hc3QvbmFtZS1kZWNsYXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRzlCLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFTNUIsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFJMUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLE9BQU8sZUFBNEMsU0FBUSxJQUE4QztJQUM3RztJQUNFOzs7T0FHRztJQUNNLElBQVc7SUFDcEI7O09BRUc7SUFDTSxJQUFvQjtJQUM3Qjs7T0FFRztJQUNNLFVBQWlCO0lBQzFCOztPQUVHO0lBQ00sV0FBMEIsRUFDMUIsT0FBZ0IsRUFDekIsR0FBZ0M7UUFFaEMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7OzttQkFoQnJCOzs7Ozs7bUJBSUE7Ozs7OzttQkFJQTs7Ozs7O21CQUlBOzs7Ozs7bUJBQ0E7O1FBSVQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sS0FBSzs7UUFDVixPQUFPLElBQUksZUFBZSxDQUN4QixNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLEtBQUssRUFBRSxFQUNsQixNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLEtBQUssRUFBRSxFQUNsQixNQUFBLElBQUksQ0FBQyxVQUFVLDBDQUFFLEtBQUssRUFBVSxFQUNoQyxNQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLEdBQUcsQ0FDRCxDQUFDO0lBQ1osQ0FBQztDQUNGIn0=