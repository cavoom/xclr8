import { Call } from "./call";
import { Block } from "./block";
import { SourceLocation } from "./source-location";
import { NameReference } from "./name-reference";
import { SampleExpression, SampleScope } from "./sample";
import { Tree } from "./tree";
import { Annotation } from "./annotation";
import { NameDeclaration } from "./name-declaration";
/**
 * Check if a value is a Condition.
 */
export declare const isCondition: (node: any) => node is Condition;
export type ConditionParent = ConditionScope | SampleScope | NameDeclaration;
export type ConditionExpression = SampleExpression;
export type ConditionScope = ThenScope | ElseScope;
export declare class ThenScope extends Block<ConditionExpression, Condition> {
}
export declare class ElseScope extends Block<ConditionExpression, Condition> {
}
/**
 * A branch in a Condition block.
 */
export declare class Condition extends Tree<"Condition", ConditionParent> {
    /**
     * Condition to branch on. Expressions are only considered if this is true.
     */
    readonly when?: When | undefined;
    /**
     * Block of sample expressions for when the condition is true.
     */
    readonly then?: ThenScope | undefined;
    readonly annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined;
    readonly else?: ElseScope;
    constructor(
    /**
     * Condition to branch on. Expressions are only considered if this is true.
     */
    when?: When | undefined, 
    /**
     * Block of sample expressions for when the condition is true.
     */
    then?: ThenScope | undefined, 
    /**
     * Block of samples to consider if the condition is false.
     */
    _else?: ElseScope | undefined, annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined, loc?: SourceLocation | undefined);
    clone(): Condition;
}
export declare class When extends Tree<"When", Condition> {
    readonly expression: Call | NameReference | undefined;
    constructor(expression: Call | NameReference | undefined);
    clone(): When;
}
//# sourceMappingURL=condition.d.ts.map