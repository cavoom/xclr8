import { ActionDeclaration } from "./action";
import { Argument, ArgumentDeclaration } from "./argument";
import { Call } from "./call";
import { Condition, ElseScope, ThenScope, When } from "./condition";
import { DialogDeclaration } from "./dialog";
import { ListItem, ListLiteral } from "./list-literal";
import { Module, ModuleSchema } from "./module";
import { Name } from "./name";
import { NameDeclaration } from "./name-declaration";
import { NameReference } from "./name-reference";
import { PropertyReference } from "./property-reference";
import { Sample } from "./sample";
import { Block } from "./block";
import { TypeDeclaration, TypeParameter, TypeProperty, TypeReference } from "./type";
import { parseUtteranceSlotNames, Utterance } from "./utterance";
import { validateModuleSchema } from "./validate";
import { EnumDeclaration, EnumItem } from "./enum";
import { Annotation } from "./annotation";
import { AlexaConversations, AlexaSchema, OPERATOR_ACTIONS_SET } from "./prelude";
import { InteractionDeclaration } from "./interaction";
import { Correction, CorrectionScope } from "./correction";
import { parseJSON } from "../util";
/**
 * Parse a JSON form of ASK Module to the in-memory representation.
 *
 * @param data JSON string data
 * @param uri optional URI for the source of the ASKIR JSON
 */
export function fromASKModuleJson(data, uri) {
    return fromASKModule(parseJSON(data, uri), uri);
}
/**
 * Parse a serialized form of ASK Module to the in-memory representation.
 *
 * @param data parsed JSON data
 * @param uri optional URI for the source of the ASKIR JSON
 */
export function fromASKModule(data, uri) {
    var _a, _b;
    cleanStructure(data);
    validateModuleSchema(data, uri);
    return new Module(uri, ModuleSchema, undefined, undefined, (_a = data.exports) !== null && _a !== void 0 ? _a : [], (_b = data.expressions) === null || _b === void 0 ? void 0 : _b.map((expr) => readAsk(expr)));
}
/**
 * Clean a parsed ASKIR JSON file that does not exactly comply with the JSON schema.
 */
export function cleanStructure(data) {
    if (typeof data === "object") {
        Object.entries(data).forEach(([name, value]) => {
            if ((name === "type" || name === "annotations") && value === null) {
                // UI exporter is incorrectly writing `"type": null`
                delete data[name];
            }
            else if (value && typeof value === "object") {
                cleanStructure(value);
            }
            else if (Array.isArray(value)) {
                value.forEach(cleanStructure);
            }
        });
    }
}
function readAsk(expr) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (expr === undefined) {
        return undefined;
    }
    if (Array.isArray(expr)) {
        return expr.map((d) => readAsk(d));
    }
    if (typeof expr === "string") {
        return new Name(expr);
    }
    if (typeof expr === "object") {
        if (expr.kind === "ActionDeclaration") {
            const action = new ActionDeclaration(new Name(expr.name), (_a = expr.arguments) === null || _a === void 0 ? void 0 : _a.map((a) => {
                const arg = new ArgumentDeclaration(new Name(a.name), readAsk(a.type), readAsk(a.defaultExpression), readAnnotations(a.annotations));
                return arg;
            }), readAsk(expr.returnType), (_b = expr.genericArguments) === null || _b === void 0 ? void 0 : _b.map((a) => {
                var _a;
                const p = new TypeParameter(new Name(a.name), (_a = a.constraints) === null || _a === void 0 ? void 0 : _a.map((c) => readAsk(c)));
                return p;
            }), readAnnotations(expr.annotations), undefined);
            return action;
        }
        if (expr.kind === "Call") {
            let args = expr.arguments;
            if (Array.isArray(expr.arguments)) {
                if (expr.name === AlexaSchema.List &&
                    ((_d = (_c = expr.genericArguments) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.name) === AlexaConversations.Argument &&
                    expr.genericArguments[0].genericArguments === undefined) {
                    // List<Argument> - this is the old version of the core library, we will instead let the compiler infer the type
                    expr.name = undefined;
                    expr.genericArguments = undefined;
                }
                // list literal arguments, wrap them in a ListLiteral type
                args = new ListLiteral(expr.arguments.map((arg, i) => new ListItem(readAsk(arg), i)));
            }
            else if (expr.arguments && typeof expr.arguments === "object") {
                if (expr.name === AlexaConversations.utterances || expr.name === AlexaConversations.intent) {
                    if (Array.isArray(expr.genericArguments) && expr.genericArguments.length === 0) {
                        // empty array should be undefined
                        expr.genericArguments = undefined;
                    }
                    const { samples } = expr.arguments;
                    if (samples &&
                        samples.kind === "Call" &&
                        samples.name === AlexaSchema.List &&
                        ((_f = (_e = samples.genericArguments) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.name) === AlexaSchema.String) {
                        // List<String> instead of List<Utterance<T>>
                        // remove the types and let the compiler infer them.
                        samples.name = undefined;
                        samples.genericArguments = undefined;
                    }
                }
                args = Object.entries(expr.arguments).map(([name, arg], i) => new Argument(new Name(name), i, readAsk(arg)));
            }
            else if (typeof expr.arguments === "string") {
                const names = parseUtteranceSlotNames(expr.arguments);
                if (names) {
                    args = new Utterance(expr.arguments, names.map((name) => new Name(name)));
                }
            }
            // The exported IR use 'lhs' and 'rhs' for operator arguments
            // convert it to 'left' and 'right'
            if (OPERATOR_ACTIONS_SET.has(expr.name)) {
                for (const arg of args) {
                    if (arg.name.name === "lhs") {
                        arg.name = "left";
                    }
                    else if (arg.name.name === "rhs") {
                        arg.name = "right";
                    }
                }
            }
            return new Call(new Name(expr.name), args, readAsk(expr.genericArguments), readAnnotations(expr.annotations));
        }
        if (expr.kind === "Condition") {
            const thenScope = new ThenScope(readAsk(expr.then));
            const elseScope = new ElseScope(readAsk(expr.else));
            return new Condition(new When(readAsk(expr.when)), thenScope, elseScope, readAnnotations(expr.annotations));
        }
        if (expr.kind === "Correction") {
            const actualScope = new CorrectionScope(readAsk(expr.actual));
            const expectedScope = new CorrectionScope(readAsk(expr.expected));
            return new Correction(actualScope, expectedScope);
        }
        if (expr.kind === "DialogDeclaration") {
            return new DialogDeclaration(new Name(expr.name), (_g = expr.arguments) === null || _g === void 0 ? void 0 : _g.map((a) => {
                const arg = new ArgumentDeclaration(new Name(a.name), readAsk(a.type), readAsk(a.defaultExpression), readAnnotations(expr.annotations));
                return arg;
            }), readAsk(expr.samples), readAsk(expr.returnType), (_h = expr.genericArguments) === null || _h === void 0 ? void 0 : _h.map((a) => {
                var _a;
                return new TypeParameter(new Name(a.name), (_a = a.constraints) === null || _a === void 0 ? void 0 : _a.map((c) => readAsk(c)));
            }), readAnnotations(expr.annotations));
        }
        if (expr.kind === "InteractionDeclaration") {
            return new InteractionDeclaration(new Block(readAsk(expr.expressions)), readAnnotations(expr.annotations));
        }
        if (expr.kind === "TypeReference") {
            return new TypeReference(new Name(renameType(expr.name)), readAsk(expr.arguments), readAnnotations(expr.annotations));
        }
        if (expr.kind === "TypeDeclaration") {
            return new TypeDeclaration(new Name(expr.name), expr.properties === undefined
                ? undefined
                : expr.properties.map((prop) => {
                    const typeProperty = new TypeProperty(new Name(prop.name), readAsk(prop.type), prop.optional, readAnnotations(expr.annotations));
                    return typeProperty;
                }), (_j = expr.genericArguments) === null || _j === void 0 ? void 0 : _j.map((arg) => {
                const typeParam = new TypeParameter(new Name(arg.name), readAsk(arg.constraints));
                return typeParam;
            }), readAsk(expr.extensions), readAnnotations(expr.annotations));
        }
        if (expr.kind === "NameDeclaration" || expr.kind === "QualifiedNameDeclaration" || expr.kind === "InteractionNameDeclaration") {
            return new NameDeclaration(new Name(expr.name), readAsk(expr.type), readAsk(expr.expression), readAnnotations(expr.annotations));
        }
        if (expr.kind === "NameReference") {
            return new NameReference(new Name(renameType(expr.name)), readAnnotations(expr.annotations));
        }
        if (expr.kind === "PropertyReference") {
            return new PropertyReference(readAsk(expr.name), readAsk(expr.expression), readAnnotations(expr.annotations));
        }
        if (expr.kind === "Sample") {
            return new Sample(new Block(readAsk(expr.expressions)), readAnnotations(expr.annotations));
        }
        if (expr.kind === "Scope") {
        }
        else if (expr.kind === "EnumDeclaration") {
            return new EnumDeclaration(new Name(expr.name), Array.isArray(expr.items) ? readAsk(expr.items) : undefined, readAnnotations(expr.annotations));
        }
        else if (expr.kind === "EnumItemDeclaration") {
            return new EnumItem(readAsk(expr.name), readAnnotations(expr.annotations));
        }
    }
    throw new Error(`unexpected expression: ${JSON.stringify(expr)}`);
}
/**
 * Renames a type from the server-side representation to the client-side representation.
 */
function renameType(name) {
    // Even though we no longer map AlexaSchema.Type to AlexaConversations.Type
    // in compile.ts's compileExpression (from ACDL to ASKIR) we keep this so decompile works
    if (name === AlexaConversations.Type) {
        return AlexaSchema.Type;
    }
    if (name === AlexaConversations.Argument) {
        return AlexaSchema.Argument;
    }
    if (name === AlexaConversations.Arguments) {
        return AlexaSchema.Arguments;
    }
    return name;
}
function readAnnotations(calls) {
    return calls === null || calls === void 0 ? void 0 : calls.map((call) => new Annotation(readAsk(call)));
}
//# sourceMappingURL=data:application/json;base64,