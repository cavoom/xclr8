import { SourceLocation } from "./source-location";
import { Tree } from "./tree";
import { Node } from "./node";
import { Name } from "./name";
import { Annotation } from "./annotation";
/**
 * Asserts if the Expression is a `Name`.
 */
export declare const isNameReference: (node: any) => node is NameReference;
/**
 * Expression types that are Names.
 */
export declare class NameReference extends Tree<"NameReference", Node> {
    /**
     * String value of the name at this point in the tree.
     */
    readonly name: Name | undefined;
    readonly annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined;
    constructor(
    /**
     * String value of the name at this point in the tree.
     */
    name: Name | undefined, annotations?: Annotation<import("./annotation").AnnotatedNode>[] | undefined, loc?: SourceLocation);
    clone(): NameReference;
}
//# sourceMappingURL=name-reference.d.ts.map