import { Call } from "./call";
import { SourceLocation } from "./source-location";
import { Tree } from "./tree";
import { Value } from "./value";
export declare const isListLiteral: (node: any) => node is ListLiteral<Value>;
/**
 * Represents a List of argument values.
 *
 * This construct encodes the
 */
export declare class ListLiteral<T extends Value = Value> extends Tree<"ListLiteral", Call> {
    readonly items: ListItem<T>[];
    constructor(items: ListItem<T>[], loc?: SourceLocation);
    clone(): ListLiteral<T>;
}
export declare const isListItem: (node: any) => node is ListItem<Value>;
/**
 * Represents an item at an index in a List.
 */
export declare class ListItem<T extends Value = Value> extends Tree<"ListItem", ListLiteral<T>> {
    readonly item: T;
    readonly index: number;
    constructor(item: T, index: number, loc?: SourceLocation);
    clone(): ListItem<T>;
}
//# sourceMappingURL=list-literal.d.ts.map