import { Call } from "./call";
import { Block } from "./block";
import { InteractionScope } from "./interaction";
import { NameDeclaration } from "./name-declaration";
import { Tree } from "./tree";
import { SourceLocation } from "./source-location";
export type CorrectionParent = InteractionScope;
/**
 * Expressions allowed within a Correction.
 */
export type CorrectionExpression = Call | NameDeclaration;
/**
 * Checks if the expression is for CorrectionScope.
 */
export declare const isCorrectionExpression: (node: any) => node is Call<import("./call").CallContext> | NameDeclaration<import("./name-declaration").Named>;
/**
 * Definition of CorrectionScope
 */
export declare class CorrectionScope extends Block<CorrectionExpression, Correction> {
}
/**
 * Checks if the expression is Correction.
 */
export declare const isCorrection: (node: any) => node is Correction;
/**
 * Class of Correction
 */
export declare class Correction extends Tree<"Correction", CorrectionParent> {
    /**
     * Scope for the actual
     */
    readonly actual?: CorrectionScope | undefined;
    /**
     * Scope for the expected
     */
    readonly expected?: CorrectionScope | undefined;
    constructor(
    /**
     * Scope for the actual
     */
    actual?: CorrectionScope | undefined, 
    /**
     * Scope for the expected
     */
    expected?: CorrectionScope | undefined, loc?: SourceLocation);
    clone(): this;
}
//# sourceMappingURL=correction.d.ts.map