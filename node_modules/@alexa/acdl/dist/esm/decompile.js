import fs from "fs-extra";
import { printModule } from "./print";
import { isGeneratedFile, isNotUndefined } from "./util";
import path from "path";
/**
 * Transforms source ASKIR JSON files into ACDL files.
 *
 * ACDL files are written directly alongside the original ASK JSON file.
 *
 * The original ASK JSON files are copied to the `build` directory configured in `package.json`.
 * @param project ACDL Project to decompile.
 * @param options optional options to customize the behavior of the decompile. Currently only outDir and if
 * specified will not delete source ASKIR
 */
export async function decompileProject(project, options) {
    const checker = project.getTypeChecker();
    // Remove generated ASKIR files since they will be rebuilt when compiling the project.
    await removeGeneratedASKIRModules(project);
    // Convert remaining ASKIR files to ACDL
    const updatedFiles = await Promise.all(project.sourceModules.map(async (src) => {
        if (src.uri.endsWith(".json") && !isGeneratedFile(src.uri)) {
            const outFile = getDecompiledOutFilePath(src.uri, options === null || options === void 0 ? void 0 : options.outDir);
            // write the new ACDL file
            await fs.writeFile(outFile, printModule(src.content, checker));
            // The removal of the decompilation askir source is of questionable usefulness
            // and it might have been originally motivated because the askir source and acdl
            // destination share the same directory.
            // When an out dir is specified askir and acdl will not share the same directory
            // so skipping that removal
            if (!(options === null || options === void 0 ? void 0 : options.outDir)) {
                await fs.unlink(src.uri);
            }
            return src.uri;
        }
        return undefined;
    }));
    return updatedFiles.filter(isNotUndefined);
}
/**
 * Gets the destination acdl file path by Rebuilding the askir source uri with two changes:
 *    1) if there is an oputDir, use that instead of the directory in the uri
 *    2) change .json extension to .acdl
 * @param uri
 * @param outDir
 * @returns the destination acdl file path
 */
export function getDecompiledOutFilePath(uri, outDir) {
    const parsedUri = path.parse(uri);
    const uriOutDir = outDir ? outDir : parsedUri.dir;
    const uriOutExtension = parsedUri.ext.replace(".json", ".acdl").replace(".ask.acdl", ".acdl");
    return path.join(uriOutDir, parsedUri.name + uriOutExtension);
}
/**
 * Delete the ASKIR modules from the project source if there are any. This is necessary because when the
 * skill package is exported, the src directory contains the generated ASKIR modules, but they will be
 * rebuilt when the skill is compiled.
 */
async function removeGeneratedASKIRModules(project) {
    const { rootDir, sourceRootDir, srcDir } = project.config;
    // The directory where the ACDL/ASKIR files are stored.
    const sourceFilesDir = path.join(sourceRootDir !== null && sourceRootDir !== void 0 ? sourceRootDir : rootDir, srcDir);
    let files = [];
    try {
        files = await fs.readdir(sourceFilesDir);
    }
    catch (err) {
        // If source directory doesn't exist in the project, just ignore the error for backwards compatibility.
    }
    // Remove any generated ASKIR files
    await Promise.all(files.map(async (file) => {
        if (isGeneratedFile(file)) {
            const absoluteFilePath = path.join(sourceFilesDir, file);
            await fs.unlink(absoluteFilePath);
        }
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb21waWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY29tcGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDMUIsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVwQyxPQUFPLEVBQUMsZUFBZSxFQUFFLGNBQWMsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUN2RCxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFTeEI7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxPQUFnQixFQUFFLE9BQTBCO0lBQ2pGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUV6QyxzRkFBc0Y7SUFDdEYsTUFBTSwyQkFBMkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUzQyx3Q0FBd0M7SUFDeEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNwQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDdEMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUQsTUFBTSxPQUFPLEdBQUcsd0JBQXdCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsTUFBTSxDQUFDLENBQUM7WUFFbkUsMEJBQTBCO1lBQzFCLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUVoRSw4RUFBOEU7WUFDOUUsZ0ZBQWdGO1lBQ2hGLHdDQUF3QztZQUN4QyxnRkFBZ0Y7WUFDaEYsMkJBQTJCO1lBQzNCLElBQUksQ0FBQyxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLENBQUEsRUFBRTtnQkFDcEIsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMxQjtZQUVELE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQztTQUNoQjtRQUNELE9BQU8sU0FBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUNEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsR0FBVyxFQUFFLE1BQWU7SUFDbkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUNsRCxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5RixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxLQUFLLFVBQVUsMkJBQTJCLENBQUMsT0FBZ0I7SUFDekQsTUFBTSxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUV4RCx1REFBdUQ7SUFDdkQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLGFBQWIsYUFBYSxjQUFiLGFBQWEsR0FBSSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFbkUsSUFBSSxLQUFLLEdBQWEsRUFBRSxDQUFDO0lBRXpCLElBQUk7UUFDRixLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQzFDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWix1R0FBdUc7S0FDeEc7SUFFRCxtQ0FBbUM7SUFDbkMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ3ZCLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDekQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyJ9