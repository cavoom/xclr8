import { v1 } from "ask-smapi-model";
import { LwaProfile } from "./ask-cli-config";
/**
 * Skill Stage.
 */
export declare enum SkillStage {
    DEVELOPMENT = "development",
    CERTIFICATION = "certification",
    LIVE = "live"
}
/**
 * A SMAPI client.
 */
export declare class SmapiClient {
    /**
     * LWA profile to use when making calls.
     */
    readonly profile: LwaProfile;
    /**
     * Optionally specify a different SMAPI endpoint.
     */
    readonly smapiEndpoint?: string | undefined;
    /**
     * Optionally specify a different LWA authorization endpoint.
     */
    readonly lwaTokenEndpoint?: string | undefined;
    /**
     * Instantiated `SkillManagementServiceClient`.
     */
    readonly client: import("ask-smapi-model").services.skillManagement.SkillManagementServiceClient;
    constructor(
    /**
     * LWA profile to use when making calls.
     */
    profile: LwaProfile, 
    /**
     * Optionally specify a different SMAPI endpoint.
     */
    smapiEndpoint?: string | undefined, 
    /**
     * Optionally specify a different LWA authorization endpoint.
     */
    lwaTokenEndpoint?: string | undefined);
    /**
     * Delete a Skill.
     *
     * @param skillId ID of the skill to delete.
     */
    deleteSkill(skillId: string): Promise<void>;
    /**
     * Enables a skill for given stage.
     *
     * @param skillId Id of the skill to enable.
     * @param stage Stage to enable.
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-enablement.html#enable-a-skill
     */
    enableSkill(skillId: string, stage: string): Promise<void>;
    /**
     * Create an upload URL.
     *
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#create-upload-url
     */
    createUploadUrl(): Promise<string>;
    /**
     * Upload a Skill Package ZIP file to a URL.
     *
     * @param skillPackageZipPath path to a Skill Package ZIP on disk
     * @param uploadUrl url to upload Skill Package
     */
    uploadSkillPackage(skillPackageZipPath: string, uploadUrl: string): Promise<void>;
    /**
     * Create a new Skill with a Skill Manifest and return the new Skill ID.
     *
     * @param manifest initial Skill Manifest
     */
    createSkill(manifest: v1.skill.Manifest.SkillManifest): Promise<string>;
    /**
     * Import a Skill Package from a URL and polls until the import succeeds or fails.
     *
     * @param skillId ID of the skill to deploy
     * @param skillPackageUrl URL of the uploaded skill-package
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#import-existing-skill
     */
    importSkillPackage(skillId: string, skillPackageUrl: string): Promise<void>;
    /**
     * Imports a Skill Package from a URIL and returns the Import ID. This method does
     * not wait until the import completed.
     *
     * @param skillId ID of the skill to deploy
     * @param skillPackageUrl URL of the uploaded skill-package
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#import-existing-skill
     */
    importSkillPackageAsync(skillId: string, skillPackageUrl: string): Promise<string>;
    /**
     * Gets the import status of an ongoing import.
     *
     * @param importId ID of the import.
     */
    getImportStatus(importId: string): Promise<v1.skill.ImportResponse>;
    /**
     * Poll the an import's status. This API will routinely check the status until it fails or succeeds.
     *
     * @param importId ID of the import to poll.
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#get-status-for-importid
     */
    pollImportStatus(importId: string): Promise<void>;
}
//# sourceMappingURL=smapi.d.ts.map