import { Apply } from "./apply";
import { TypeChecker } from "./checker";
import { ParseError } from "./error";
import { SkillContext } from "./skill-context";
import { Thing } from "./thing";
/**
 * Validates a com.amazon.alexa.ask.conversations.skill data structure.
 *
 * 1. It must contain a list of Dialogs with at least one item.
 * 2. If taskContextProjectionInfo is specified, then its contents must be valid. (see validateSki)
 */
export declare function validateSkill(skill: Apply, checker: TypeChecker): ParseError[];
/**
 * validate the policy info in the skill action
 * 1. make sure there's no ResetArguments and ResetAllArguments point to the same api
 * 2. make sure the EnsureArgOrder policy not conflict
 * @param skill
 * @param checker
 * @returns
 */
export declare function validateSkillPolicy(skill: Apply, checker: TypeChecker): ParseError[];
/**
 * validate the EnsureArgOrder policies are not conflict
 *
 * E.G. Below is a invalid case where we can't figure out the order of 'cityName' and 'date'
 * ```
 * EnsureArgOrder(getWeather.arguments.cityName, getWeather.arguments.date)
 * EnsureArgOrder(getWeather.arguments.date, getWeather.arguments.cityName)
 * ```
 *
 * Feature request link: https://github.com/alexa/ask-ac/issues/554
 * @param policyItems
 * @param checker
 * @returns
 */
export declare function validateEnsureArgOrder(policies: Thing | undefined, checker: TypeChecker): ParseError[];
/**
 * validate the locale info in the skill action
 * 1. There must exist deployable dialog for all specified locales
 * 2. There must exist InteractionModel for all specified locales
 * 3. At least one locale need to be specified for a skill
 * 4. The samples in a dialog must have all required locales for the dialog
 * 5. All the nameRef used in a sample must support all the locales the sample use
 * @param skill
 * @param checker
 * @returns
 */
export declare function validateSkillLocale(skill: Apply, checker: TypeChecker): ParseError[];
/**
 * Validate the `loadContext` action configured in a TaskContextProjectionInfo.
 *
 * 1. it cannot accept any arguments
 * 2. it cannot have any generic arguments
 * 3. the return type must be `com.amazon.alexa.ask.conversations.TaskContextProjection`.
 * 4. it must be a user-defined action and not a built-in action.
 */
export declare function validateLoadContextAction(context: SkillContext | undefined): ParseError[];
/**
 * Validate the `saveContext` action configured in a TaskContextProjectionInfo.
 *
 * 1. it cannot have any generic arguments.
 * 2. the return type must be `Nothing` or `Void`.
 * 3. it must have exactly one argument of type `TaskContextProjection`.
 * 4. it must be a user-defined action and not a built-in.
 */
export declare function validateSaveContextAction(context: SkillContext | undefined): ParseError[];
/**
 * Validates the `trackActions` field configured in `TaskContextProjectionInfo`.
 *
 * 1. the list cannot be empty
 * 2. an action in the list cannot be the `loadContext` or the `saveContext` action.
 * 3. it must be a user-defined API and not a built-in action.
 */
export declare function validateTrackActions(context: SkillContext | undefined): ParseError[];
/**
 * Validates the context of a call to `com.amazon.alexa.ask.conversations.skill`.
 *
 * 1. the result of the call must be assigned to a name, e.g. `name = skill(..)`.
 * 2. the call can only exist at the module scope, it cannot be within a dialog sample.
 */
export declare function validateSkillCallContext(skill: Apply): ParseError[];
//# sourceMappingURL=validate-skill.d.ts.map