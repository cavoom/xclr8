import * as ask from "./ast";
import { TypeChecker } from "./checker";
import { Apply } from "./apply";
/**
 *
 * Gets the namespaces from the getAllNames<T>(Args<String> namespaces) action and returns
 * all nodes in the matching namespaces that are a subtype of type T.
 *
 * In the following example, the name declaration nodes for john and jane are returned:
 *
 * ```
 * namespace test.namespace
 *
 * john = Person {
 *   firstName = "John",
 *   lastName = "Doe",
 * }
 *
 * jane = Person {
 *   firstName = "Jane",
 *   lastName = "Doe",
 * }
 *
 * people = getAllNames<Person>("test.namespace")
 * ```
 * Calling this function with the getAllNames apply will return
 * the name declaration nodes for john and jane.
 *
 * ```
 * const nodes = getAllNames(getAllNamesApply, typeChecker) -> [john, jane]
 * ```
 */
export declare function getAllNames(apply: Apply, checker: TypeChecker): Array<ask.NameDeclaration | ask.DialogDeclaration> | undefined;
/**
 * Returns the unique namespaces provided to the getAllNames action.
 */
export declare function getNamespacesFromGetAllNames(apply: Apply, checker: TypeChecker): string[];
//# sourceMappingURL=get-all-names.d.ts.map