import { AlexaConversations } from "./ast";
export var Constants;
(function (Constants) {
    Constants.DEFAULT_CONFIG_FILE_NAME = "ask.json";
    Constants.RESERVED_PREFIXES = [
        "AMAZON",
        // TODO: add schema and conversations back to this list once we figure out how to give exception to @alexa/schema
        // issue link: https://github.com/alexa/ask-ac/issues/92
        // 'com.amazon.alexa.schema',
        // 'com.amazon.alexa.ask.conversations',
        "slotTypes",
        "prompts",
    ];
    Constants.BINARY_OPERATOR_ACTIONS_SET = new Set([
        AlexaConversations.And,
        AlexaConversations.Eq,
        AlexaConversations.Gt,
        AlexaConversations.Gte,
        AlexaConversations.in,
        AlexaConversations.Lt,
        AlexaConversations.Lte,
        AlexaConversations.Neq,
        AlexaConversations.Or,
    ]);
    Constants.OPERATOR_ACTIONS_SET = new Set([
        // Logical operations
        AlexaConversations.And,
        AlexaConversations.Eq,
        AlexaConversations.Gt,
        AlexaConversations.Gte,
        AlexaConversations.in,
        AlexaConversations.Lt,
        AlexaConversations.Lte,
        AlexaConversations.Neq,
        AlexaConversations.Or,
        AlexaConversations.in,
        AlexaConversations.is,
        AlexaConversations.isInCatalog,
        AlexaConversations.Not,
    ]);
    Constants.FILE_ACCESS_ACTIONS_SET = new Set([
        // Logical operations
        AlexaConversations.apl,
        AlexaConversations.apla,
    ]);
    /**
     * Name of the Skill Manifest at the root of a Skill Package.
     */
    Constants.SkillManifestFileName = "skill.json";
    /**
     * Name of the Skill Package Folder.
     */
    Constants.SkillPackageFolderName = "skill-package";
    /**
     * Name of the folder at the root of a Skill Package containing the Interaction Models.
     */
    Constants.InteractionsModelFolderName = "interactionModels";
    /**
     * Name of the folder under ${InteractionsModelFolderName} containing the custom Interaction Model JSON Files.
     */
    Constants.CustomFolderName = "custom";
    /**
     * Name of the folder inside the ${InteractionModelFolderName} containing the Alexa Conversations ASKIR files.
     */
    Constants.ConversationsFolderName = "conversations";
    /**
     * Name of the folder containing Responses.
     */
    Constants.ResponseFolderName = "response";
    /**
     * Name of the folder containing APL display responses.
     */
    Constants.DisplayFolderName = "display";
    /**
     * Name of the folder containing APLA prompt responses.
     */
    Constants.PromptsFolderName = "prompts";
    /**
     * Name of the folder containing Prompts.
     */
    Constants.AssetsFolderName = "assets";
    /**
     * Name of the folder containing Data Store Packages.
     */
    Constants.DataStorePackagesFolderName = "_dataStorePackages";
    /**
     * Name of the folder containing Prompts.
     */
    Constants.TasksFolderName = "tasks";
    /**
     * Name of the folder containing the In Skill Product files.
     */
    Constants.InSkillPurchaseFolderName = "isps";
    /**
     * File Extension for ACDL Files.
     */
    Constants.ACDLExtension = "acdl";
    /**
     * File Extension for ASKIR JSON Files.
     */
    Constants.ASKIRJsonExtension = "json";
    /**
     * Name of the NPM Package containing Alexa Schema.
     */
    Constants.AlexaSchemaPackageName = "@alexa/schema";
    /**
     * Name of the NPM Package containing Alexa Conversations Core Library.
     */
    Constants.ACCorePackageName = "@alexa/ac-core";
    /**
     * Name of the folder containing ASKIR Dependencies.
     */
    Constants.DependenciesFolderName = "_dependencies";
    /**
     * Name of the folder containing Compiled ASKIR Files in a `_dependencies` folder.
     */
    Constants.CompiledOutputFoldername = "compiled-output";
    /**
     * Name of the file for APLA and APL
     */
    Constants.APLADocumentFileName = "document.json";
    /**
     * The maximum size of IR is 4mb
     */
    Constants.MaximumFileSize = 4 * 1024 * 1024;
    Constants.BuiltinIntentPrefix = "AMAZON.";
})(Constants || (Constants = {}));
/**
 * Enum of the allowed `type` field in an APL/A file.
 *
 * Both `APL-A` and `APLA` are allowed for APL-A files.
 *
 * Only `APL` is allowed for APL files.
 */
export var APLFileType;
(function (APLFileType) {
    APLFileType["APLA"] = "APLA";
    APLFileType["APL_A"] = "APL-A";
    APLFileType["APL"] = "APL";
})(APLFileType || (APLFileType = {}));
export const APLAFileTypes = [APLFileType.APLA, APLFileType.APL_A];
export const APLFileTypes = [APLFileType.APL];
/**
 * Contains reusable error messages used for validations.
 */
export var ValidationErrorMessages;
(function (ValidationErrorMessages) {
    ValidationErrorMessages["MustBeBackedByCatalog"] = "must be backed by a catalog - choose a type from ask.interactionModel.slotTypes.*, com.amazon.ask.types.builtins.AMAZON.*, or annotate your type with the @catalog annotation.";
})(ValidationErrorMessages || (ValidationErrorMessages = {}));
export var GeneratedInteractionModelModule;
(function (GeneratedInteractionModelModule) {
    /**
     * The root acdl namespace for each each generated interaction module.
     */
    GeneratedInteractionModelModule.namespacePrefix = "ask.interactionModel";
    /**
     * The uri prefix that each generated module URI will start with.
     */
    GeneratedInteractionModelModule.uriPrefix = "generated-im";
})(GeneratedInteractionModelModule || (GeneratedInteractionModelModule = {}));
export var Namespaces;
(function (Namespaces) {
    /**
     * Namespace for generated slotTypes
     */
    Namespaces.slotTypes = "ask.interactionModel.slotTypes";
    /**
     * Namespace for generated catalogs
     */
    Namespaces.catalogs = "ask.interactionModel.catalogs";
    /**
     * Namespace for generated intents
     */
    Namespaces.intents = "ask.interactionModel.intents";
    /**
     * Namespace for generated intent types
     */
    Namespaces.intentTypes = "ask.interactionModel.intentTypes";
    /**
     * Namespace given to APL/A prompts loaded from `response/prompts`.
     */
    Namespaces.prompts = "prompts";
    /**
     * Namespace given to APL display templates loaded from `response/display`.
     */
    Namespaces.display = "displays";
    /**
     * Namespace given to builtin types
     */
    Namespaces.builtinTypes = "com.amazon.ask.types.builtins.AMAZON";
    /**
     * Namespace given to builtin catalogs
     */
    Namespaces.builtinCatalogs = "com.amazon.ask.catalogs.builtins.AMAZON";
})(Namespaces || (Namespaces = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFekMsTUFBTSxLQUFXLFNBQVMsQ0FtSXpCO0FBbklELFdBQWlCLFNBQVM7SUFDWCxrQ0FBd0IsR0FBRyxVQUFVLENBQUM7SUFDdEMsMkJBQWlCLEdBQUc7UUFDL0IsUUFBUTtRQUNSLGlIQUFpSDtRQUNqSCx3REFBd0Q7UUFDeEQsNkJBQTZCO1FBQzdCLHdDQUF3QztRQUN4QyxXQUFXO1FBQ1gsU0FBUztLQUNWLENBQUM7SUFFVyxxQ0FBMkIsR0FBZ0IsSUFBSSxHQUFHLENBQUM7UUFDOUQsa0JBQWtCLENBQUMsR0FBRztRQUN0QixrQkFBa0IsQ0FBQyxFQUFFO1FBQ3JCLGtCQUFrQixDQUFDLEVBQUU7UUFDckIsa0JBQWtCLENBQUMsR0FBRztRQUN0QixrQkFBa0IsQ0FBQyxFQUFFO1FBQ3JCLGtCQUFrQixDQUFDLEVBQUU7UUFDckIsa0JBQWtCLENBQUMsR0FBRztRQUN0QixrQkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLGtCQUFrQixDQUFDLEVBQUU7S0FDdEIsQ0FBQyxDQUFDO0lBRVUsOEJBQW9CLEdBQWdCLElBQUksR0FBRyxDQUFDO1FBQ3ZELHFCQUFxQjtRQUNyQixrQkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLGtCQUFrQixDQUFDLEVBQUU7UUFDckIsa0JBQWtCLENBQUMsRUFBRTtRQUNyQixrQkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLGtCQUFrQixDQUFDLEVBQUU7UUFDckIsa0JBQWtCLENBQUMsRUFBRTtRQUNyQixrQkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLGtCQUFrQixDQUFDLEdBQUc7UUFDdEIsa0JBQWtCLENBQUMsRUFBRTtRQUNyQixrQkFBa0IsQ0FBQyxFQUFFO1FBQ3JCLGtCQUFrQixDQUFDLEVBQUU7UUFDckIsa0JB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