import * as path from "path";
import * as immutable from "immutable";
import { TypeChecker } from "./checker";
import { evaluateDialogFlow } from "./evaluate";
import { Flow } from "./flow";
import { loadSkillContext } from "./skill-context";
import { EvaluationState } from "./evaluation-state";
import { visitEachChild, visitEachChildType } from "./visit";
import { ValidationErrorFactory } from "./error-factory";
/**
 * Validates a com.amazon.alexa.ask.conversations.skill data structure.
 *
 * 1. It must contain a list of Dialogs with at least one item.
 * 2. If taskContextProjectionInfo is specified, then its contents must be valid. (see validateSki)
 */
export function validateSkill(skill, checker) {
    const errors = [];
    const skillContext = loadSkillContext(skill);
    errors.push(...validateLoadContextAction(skillContext), ...validateSaveContextAction(skillContext), ...validateTrackActions(skillContext));
    const dialogs = checker.project.getRootDialogs();
    if (dialogs === undefined || dialogs.length === 0) {
        const dialogsArray = skill.getArgumentValueThing("dialogs");
        if (dialogsArray !== undefined) {
            // if dialogs array exist, report this error on dialog array loc
            errors.push(ValidationErrorFactory.NoDialogsInSkill({
                expr: dialogsArray.origin,
            }));
        }
        else {
            errors.push(ValidationErrorFactory.NoDialogsInSkill());
        }
    }
    else {
        for (const rootDialog of dialogs) {
            const flow = new Flow(new TypeChecker(skill.checker.project), rootDialog, undefined, []);
            errors.push(...evaluateDialogFlow(flow, new EvaluationState(skillContext)));
        }
    }
    // validate skill locales
    errors.push(...validateSkillLocale(skill, checker));
    // validate skill policies
    errors.push(...validateSkillPolicy(skill, checker));
    return errors;
}
/**
 * validate the policy info in the skill action
 * 1. make sure there's no ResetArguments and ResetAllArguments point to the same api
 * 2. make sure the EnsureArgOrder policy not conflict
 * @param skill
 * @param checker
 * @returns
 */
export function validateSkillPolicy(skill, checker) {
    const errors = [];
    const policies = skill.getArgumentValueThing("policies");
    const policyItems = (policies === null || policies === void 0 ? void 0 : policies.isList()) && policies.isLiteral() ? policies.getListItems() : [];
    const actionsUsedInResetAllArguments = new Map();
    // first loop: record action names used in ResetAllArguments policies
    policyItems === null || policyItems === void 0 ? void 0 : policyItems.forEach((item) => {
        var _a, _b, _c, _d, _e;
        const itemThing = checker.getThing(item);
        if ((_a = itemThing === null || itemThing === void 0 ? void 0 : itemThing.apply) === null || _a === void 0 ? void 0 : _a.isResetAllArguments()) {
            const actionThing = itemThing.getProperty("action");
            if (actionThing === null || actionThing === void 0 ? void 0 : actionThing.isAction()) {
                if (checker.isNameReference(item === null || item === void 0 ? void 0 : item.item)) {
                    // if the item is a nameReference, record the nameReference's name for better error message
                    actionsUsedInResetAllArguments.set((_b = actionThing.name) === null || _b === void 0 ? void 0 : _b.name, (_d = (_c = item === null || item === void 0 ? void 0 : item.item) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.name);
                }
                else {
                    actionsUsedInResetAllArguments.set((_e = actionThing.name) === null || _e === void 0 ? void 0 : _e.name, undefined);
                }
            }
        }
    });
    // second loop: check all ResetArguments type policy doesn't use action which already use ResetAllArguments policy
    policyItems === null || policyItems === void 0 ? void 0 : policyItems.forEach((item) => {
        var _a, _b, _c, _d, _e;
        const itemThing = checker.getThing(item);
        if ((_a = itemThing === null || itemThing === void 0 ? void 0 : itemThing.apply) === null || _a === void 0 ? void 0 : _a.isResetArguments()) {
            const argumentsValueThing = itemThing.getProperty("arguments");
            if ((argumentsValueThing === null || argumentsValueThing === void 0 ? void 0 : argumentsValueThing.isLiteral()) && argumentsValueThing.isList()) {
                const items = argumentsValueThing.getItems();
                if (items && items.length >= 1 && ((_d = (_c = (_b = items[0]) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.isAction())) {
                    const actionName = (_e = items[0].parent.parent.name) === null || _e === void 0 ? void 0 : _e.name;
                    if (actionsUsedInResetAllArguments.has(actionName)) {
                        const policyName = actionsUsedInResetAllArguments.get(actionName);
                        const errorArguments = {
                            expr: item === null || item === void 0 ? void 0 : item.item,
                            attributes: {
                                actionName,
                                policyName,
                            },
                        };
                        errors.push(policyName !== undefined
                            ? ValidationErrorFactory.InvalidPolicyWithPolicyName(errorArguments)
                            : ValidationErrorFactory.InvalidPolicy(errorArguments));
                    }
                }
            }
        }
    });
    errors.push(...validateEnsureArgOrder(policies, checker));
    return errors;
}
/**
 * validate the EnsureArgOrder policies are not conflict
 *
 * E.G. Below is a invalid case where we can't figure out the order of 'cityName' and 'date'
 * ```
 * EnsureArgOrder(getWeather.arguments.cityName, getWeather.arguments.date)
 * EnsureArgOrder(getWeather.arguments.date, getWeather.arguments.cityName)
 * ```
 *
 * Feature request link: https://github.com/alexa/ask-ac/issues/554
 * @param policyItems
 * @param checker
 * @returns
 */
export function validateEnsureArgOrder(policies, checker) {
    var _a, _b, _c, _d, _e, _f;
    const errors = [];
    const policyItems = (_b = (_a = policies === null || policies === void 0 ? void 0 : policies.asLiteralList()) === null || _a === void 0 ? void 0 : _a.getItems()) !== null && _b !== void 0 ? _b : [];
    if (policyItems === undefined || policyItems.length === 0) {
        return errors;
    }
    // go through all the EnsureArgOrder policy and build the order graph
    const parentToChild = new Map();
    // record the token to Argument Thing, this map is used to provide better error message
    const tokenToArgumentThing = new Map();
    for (const policyItem of policyItems) {
        if ((_c = policyItem === null || policyItem === void 0 ? void 0 : policyItem.apply) === null || _c === void 0 ? void 0 : _c.isEnsureArgOrder()) {
            const argumentsValueThing = policyItem.getProperty("arguments");
            const items = (_e = (_d = argumentsValueThing === null || argumentsValueThing === void 0 ? void 0 : argumentsValueThing.asLiteralList()) === null || _d === void 0 ? void 0 : _d.getItems()) !== null && _e !== void 0 ? _e : [];
            if (items && items.length >= 2) {
                for (let i = 0; i < items.length - 1; i++) {
                    const curItem = items[i];
                    const nextItem = items[i + 1];
                    if (curItem === undefined || nextItem === undefined || !curItem.isArgument() || !nextItem.isArgument()) {
                        // If the item in the array is not valid, skip this validation
                        return errors;
                    }
                    if (!parentToChild.has(curItem.token)) {
                        parentToChild.set(curItem.token, [nextItem]);
                        tokenToArgumentThing.set(curItem.token, curItem);
                    }
                    else {
                        (_f = parentToChild.get(curItem.token)) === null || _f === void 0 ? void 0 : _f.push(nextItem);
                    }
                }
            }
        }
    }
    // check each node in the graph to make sure there's no circular reference
    // memo is used to record visited node's circular reference info thus we could avoid revisit same node again
    const memo = new Map();
    for (const token of parentToChild.keys()) {
        if (!memo.has(token)) {
            const circularReference = findCircularReference(token, immutable.Set());
            const circularReferenceArgsFlow = circularReference === null || circularReference === void 0 ? void 0 : circularReference.map((token) => {
                var _a;
                const argThing = tokenToArgumentThing.get(token);
                return `'${(_a = argThing === null || argThing === void 0 ? void 0 : argThing.action) === null || _a === void 0 ? void 0 : _a.actionName}.arguments.${argThing === null || argThing === void 0 ? void 0 : argThing.argumentName}'`;
            });
            if (circularReferenceArgsFlow !== undefined && circularReferenceArgsFlow.length > 0) {
                errors.push(ValidationErrorFactory.InvalidEnsureArgOrder({
                    expr: policies,
                    attributes: {
                        firstArgument: circularReferenceArgsFlow[0],
                        argumentsFlow: circularReferenceArgsFlow.join("-->"),
                    },
                }));
            }
        }
    }
    return errors;
    // DFS to find circular reference for a node
    function findCircularReference(start, seen) {
        if (seen.has(start)) {
            memo.set(start, true);
            return generateCircularReferenceFlow(seen, start);
        }
        seen = seen.add(start);
        const children = parentToChild.get(start);
        if (children === undefined || children.length === 0) {
            seen = seen.delete(start);
            memo.set(start, false);
            return undefined;
        }
        for (const child of children) {
            // we don't want to report same circle again, thus no matter this token has circularReference or not,
            // if we have handled the token already, we could skip
            if (!memo.has(child.token)) {
                const circularReference = findCircularReference(child.token, seen);
                if (circularReference !== undefined) {
                    memo.set(start, true);
                    return circularReference;
                }
            }
        }
        seen = seen.delete(start);
        memo.set(start, false);
        return undefined;
    }
}
function generateCircularReferenceFlow(seen, duplicateToken) {
    const circularReferenceFlow = [];
    let findDuplicate = false;
    seen.forEach((token) => {
        if (!findDuplicate) {
            if (token === duplicateToken) {
                findDuplicate = true;
                circularReferenceFlow.push(token);
            }
        }
        else {
            circularReferenceFlow.push(token);
        }
    });
    circularReferenceFlow.push(duplicateToken);
    return circularReferenceFlow;
}
/**
 * validate the locale info in the skill action
 * 1. There must exist deployable dialog for all specified locales
 * 2. There must exist InteractionModel for all specified locales
 * 3. At least one locale need to be specified for a skill
 * 4. The samples in a dialog must have all required locales for the dialog
 * 5. All the nameRef used in a sample must support all the locales the sample use
 * @param skill
 * @param checker
 * @returns
 */
export function validateSkillLocale(skill, checker) {
    var _a;
    const errors = [];
    const dialogs = skill.getArgumentValueThing("dialogs");
    const locales = skill.getArgumentValueThing("locales");
    const skillResponses = skill.getArgumentValueThing("skillLevelResponses");
    const dialogItems = (_a = checker.project.getRootDialogs()) === null || _a === void 0 ? void 0 : _a.map((dialogDecl) => checker.getThing(dialogDecl));
    const localeItems = (locales === null || locales === void 0 ? void 0 : locales.isList()) && locales.isLiteral() ? locales.getItems() : [];
    if (localeItems !== undefined && localeItems.length > 0) {
        // record required locales set by reading the all the localeItems in the locale list
        const requiredLocales = new Set(localeItems
            .map((locale) => {
            var _a;
            if (((_a = locale === null || locale === void 0 ? void 0 : locale.origin) === null || _a === void 0 ? void 0 : _a.kind) === "Name" && locale.origin.name) {
                return locale.origin.name;
            }
            return undefined;
        })
            .filter((s) => s !== undefined));
        errors.push(...validateDialogLocale(requiredLocales, dialogItems));
        errors.push(...validateSkillResponseLocale(requiredLocales, skillResponses, checker));
        errors.push(...validateInteractionModelLocale(requiredLocales, checker));
        errors.push(...validateModuleScopeNameDeclarationsLocale(requiredLocales, checker));
    }
    else {
        errors.push(ValidationErrorFactory.MissingLocale({
            expr: locales === null || locales === void 0 ? void 0 : locales.origin,
        }));
    }
    return errors;
    /**
     * validate all nameDecls' locale info under module scope
     * make sure the slotType used in nameDecl is consistent with locale annotations
     * E.G.
     * assume slotType deOnlySlot is only available in de_DE IM
     * ```
     * @locale(Locale.en_US)
     * a = apla<deOnlySlot>("./apla")
     *
     * This is invalid because deOnlySlot not exist in en_US IM, but the locale annotation include en_US
     * ```
     *
     * ```
     * type myType {
     *  optional String id
     *  optional deOnlySlot german
     * }
     *
     * @locale(Locale.en_US)
     * a = utterances<myType>([
     *   "hello world"
     * ])
     *
     * This is invalid because myType use slotType deOnlySlot which does not exist in en_US IM, but the locale annotation include en_US
     * ```
     */
    function validateModuleScopeNameDeclarationsLocale(defaultLocales, checker) {
        const errors = [];
        const nameDecls = checker.getAllModuleScopeNameDeclarations();
        for (const nameDecl of nameDecls) {
            const annotatedLocales = checker.collectLocaleInfo(nameDecl);
            if (annotatedLocales.length === 0) {
                // if no locale annotation, default to skill action's locale config
                defaultLocales.forEach((locale) => annotatedLocales.push(locale));
            }
            visitEachChild(nameDecl, function visit(node) {
                if (node.kind === "TypeReference") {
                    const thing = checker.getThing(node);
                    errors.push(...validateTypeAgainstRequiredLocales(thing === null || thing === void 0 ? void 0 : thing.type, annotatedLocales, node));
                }
                visitEachChild(node, visit);
            });
        }
        return errors;
    }
    /**
     * check whether the type depends on any slotType which not exist in the IM for required locales
     * E.G.
     * ```
     * type myType {
     *  optional deOnlySlot german
     * }
     *
     * validateTypeAgainstRequiredLocales(myType) will check deOnlySlot exist in all the required locales' IM
     * ```
     *
     * ```
     * type myType2 {
     *  myType name
     * }
     *
     * validateTypeAgainstRequiredLocales(myType2) will check deOnlySlot exist in all the required locales' IM
     * ```
     * @param type The type which we want to check whether it contains invalid slotType
     * @param requiredLocales The Array lof all required locales, a used slotType must exist in all corresponding IMs
     * @param node The origin node where depends on this type, thus we could use it's loc to report error
     * @returns
     */
    function validateTypeAgainstRequiredLocales(type, requiredLocales, node) {
        var _a, _b, _c;
        const errors = [];
        const seen = new Set();
        if (type === null || type === void 0 ? void 0 : type.isSlotType()) {
            errors.push(...validateSlotTypeAgainstRequiredLocales(type.declaration, requiredLocales, node));
        }
        else if (type === null || type === void 0 ? void 0 : type.properties) {
            for (const property of type.properties) {
                if (((_b = (_a = property.type) === null || _a === void 0 ? void 0 : _a.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "SlotType") {
                    errors.push(...validateSlotTypeAgainstRequiredLocales((_c = property.type) === null || _c === void 0 ? void 0 : _c.declaration, requiredLocales, node));
                }
                else {
                    visitEachChildType(property.type, function checkSlotType(type) {
                        if (type.declaration && !seen.has(type.declaration)) {
                            if (!(type.isOptional() || type.isList())) {
                                seen.add(type.declaration);
                            }
                            if (type.declaration.kind === "SlotType") {
                                errors.push(...validateSlotTypeAgainstRequiredLocales(type === null || type === void 0 ? void 0 : type.declaration, requiredLocales, node));
                            }
                            visitEachChildType(type, checkSlotType);
                        }
                    });
                }
            }
        }
        return errors;
    }
    /**
     * check whether the SlotType exist in the IM for required locales
     * @param slotType
     * @param requiredLocales
     * @param node
     * @returns
     */
    function validateSlotTypeAgainstRequiredLocales(slotType, requiredLocales, node) {
        var _a, _b, _c, _d;
        const errors = [];
        const thing = checker.getThing(node);
        const availableLocales = slotType.locales;
        for (const requiredLocale of requiredLocales) {
            if (!availableLocales.includes(requiredLocale) && node.inferred !== true) {
                ((_a = thing === null || thing === void 0 ? void 0 : thing.type.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "SlotType"
                    ? errors.push(ValidationErrorFactory.MissingSlotTypeForLocale({
                        expr: node,
                        attributes: {
                            slotTypeName: (_b = slotType.name) === null || _b === void 0 ? void 0 : _b.name,
                            locale: requiredLocale,
                        },
                    }))
                    : errors.push(ValidationErrorFactory.MissingSlotTypeForLocaleTypeDependency({
                        expr: node,
                        attributes: {
                            typeName: (_c = node.name) === null || _c === void 0 ? void 0 : _c.name,
                            slotTypeName: (_d = slotType.name) === null || _d === void 0 ? void 0 : _d.name,
                            locale: requiredLocale,
                        },
                    }));
            }
        }
        return errors;
    }
    function validateSkillResponseLocale(requiredLocales, skillResponses, checker) {
        const errors = [];
        if (skillResponses === null || skillResponses === void 0 ? void 0 : skillResponses.isLiteral()) {
            const args = skillResponses.apply.getArguments();
            if (args !== undefined) {
                Object.entries(args).map(([name, arg]) => {
                    var _a, _b;
                    if (((_a = arg.value) === null || _a === void 0 ? void 0 : _a.kind) === "NameReference" || ((_b = arg.value) === null || _b === void 0 ? void 0 : _b.kind) === "PropertyReference") {
                        const locales = checker.collectLocaleInfo(arg.value);
                        // if there's no locale info, assume this prompt will be applied to all specified locales
                        // if locale info exist, make sure all required locales exist
                        if (locales.length > 0) {
                            const localesSet = new Set(locales);
                            requiredLocales.forEach((requiredLocale) => {
                                if (requiredLocale && !localesSet.has(requiredLocale)) {
                                    errors.push(ValidationErrorFactory.MissingSkillResponseForLocale({
                                        expr: arg === null || arg === void 0 ? void 0 : arg.value,
                                        attributes: {
                                            skillResponseName: name,
                                            locale: requiredLocale,
                                        },
                                    }));
                                }
                            });
                        }
                    }
                });
            }
        }
        return errors;
    }
    /**
     * validate all of required locales has corresponding IM
     */
    function validateInteractionModelLocale(requiredLocales, checker) {
        var _a;
        const errors = [];
        const interactionModelsPath = checker.project.source.interactionModels;
        // parse the locales from the file names
        const availableLocales = new Set((_a = interactionModelsPath === null || interactionModelsPath === void 0 ? void 0 : interactionModelsPath.map((interactionModel) => path.parse(interactionModel.file).name.replace("-", "_"))) !== null && _a !== void 0 ? _a : []);
        for (const requiredLocale of requiredLocales) {
            if (requiredLocale && !availableLocales.has(requiredLocale)) {
                errors.push(ValidationErrorFactory.MissingInteractionModelForLocale({
                    expr: locales === null || locales === void 0 ? void 0 : locales.origin,
                    attributes: {
                        locale: requiredLocale,
                    },
                }));
            }
        }
        return errors;
    }
    /**
     * all the required locales must have at least one dialog in the skill
     * @param requiredLocales A set which record all required locales (the locales used in skill action)
     * @param dialogItems dialog Thing array
     * @returns
     */
    function validateDialogLocale(requiredLocales, dialogItems) {
        const errors = [];
        const availableLocales = new Set();
        // record available locales set by go through all the deployable dialogs and read from locale annotations
        dialogItems === null || dialogItems === void 0 ? void 0 : dialogItems.forEach((dialog) => {
            if (dialog === null || dialog === void 0 ? void 0 : dialog.isDialog()) {
                const dialogLocales = new Set();
                const locales = recordLocalesFromAnnotations(dialog.origin.annotations, requiredLocales);
                locales.forEach((locale) => dialogLocales.add(locale));
                // go through all the samples and make sure all the dialogLocales exist
                errors.push(...validateSampleLocale(dialogLocales, dialog));
                dialogLocales.forEach((locale) => availableLocales.add(locale));
            }
        });
        // loop each required locale, and check if any deployable dialog use the locale
        requiredLocales.forEach((locale) => {
            if (!availableLocales.has(locale)) {
                errors.push(ValidationErrorFactory.NoDeployableDialogForLocale({
                    expr: dialogs === null || dialogs === void 0 ? void 0 : dialogs.origin,
                    attributes: {
                        locale,
                    },
                }));
            }
        });
        return errors;
    }
    /**
     * for all the locales used for the dialog, there must exist at least one sample in the dialog use that locale
     * @param dialogLocales A set which record all the locales for the dialog
     * @param dialog dialog Thing
     * @returns
     */
    function validateSampleLocale(dialogLocales, dialog) {
        var _a;
        const errors = [];
        const sampleLocales = new Set();
        (_a = dialog.origin.samples) === null || _a === void 0 ? void 0 : _a.forEach((sample) => {
            const locales = recordLocalesFromAnnotations(sample.annotations, dialogLocales);
            errors.push(...validateSampleExprLocale(locales, sample));
            locales.forEach((locale) => sampleLocales.add(locale));
        });
        // loop each required locale, and check if any deployable dialog use the locale
        dialogLocales.forEach((locale) => {
            var _a;
            if (!sampleLocales.has(locale)) {
                errors.push(ValidationErrorFactory.MissingSampleForLocale({
                    expr: dialog === null || dialog === void 0 ? void 0 : dialog.origin,
                    attributes: {
                        dialogName: (_a = dialog.origin.name) === null || _a === void 0 ? void 0 : _a.name,
                        locale,
                    },
                }));
            }
        });
        return errors;
    }
    /**
     * validate all nameReference used in a sample must support all the locales the sample support
     * E.G.
     * ```
     * @locale(Locale.en_US)
     * getWeatherEventUS = utterances<CityAndDate>(["xxx"])
     *
     * @locale(Locale.en_GB)
     * dialog Nothing WeatherInGerman {
     *     @locale(Locale.en_GB)
     *     sample {
     *         // This is invalid as getWeatherEventUS only support en_US without en_GB
     *         result = expect(Invoke, getWeatherEventUS)
     *     }
     * }
     * ```
     * @param sampleLocales The locales sample support
     * @param sample
     * @returns
     */
    function validateSampleExprLocale(sampleLocales, sample) {
        var _a, _b;
        const errors = [];
        (_b = (_a = sample.scope) === null || _a === void 0 ? void 0 : _a.expressions) === null || _b === void 0 ? void 0 : _b.forEach((expr) => {
            errors.push(...validateNodeAgainstRequiredLocales(expr, sampleLocales));
            visitEachChild(expr, function visit(node) {
                errors.push(...validateNodeAgainstRequiredLocales(node, sampleLocales));
                visitEachChild(node, visit);
            });
        });
        return errors;
    }
    /**
     * Validate all the node against all the required locales,
     * make sure the node doesn't depend on slotTypes which can't be used in the required locales
     *
     * @param node
     * @param requiredLocales
     * @returns
     */
    function validateNodeAgainstRequiredLocales(node, requiredLocales) {
        var _a;
        const errors = [];
        if (node.kind === "NameReference" || node.kind === "PropertyReference") {
            const locales = checker.collectLocaleInfo(node);
            // if locales is empty, then the locale will be default to skill actions' locale array
            // which means this name support all the locales we want to deploy, and thus no need to do the validations
            if (locales.length > 0) {
                requiredLocales.forEach((requiredLocale) => {
                    var _a;
                    if (requiredLocale && !locales.includes(requiredLocale)) {
                        errors.push(ValidationErrorFactory.InvalidLocaleInSampleNameOrProperty({
                            expr: node,
                            attributes: {
                                name: (_a = node.name) === null || _a === void 0 ? void 0 : _a.name,
                                locale: requiredLocale,
                            },
                        }));
                    }
                });
            }
        }
        else if (node.kind === "Call") {
            const apply = checker.getApply(node);
            const decl = apply === null || apply === void 0 ? void 0 : apply.decl;
            if ((decl === null || decl === void 0 ? void 0 : decl.kind) === "ActionDeclaration" || (decl === null || decl === void 0 ? void 0 : decl.kind) === "DialogDeclaration") {
                const thing = checker.getThing(decl);
                if (((thing === null || thing === void 0 ? void 0 : thing.isAction()) && (apply === null || apply === void 0 ? void 0 : apply.isUserDefinedApi())) || (thing === null || thing === void 0 ? void 0 : thing.isDialog())) {
                    const locales = thing.getLocales();
                    if (locales) {
                        requiredLocales.forEach((requiredLocale) => {
                            var _a;
                            if (requiredLocale && !locales.includes(requiredLocale)) {
                                const name = (_a = thing.name) === null || _a === void 0 ? void 0 : _a.name;
                                if (thing.isDialog()) {
                                    errors.push(ValidationErrorFactory.InvalidLocaleInSampleDialog({
                                        expr: node,
                                        attributes: {
                                            dialogName: name,
                                            locale: requiredLocale,
                                        },
                                    }));
                                }
                                else {
                                    errors.push(ValidationErrorFactory.InvalidLocaleInSampleAction({
                                        expr: node,
                                        attributes: {
                                            actionName: name,
                                            locale: requiredLocale,
                                        },
                                    }));
                                }
                            }
                        });
                    }
                }
            }
            else if ((decl === null || decl === void 0 ? void 0 : decl.kind) === "Type") {
                const locales = decl.getLocales();
                if (locales) {
                    requiredLocales.forEach((requiredLocale) => {
                        var _a;
                        if (requiredLocale && !locales.includes(requiredLocale)) {
                            errors.push(ValidationErrorFactory.InvalidLocaleInSampleType({
                                expr: node,
                                attributes: {
                                    typeName: (_a = decl.name) === null || _a === void 0 ? void 0 : _a.name,
                                    locale: requiredLocale,
                                },
                            }));
                        }
                    });
                }
            }
        }
        else if (node.kind === "TypeReference") {
            const locales = (_a = checker.getType(node)) === null || _a === void 0 ? void 0 : _a.getLocales();
            if (locales) {
                requiredLocales.forEach((requiredLocale) => {
                    var _a;
                    if (requiredLocale && !locales.includes(requiredLocale)) {
                        errors.push(ValidationErrorFactory.InvalidLocaleInSampleType({
                            expr: node,
                            attributes: {
                                typeName: (_a = node.name) === null || _a === void 0 ? void 0 : _a.name,
                                locale: requiredLocale,
                            },
                        }));
                    }
                });
            }
        }
        return errors;
    }
    /**
     * Update the locale set based on the annotations
     * @param locales locale set which need to be updated based on locale annotation
     * @param annotations annotations array
     * @param defaultLocales the default locale set, which will be used when there's no locale annotation available
     */
    function recordLocalesFromAnnotations(annotations, defaultLocales) {
        let localeAnnotationExist = false;
        const locales = new Set();
        annotations === null || annotations === void 0 ? void 0 : annotations.forEach((ann) => {
            if (ann.kind === "Annotation" && ann.call.kind === "Call") {
                const apply = checker.getApply(ann.call);
                if (apply === null || apply === void 0 ? void 0 : apply.isLocaleAction()) {
                    localeAnnotationExist = true;
                    const annLocales = apply.getArgumentValueThing("locales");
                    if ((annLocales === null || annLocales === void 0 ? void 0 : annLocales.isList()) && annLocales.isLiteral()) {
                        const annLocaleItems = annLocales.getItems();
                        if (annLocaleItems !== undefined && annLocaleItems.length > 0) {
                            annLocaleItems.forEach((locale) => {
                                var _a;
                                if (((_a = locale === null || locale === void 0 ? void 0 : locale.origin) === null || _a === void 0 ? void 0 : _a.kind) === "Name") {
                                    locales.add(locale.origin.name);
                                }
                            });
                        }
                    }
                }
            }
        });
        if (!localeAnnotationExist) {
            // if there no locale annotation
            // fill the locales with default locales
            defaultLocales.forEach((locale) => locales.add(locale));
        }
        return locales;
    }
}
/**
 * Validate the `loadContext` action configured in a TaskContextProjectionInfo.
 *
 * 1. it cannot accept any arguments
 * 2. it cannot have any generic arguments
 * 3. the return type must be `com.amazon.alexa.ask.conversations.TaskContextProjection`.
 * 4. it must be a user-defined action and not a built-in action.
 */
export function validateLoadContextAction(context) {
    var _a, _b, _c, _d, _e;
    const errors = [];
    const expr = ((_a = context === null || context === void 0 ? void 0 : context.loadContextDeclaration) === null || _a === void 0 ? void 0 : _a.loc) ? context === null || context === void 0 ? void 0 : context.loadContextDeclaration : context === null || context === void 0 ? void 0 : context.skill.call;
    if (context === null || context === void 0 ? void 0 : context.loadContext) {
        const actionName = (_b = context.loadContext.name) === null || _b === void 0 ? void 0 : _b.name;
        if ((_c = context.loadContext.arguments) === null || _c === void 0 ? void 0 : _c.length) {
            errors.push(ValidationErrorFactory.InvalidLoadContextActionArguments({
                expr,
                attributes: {
                    actionName,
                },
            }));
        }
        if ((_d = context.loadContext.genericArguments) === null || _d === void 0 ? void 0 : _d.length) {
            errors.push(ValidationErrorFactory.InvalidLoadContextActionGenericArguments({
                expr,
                attributes: {
                    actionName,
                },
            }));
        }
        const returnType = context.loadContext.returnType
            ? context.skill.checker.getType(context.loadContext.returnType)
            : context.skill.checker.void;
        if (returnType && !returnType.isTaskContextProjection()) {
            errors.push(ValidationErrorFactory.InvalidLoadContextActionReturnType({
                expr,
                attributes: {
                    actionName,
                },
            }));
        }
    }
    else if ((_e = context === null || context === void 0 ? void 0 : context.loadContextThing) === null || _e === void 0 ? void 0 : _e.isNothing()) {
        errors.push(ValidationErrorFactory.InvalidLoadContextActionNoActionReference({
            expr,
        }));
    }
    return errors;
}
/**
 * Validate the `saveContext` action configured in a TaskContextProjectionInfo.
 *
 * 1. it cannot have any generic arguments.
 * 2. the return type must be `Nothing` or `Void`.
 * 3. it must have exactly one argument of type `TaskContextProjection`.
 * 4. it must be a user-defined action and not a built-in.
 */
export function validateSaveContextAction(context) {
    var _a, _b, _c, _d, _e;
    const errors = [];
    const expr = ((_a = context === null || context === void 0 ? void 0 : context.saveContextDeclaration) === null || _a === void 0 ? void 0 : _a.loc) ? context === null || context === void 0 ? void 0 : context.saveContextDeclaration : context === null || context === void 0 ? void 0 : context.skill.call;
    if (context === null || context === void 0 ? void 0 : context.saveContext) {
        const actionName = (_b = context.saveContext.name) === null || _b === void 0 ? void 0 : _b.name;
        if ((_c = context.saveContext.genericArguments) === null || _c === void 0 ? void 0 : _c.length) {
            errors.push(ValidationErrorFactory.InvalidSaveContextActionGenericArguments({
                expr,
                attributes: {
                    actionName,
                },
            }));
        }
        const returnType = (_d = context.skill.checker.getType(context.saveContext)) === null || _d === void 0 ? void 0 : _d.getTypeType();
        if (returnType && !((returnType === null || returnType === void 0 ? void 0 : returnType.isVoid()) || (returnType === null || returnType === void 0 ? void 0 : returnType.isNothing()))) {
            errors.push(ValidationErrorFactory.InvalidSaveContextActionReturnType({
                expr,
                attributes: {
                    actionName,
                },
            }));
        }
        if (context.saveContext.arguments === undefined ||
            context.saveContext.arguments.length === 0 ||
            context.saveContext.arguments.length > 1) {
            errors.push(ValidationErrorFactory.InvalidSaveContextActionArgumentType({
                expr,
                attributes: {
                    actionName,
                },
            }));
        }
        else {
            const argType = context.skill.checker.getType(context.saveContext.arguments[0]);
            if (argType && !argType.isTaskContextProjection()) {
                errors.push(ValidationErrorFactory.InvalidSaveContextActionArgumentType({
                    expr,
                    attributes: {
                        actionName,
                    },
                }));
            }
        }
    }
    else if ((_e = context === null || context === void 0 ? void 0 : context.saveContextThing) === null || _e === void 0 ? void 0 : _e.isNothing()) {
        errors.push(ValidationErrorFactory.InvalidSaveContextActionNoActionReference({
            expr,
        }));
    }
    return errors;
}
/**
 * Validates the `trackActions` field configured in `TaskContextProjectionInfo`.
 *
 * 1. the list cannot be empty
 * 2. an action in the list cannot be the `loadContext` or the `saveContext` action.
 * 3. it must be a user-defined API and not a built-in action.
 */
export function validateTrackActions(context) {
    var _a, _b;
    const errors = [];
    if (context) {
        const { checker } = context.skill;
        const expr = context.trackActionsDeclaration ? context.trackActionsDeclaration : context.skill.call;
        if (((_a = context.trackActions) === null || _a === void 0 ? void 0 : _a.length) === 0) {
            errors.push(ValidationErrorFactory.InvalidTrackActionsEmptyList({
                expr,
            }));
        }
        (_b = context.trackActions) === null || _b === void 0 ? void 0 : _b.forEach((action) => {
            var _a, _b, _c, _d, _e, _f;
            const actionFqn = checker.qualifyName(action, (_a = action.name) === null || _a === void 0 ? void 0 : _a.name);
            const actionName = (_b = action.name) === null || _b === void 0 ? void 0 : _b.name;
            if (actionFqn === ((_d = (_c = context.loadContext) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.name)) {
                errors.push(ValidationErrorFactory.InvalidTrackActionsLoadContext({
                    expr,
                    attributes: {
                        actionName,
                    },
                }));
            }
            else if (actionFqn === ((_f = (_e = context.saveContext) === null || _e === void 0 ? void 0 : _e.name) === null || _f === void 0 ? void 0 : _f.name)) {
                errors.push(ValidationErrorFactory.InvalidTrackActionsSaveContext({
                    expr,
                    attributes: {
                        actionName,
                    },
                }));
            }
            const actionType = context.skill.checker.getType(action);
            if (actionType && !actionType.isCustom()) {
                errors.push(ValidationErrorFactory.InvalidTrackActionsBuiltIn({
                    expr,
                    attributes: {
                        actionName,
                    },
                }));
            }
        });
    }
    return errors;
}
/**
 * Validates the context of a call to `com.amazon.alexa.ask.conversations.skill`.
 *
 * 1. the result of the call must be assigned to a name, e.g. `name = skill(..)`.
 * 2. the call can only exist at the module scope, it cannot be within a dialog sample.
 */
export function validateSkillCallContext(skill) {
    if (skill.isSkillAction()) {
        if (skill.call.context.kind !== "NameDeclaration") {
            return [
                ValidationErrorFactory.InvalidSkillCallContextNameDeclaration({
                    expr: skill.call,
                }),
            ];
        }
        if (skill.call.context.context.kind !== "Module") {
            return [
                ValidationErrorFactory.InvalidSkillCallContextModuleScope({
                    expr: skill.call,
                }),
            ];
        }
    }
    return [];
}
//# sourceMappingURL=data:application/json;base64,