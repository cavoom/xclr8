import { v4 as uuid } from "uuid";
import axios from "axios";
import { ProfileNameGetter } from "../acc/ProfileNameGetter";
const METRICS = {
    ENDPOINT: "https://client-telemetry.amazonalexa.com",
    STOREABLE_KEYS: ["skill_id", "locale", "template_url", "stage"],
};
export const MetricActionResult = {
    SUCCESS: "Success",
    FAILURE: "Failure",
};
/**
 * Metric action includes the name and results of CLI command.
 */
export class MetricAction {
    /**
     * @constructor
     * @param name - The action name.
     * @param type - The action type.
     */
    constructor(name, type) {
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "startTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "endTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "failureMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_ended", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "optionData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.endTime = null;
        this.failureMessage = "";
        this.name = name;
        this.result = null;
        this.startTime = new Date();
        this.type = type;
        this.id = uuid();
        this.options = [];
        this.optionData = {};
        this._ended = false;
    }
    /**
     * Add option to list, store value only if in {@link METRICS.STOREABLE_KEYS}
     * @param optionName name of the option
     * @param optionValue value of the option
     */
    setOption(optionName, optionValue) {
        const schemaOption = optionName.split("-").join("_");
        this.options.push(schemaOption);
        if (METRICS.STOREABLE_KEYS.includes(schemaOption)) {
            this.optionData[schemaOption] = optionValue;
        }
    }
    /**
     * Closes action
     * @param error Error object or string indicating error.
     */
    end(error = null) {
        if (this._ended)
            return;
        // if Error object extract error message,
        // otherwise error message string or null was passed as a parameter
        const errorMessage = error && error instanceof Error ? error.message : error;
        this.result = errorMessage ? MetricActionResult.FAILURE : MetricActionResult.SUCCESS;
        this.failureMessage = errorMessage || "";
        this.endTime = new Date();
        this._ended = true;
    }
    /**
     * Implementation of custom toJSON method to modify serialization with JSON.stringify
     */
    toJSON() {
        return {
            end_time: this.endTime,
            failure_message: this.failureMessage,
            name: this.name,
            result: this.result,
            start_time: this.startTime,
            type: this.type,
            id: this.id,
            options: this.options,
            ...this.optionData,
        };
    }
}
/**
 * Client that communicates with telemetry endpoint.
 */
export class MetricClient {
    /**
     * @constructor
     */
    constructor(currentNpmVersion, askCliConfig) {
        Object.defineProperty(this, "httpClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "serverUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "postRetries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "askCliConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.httpClient = axios.create({
            timeout: 3000,
            headers: { "Content-Type": "text/plain" },
        });
        this.serverUrl = METRICS.ENDPOINT;
        this.postRetries = 3;
        this.askCliConfig = askCliConfig;
        this.enabled = this.isEnabled();
        // initialize data
        this.data = {
            version: currentNpmVersion,
            machineId: this.getMachineId(),
            timeStarted: new Date(),
            newUser: false,
            timeUploaded: null,
            clientId: "acc",
            actions: [],
        };
    }
    /**
     * Starts action
     * @param name - The action name
     * @param type - The action type
     * @return the metric action that was started, {@link MetricAction}
     */
    startAction(name, type) {
        const action = new MetricAction(name, type);
        this.data.actions.push(action);
        return action;
    }
    /**
     * Set option for the most recently started action
     * @param optionName name of the option
     * @param optionValue value of the option
     */
    setOption(optionName, optionValue) {
        const actions = this.data.actions;
        if (actions.length) {
            actions[actions.length - 1].setOption(optionName, optionValue);
        }
    }
    /**
     * Returns current data store in the metric client
     * @return the metric data, {@link MetricClientData}
     */
    getData() {
        return this.data;
    }
    /**
     * Sends data to the metric server
     * @param error - Error object or string indicating error.
     * @returns whether data was sent successfully
     */
    async sendData(error = null) {
        if (!this.enabled) {
            this.data.actions = [];
            return { success: true };
        }
        this.data.actions.forEach((action) => action.end(error));
        try {
            await this.upload();
            this.data.actions = [];
            return { success: true };
        }
        catch (_a) {
            return { success: false };
        }
    }
    /**
     * Implementation of custom toJSON method to modify serialization with JSON.stringify
     */
    toJSON() {
        return {
            version: this.data.version,
            machine_id: this.data.machineId,
            time_started: this.data.timeStarted,
            new_user: this.data.newUser,
            time_uploaded: this.data.timeUploaded,
            client_id: this.data.clientId,
            actions: this.data.actions,
        };
    }
    async upload() {
        this.data.timeUploaded = new Date();
        const payload = JSON.stringify({ payload: this });
        const postPromise = () => this.httpClient.post(this.serverUrl, payload);
        await this.retry(this.postRetries, postPromise);
    }
    async retry(retries, func) {
        try {
            await func();
        }
        catch (error) {
            if (retries == 1)
                throw error;
            await this.retry(retries - 1, func);
        }
    }
    isEnabled() {
        if (ProfileNameGetter.isEnvProfile())
            return true;
        if (process.env.ASK_SHARE_USAGE === "false")
            return false;
        if (!this.askCliConfig.hasConfig())
            return false;
        return this.askCliConfig.getShareUsage() && !!this.getMachineId();
    }
    /**
     * gets the machine id from ~/.ask/cli_config.
     * Special cases:
     *    1) If ~/.ask/cli_config was not found or could not be parsed this.enabled will be false and
     * no machine id is retrieved since no metrics will be sent
     *    2) If ~/.ask/cli_config was found, but has no machineId we will:
     *         a) write a new uuid to ~/.ask/cli_config if possible
     *         b) diaable metrics if we cannot write to ~/.ask/cli_config
     * @returns a machine id from ~/.ask/cli_config
     */
    getMachineId() {
        if (!this.askCliConfig.hasConfig())
            return "";
        if (ProfileNameGetter.isEnvProfile())
            return "all_environmental";
        let machineId = this.askCliConfig.getMachineId();
        if (machineId) {
            return machineId;
        }
        return this.askCliConfig.createMachineId();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tZXRyaWNzL21ldHJpYy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxLQUFzQixNQUFNLE9BQU8sQ0FBQztBQUczQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRCxNQUFNLE9BQU8sR0FBRztJQUNkLFFBQVEsRUFBRSwwQ0FBMEM7SUFDcEQsY0FBYyxFQUFFLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDO0NBQ2hFLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBK0I7SUFDNUQsT0FBTyxFQUFFLFNBQVM7SUFDbEIsT0FBTyxFQUFFLFNBQVM7Q0FDbkIsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFZdkI7Ozs7T0FJRztJQUNILFlBQVksSUFBWSxFQUFFLElBQVk7UUFoQnRDOzs7OztXQUFhO1FBQ2I7Ozs7O1dBQWE7UUFDYjs7Ozs7V0FBZ0I7UUFDaEI7Ozs7O1dBQXFCO1FBQ3JCOzs7OztXQUFzQjtRQUN0Qjs7Ozs7V0FBdUI7UUFDdkI7Ozs7O1dBQVc7UUFDWDs7Ozs7V0FBZ0I7UUFDaEI7Ozs7O1dBQWtCO1FBQ2xCOzs7OztXQUFvQztRQVFsQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxJ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