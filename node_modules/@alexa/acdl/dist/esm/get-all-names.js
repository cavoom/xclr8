import * as ask from "./ast";
/**
 *
 * Gets the namespaces from the getAllNames<T>(Args<String> namespaces) action and returns
 * all nodes in the matching namespaces that are a subtype of type T.
 *
 * In the following example, the name declaration nodes for john and jane are returned:
 *
 * ```
 * namespace test.namespace
 *
 * john = Person {
 *   firstName = "John",
 *   lastName = "Doe",
 * }
 *
 * jane = Person {
 *   firstName = "Jane",
 *   lastName = "Doe",
 * }
 *
 * people = getAllNames<Person>("test.namespace")
 * ```
 * Calling this function with the getAllNames apply will return
 * the name declaration nodes for john and jane.
 *
 * ```
 * const nodes = getAllNames(getAllNamesApply, typeChecker) -> [john, jane]
 * ```
 */
export function getAllNames(apply, checker) {
    var _a;
    if (apply.isGetAllNamesAction()) {
        const global = checker.global;
        const genericType = (_a = apply.getGenericArguments()) === null || _a === void 0 ? void 0 : _a[0];
        const returnNodes = new Set();
        const namespaces = getNamespacesFromGetAllNames(apply, checker);
        const foundNamespaces = namespaces.filter((namespace) => checker.global.namespaces.has(namespace));
        for (const namespace of foundNamespaces) {
            const scope = global.namespaces.get(namespace);
            if (scope) {
                for (const node of scope.values()) {
                    const nameDeclNode = Array.isArray(node) ? node === null || node === void 0 ? void 0 : node[0] : node;
                    if ((nameDeclNode && ask.isNameDeclaration(nameDeclNode)) || ask.isDialogDeclaration(nameDeclNode)) {
                        // Check if the declaration is of type of T from getAllNames<T>
                        const type = checker.getType(nameDeclNode);
                        if (type === null || type === void 0 ? void 0 : type.extends(genericType)) {
                            returnNodes.add(nameDeclNode);
                        }
                    }
                }
            }
        }
        return Array.from(returnNodes);
    }
    return [];
}
/**
 * Returns the unique namespaces provided to the getAllNames action.
 */
export function getNamespacesFromGetAllNames(apply, checker) {
    var _a, _b, _c;
    if (!apply.isGetAllNamesAction()) {
        return [];
    }
    const items = (_c = (_b = (_a = apply.getArgumentValueThing("namespaces")) === null || _a === void 0 ? void 0 : _a.asList()) === null || _b === void 0 ? void 0 : _b.getListItems()) !== null && _c !== void 0 ? _c : [];
    const namespaces = new Set();
    for (const item of items) {
        const node = item === null || item === void 0 ? void 0 : item.item;
        const type = checker.getType(node);
        if (!ask.isCall(node) || !(type === null || type === void 0 ? void 0 : type.isString()) || typeof node.arguments !== "string") {
            continue;
        }
        namespaces.add(node.arguments);
    }
    return Array.from(namespaces);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWFsbC1uYW1lcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXQtYWxsLW5hbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDO0FBSzdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNEJHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxLQUFZLEVBQUUsT0FBb0I7O0lBQzVELElBQUksS0FBSyxDQUFDLG1CQUFtQixFQUFFLEVBQUU7UUFDL0IsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUM5QixNQUFNLFdBQVcsR0FBRyxNQUFBLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSwwQ0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBK0MsQ0FBQztRQUUzRSxNQUFNLFVBQVUsR0FBRyw0QkFBNEIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDaEUsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFbkcsS0FBSyxNQUFNLFNBQVMsSUFBSSxlQUFlLEVBQUU7WUFDdkMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0MsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ2pDLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUM1RCxJQUFJLENBQUMsWUFBWSxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBRTt3QkFDbEcsK0RBQStEO3dCQUMvRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUMzQyxJQUFJLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7NEJBQzlCLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7eUJBQy9CO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNoQztJQUVELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLDRCQUE0QixDQUFDLEtBQVksRUFBRSxPQUFvQjs7SUFDN0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO1FBQ2hDLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxNQUFNLEtBQUssR0FBRyxNQUFBLE1BQUEsTUFBQSxLQUFLLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLDBDQUFFLE1BQU0sRUFBRSwwQ0FBRSxZQUFZLEVBQUUsbUNBQUksRUFBRSxDQUFDO0lBRXhGLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7SUFFckMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUksQ0FBQztRQUN4QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsUUFBUSxFQUFFLENBQUEsSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2hGLFNBQVM7U0FDVjtRQUVELFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2hDO0lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2hDLENBQUMifQ==