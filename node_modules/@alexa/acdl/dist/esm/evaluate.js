import * as ask from "./ast";
import { AlexaConversations } from "./ast";
import { typeError } from "./error";
import { getExpressionIfLocField, ValidationErrorFactory } from "./error-factory";
import { getName } from "./util";
/**
 * Validates that the Dialog is deployable. A deployable dialog is one that accepts no arguments and returns `Nothing` or `Void`.
 */
export function evaluateDialogFlow(flow, state) {
    // TODO: validate that it does not accept arguments
    var _a, _b;
    return [
        evaluateFlow(flow, state).map((state) => state.errors),
        (_b = (_a = flow.expression.samples) === null || _a === void 0 ? void 0 : _a.map((sample) => validateSampleStartWithInvoke(flow.step(sample), state))) !== null && _b !== void 0 ? _b : [],
    ].flat(2);
}
/**
 * Validates that the data flow is correct.
 *
 * @param node
 * @param flow
 * @returns
 */
export function evaluateFlow(flow, state) {
    return flow.interpret(function evaluate(expr, nextState = state) {
        if (expr.isEnd()) {
            return evaluateEnd(expr, nextState.pushExpr(expr));
        }
        nextState = evaluateExpression(expr, nextState).pushExpr(expr);
        if (nextState.isCircular) {
            // detected a circular reference, stop execution.
            return nextState;
        }
        return (next) => evaluate(next, nextState);
    }, undefined);
}
export function evaluateExpression(expr, state) {
    if (!expr.isStart() && !expr.canFollowDelegation()) {
        state = state.withError(...validatePriorDelegation(expr));
    }
    if (expr.isExpect()) {
        return evaluateExpect(expr, state);
    }
    if (expr.isResponse()) {
        return evaluateResponse(expr, state);
    }
    if (expr.isConfirmAction()) {
        return evaluateConfirmAction(expr, state);
    }
    if (expr.isConfirmArgs()) {
        return evaluateConfirmArgs(expr, state);
    }
    if (expr.isEnsure()) {
        return evaluateEnsure(expr, state);
    }
    if (expr.isInvokeApi()) {
        return evaluateInvokeApi(expr, state);
    }
    if (expr.isConditionalBranch()) {
        return evaluateConditionalBranch(expr, state);
    }
    if (expr.isDelegateRequest()) {
        return evaluateDelegateRequest(expr, state);
    }
    if (expr.isDelegateToIntent()) {
        return evaluateDelegateToIntent(expr, state);
    }
    if (expr.isDialogExpansion()) {
        return evaluateDialogExpansion(expr, state);
    }
    return state;
}
/**
 * Called at the end of a single dialog flow. During evaluation, we often delay validation until
 * the end as an optimization. For example, checking if an argument is requested - if the ensure()
 * block is called later on in the dialog flow, we don't want to be searching forward all the time
 * because searching forward is slow. Instead, we track that in {@link EvaluationState} and then
 * perform the validation here. This reduces the time complexity significantly.
 */
export function evaluateEnd(endExpr, state) {
    return state.withError(...validateLastExpressionEndsTurn(), ...evaluatePendingRequestPromptValidations());
    function isFlowExpressionTerminal(flow) {
        var _a;
        if (((_a = flow === null || flow === void 0 ? void 0 : flow.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call") {
            const apply = flow.checker.getApply(flow === null || flow === void 0 ? void 0 : flow.expression);
            return (apply === null || apply === void 0 ? void 0 : apply.isResponse()) || (apply === null || apply === void 0 ? void 0 : apply.isDelegateToIntent()) || (apply === null || apply === void 0 ? void 0 : apply.isDelegateRequest());
        }
        return false;
    }
    // Validates the last expression in a sample is a response call or a return value from a reusable
    // dialog, or a delegate request.
    function validateLastExpressionEndsTurn() {
        var _a, _b;
        // The last flow containing an expression in the dialog sample
        const lastFlow = endExpr.flow.prev;
        if (isFlowExpressionTerminal(lastFlow)) {
            return [];
        }
        const isLastExprFromDialogCall = isFlowFromDialogCall(lastFlow);
        // Handle when a sample ends with a name reference and not a response call, in which case
        // we need to ensure the name reference is from a reusable dialog call that ends with response call/return value.
        if (((_a = lastFlow === null || lastFlow === void 0 ? void 0 : lastFlow.expression) === null || _a === void 0 ? void 0 : _a.kind) === "NameReference" && isLastExprFromDialogCall) {
            // The flow containing the second to last expression in the dialog sample
            let prevFlow = lastFlow === null || lastFlow === void 0 ? void 0 : lastFlow.prev;
            // Go up the flow stack until we hit the previous expression
            while (((_b = prevFlow === null || prevFlow === void 0 ? void 0 : prevFlow.expression) === null || _b === void 0 ? void 0 : _b.kind) === "PropertyReference") {
                prevFlow = prevFlow === null || prevFlow === void 0 ? void 0 : prevFlow.prev;
            }
            if (isFlowExpressionTerminal(prevFlow)) {
                return [];
            }
        }
        const errorFactory = isLastExprFromDialogCall
            ? ValidationErrorFactory.InvalidLastExpressionInSampleFromDialogCall
            : ValidationErrorFactory.InvalidLastExpressionInSample;
        return [errorFactory({ expr: lastFlow === null || lastFlow === void 0 ? void 0 : lastFlow.expression })];
    }
    /**
     * Under the right conditions produces one error message for each string in paths
     * @param expr API with error
     * @param argument argument that gave origin to the paths
     * @param paths paths where an error should be produced
     * @returns the errors for the paths
     */
    function getPendingRequestValidationError(expr, argument, paths) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        if (expr.isInvokeApi()) {
            if (argument.argumentName !== undefined) {
                const argValue = (_a = expr.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValue(argument);
                return paths.map((path) => {
                    var _a;
                    return ValidationErrorFactory.MissingRequestPromptForRequiredApiArgument({
                        expr: argValue,
                        attributes: { argumentName: path, actionName: (_a = expr.action) === null || _a === void 0 ? void 0 : _a.actionName },
                    });
                });
            }
            else {
                return [];
            }
        }
        else if (expr.isEnsure() || expr.isConfirmArgs()) {
            const errors = [];
            const requestArgs = expr.isEnsure() ? expr.requestArgs : expr.confirmArgs;
            if (requestArgs !== undefined) {
                const items = requestArgs.getItems();
                if (items !== undefined) {
                    for (let requestArgumentsIndex = 0; requestArgumentsIndex < items.length; requestArgumentsIndex++) {
                        const requestArg = items[requestArgumentsIndex];
                        const args = (_b = requestArg === null || requestArg === void 0 ? void 0 : requestArg.apply) === null || _b === void 0 ? void 0 : _b.getArgumentValueThing("arguments");
                        const argsNode = (_c = requestArg === null || requestArg === void 0 ? void 0 : requestArg.apply) === null || _c === void 0 ? void 0 : _c.getArgumentValue("arguments");
                        if ((args === null || args === void 0 ? void 0 : args.isLiteral()) && args.isList()) {
                            const argsList = args.getItems();
                            if (argsList !== undefined) {
                                for (let argIndex = 0; argIndex < argsList.length; argIndex++) {
                                    const thisArg = argsList[argIndex];
                                    if (thisArg === argument) {
                                        const requestArgsNode = (_d = expr.apply) === null || _d === void 0 ? void 0 : _d.getArgumentValue(expr.isEnsure() ? "requestArgs" : "confirmArgs");
                                        let loc = expr.loc; // default to the entire `ensure` block
                                        loc = (_e = requestArgsNode === null || requestArgsNode === void 0 ? void 0 : requestArgsNode.loc) !== null && _e !== void 0 ? _e : loc;
                                        if ((requestArgsNode === null || requestArgsNode === void 0 ? void 0 : requestArgsNode.kind) === "Call" && ask.isListLiteral(requestArgsNode.arguments)) {
                                            // in-lined list, `ensure(RequestArguments { .. }, RequestArguments { .. }, ..)`
                                            const requestArgNode = requestArgsNode.arguments.items[requestArgumentsIndex].item;
                                            loc = (_f = requestArgNode === null || requestArgNode === void 0 ? void 0 : requestArgNode.loc) !== null && _f !== void 0 ? _f : loc;
                                            if ((requestArgNode === null || requestArgNode === void 0 ? void 0 : requestArgNode.kind) === "Call") {
                                                // this is the RequestArguments { .. } node, it is still inline so let's try and make the error even more granular
                                                loc = (_g = argsNode === null || argsNode === void 0 ? void 0 : argsNode.loc) !== null && _g !== void 0 ? _g : loc;
                                                if ((argsNode === null || argsNode === void 0 ? void 0 : argsNode.kind) === "Call" && ask.isListLiteral(argsNode.arguments)) {
                                                    loc = (_h = argsNode.arguments.items[argIndex].item) === null || _h === void 0 ? void 0 : _h.loc;
                                                }
                                            }
                                        }
                                        errors.push(...paths.map((path) => {
                                            const errorArgument = {
                                                expr: { loc: loc !== null && loc !== void 0 ? loc : expr.loc, uri: expr.uri },
                                                attributes: {
                                                    argumentName: path,
                                                },
                                            };
                                            return expr.isEnsure()
                                                ? ValidationErrorFactory.MissingRequestPromptForMultipleArguments(errorArgument)
                                                : ValidationErrorFactory.MissingRequestPromptForConfirmArgs(errorArgument);
                                        }));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return errors;
        }
        else {
            // do our best to resolve the location of the argument missing the request prompt
            let loc = (_k = (_j = expr.actNode) === null || _j === void 0 ? void 0 : _j.loc) !== null && _k !== void 0 ? _k : expr.loc;
            // options:
            // response(Request { arguments = [ Foo.arguments.arg ] })
            // response(Request { arguments = nameRef })
            // response(nameRef)
            if (((_l = expr.actNode) === null || _l === void 0 ? void 0 : _l.kind) === "Call") {
                const argsNode = (_o = (_m = expr.act) === null || _m === void 0 ? void 0 : _m.apply) === null || _o === void 0 ? void 0 : _o.getArgumentValue("arguments");
                const args = (_s = (_r = (_q = (_p = expr.act) === null || _p === void 0 ? void 0 : _p.apply) === null || _q === void 0 ? void 0 : _q.getArgumentValueThing("arguments")) === null || _r === void 0 ? void 0 : _r.asLiteralList()) === null || _s === void 0 ? void 0 : _s.getItems();
                if (args !== undefined && (argsNode === null || argsNode === void 0 ? void 0 : argsNode.kind) === "Call" && ask.isListLiteral(argsNode.arguments)) {
                    for (const [i, arg] of args.entries()) {
                        if ((arg === null || arg === void 0 ? void 0 : arg.isArgument()) && arg === argument) {
                            loc = (_u = (_t = argsNode.arguments) === null || _t === void 0 ? void 0 : _t.items) === null || _u === void 0 ? void 0 : _u[i].loc;
                            break;
                        }
                    }
                }
            }
            let errorExpr = getExpressionIfLocField(expr.actNode, expr);
            if ((_w = (_v = expr.act) === null || _v === void 0 ? void 0 : _v.apply) === null || _w === void 0 ? void 0 : _w.isConfirmArgsAct()) {
                return paths.map((path) => ValidationErrorFactory.MissingRequestPromptForConfirmArgs({
                    expr: errorExpr,
                    attributes: {
                        argumentName: path,
                    },
                }));
            }
            else if (((_y = (_x = expr.act) === null || _x === void 0 ? void 0 : _x.apply) === null || _y === void 0 ? void 0 : _y.isRequestArguments()) || ((_0 = (_z = expr.act) === null || _z === void 0 ? void 0 : _z.apply) === null || _0 === void 0 ? void 0 : _0.isRequestAct())) {
                return paths.map((path) => ValidationErrorFactory.MissingRequestPromptForMultipleArguments({
                    expr: errorExpr,
                    attributes: {
                        argumentName: path,
                    },
                }));
            }
            return [];
        }
    }
    function evaluatePendingRequestPromptValidations() {
        const returnValue = [];
        const pendingRequests = Array.from(state.pendingRequestPromptValidation.entries());
        for (const [api, argumentsMap] of pendingRequests) {
            const sortedArgumentsAndPaths = Array.from(argumentsMap.entries())
                .map((argumentAndSet) => ({ argument: argumentAndSet[0], paths: Array.from(argumentAndSet[1]) }))
                .sort((a, b) => a.argument.argumentName.localeCompare(b.argument.argumentName));
            for (const argumentAndPaths of sortedArgumentsAndPaths) {
                returnValue.push(...getPendingRequestValidationError(api, argumentAndPaths.argument, argumentAndPaths.paths));
            }
        }
        return returnValue;
    }
}
export function evaluateDialogExpansion(expr, state) {
    var _a, _b, _c;
    if (state.hasExpandedDialog(expr)) {
        const apply = expr.apply;
        for (const node of expr.flow.stack) {
            if (node.kind === "Call") {
                const prevApply = expr.flow.checker.getApply(node);
                if (apply.getName() === (prevApply === null || prevApply === void 0 ? void 0 : prevApply.getName())) {
                    const validationErrorExpr = getExpressionIfLocField((_a = apply.call) === null || _a === void 0 ? void 0 : _a.name, apply.call);
                    return state.withCircular(true).withError(apply.decl.kind === "DialogDeclaration"
                        ? ValidationErrorFactory.CircularReferenceDialog({
                            expr: validationErrorExpr,
                            attributes: {
                                dialogName: (_b = apply.decl.name) === null || _b === void 0 ? void 0 : _b.name,
                            },
                        })
                        : ValidationErrorFactory.CircularReferenceName({
                            expr: validationErrorExpr,
                            attributes: {
                                name: (_c = apply.decl.name) === null || _c === void 0 ? void 0 : _c.name,
                            },
                        }), ...collectCallStackErrors(expr.flow));
                }
            }
        }
    }
    return state;
}
function collectCallStackErrors(flow) {
    var _a, _b;
    if ((flow === null || flow === void 0 ? void 0 : flow.expression) === undefined) {
        return [];
    }
    if (flow.expression.kind === "Call") {
        const apply = flow.checker.getApply(flow.expression);
        if (apply === null || apply === void 0 ? void 0 : apply.isDialog()) {
            return [
                ValidationErrorFactory.CircularReferenceDialog({
                    expr: getExpressionIfLocField((_a = apply.call) === null || _a === void 0 ? void 0 : _a.name, apply.call),
                    attributes: {
                        dialogName: (_b = apply.decl.name) === null || _b === void 0 ? void 0 : _b.name,
                    },
                }),
                ...flow.visitPrevious(collectCallStackErrors),
            ];
        }
    }
    return flow.visitPrevious(collectCallStackErrors);
}
/**
 * Validate the prior lines to expect.
 *
 * 1. `Invoke` must be first event or follow response with `Request`, `Notify`, `Offer`, `ReqMore`, or `ReqAlt` Acts. TODO: we must verify if it is valid to follow `Request` - our tests used this case but it is documented as invalid.
 * 2. `Affirm` or `Deny` must follow response with `ConfirmArgs`, `ConfirmAction`, `Offer` Acts or `confirmAction`.
 * 3. `Inform` must follow response with `Request` or `ReqAlt` Acts.
 *
 * @param expect expect being evaluated
 * @param expectActType expect's actType
 * @param expectActValue expect's act argument value from expect.apply?.getArgumentValue("act")
 * @param stateExpressionStack expression stack from the state
 * @returns errors from lines prior tp expect
 */
function validateEventPriorToExpect(expect, expectActType, expectActValue, stateExpressionStack) {
    var _a, _b;
    if (!expectActType) {
        return [];
    }
    for (const expr of stateExpressionStack) {
        if (expr.isInvokeApi() || expr.isExpect()) {
            const errorArguments = {
                expr: expectActValue,
                attributes: {
                    requestAct: expectActType.toString(expectActValue),
                },
            };
            if (expectActType.isInvoke()) {
                // TODO: verify if Invoke can follow 'Request' act.
                return [ValidationErrorFactory.InvalidEventInvoke(errorArguments)];
            }
            if (expectActType.isAffirm() || expectActType.isDeny()) {
                return [ValidationErrorFactory.InvalidEventAffirmOrDeny(errorArguments)];
            }
            if (expectActType.isInform()) {
                return [ValidationErrorFactory.InvalidEventInform(errorArguments)];
            }
            // catch all, we should never reach here since we first validate that expectActType is Invoke, Inform, Affirm or Deny
            return [ValidationErrorFactory.InvalidEvent(errorArguments)];
        }
        if (expr.isEnsure() || expr.isDialogExpansion() || expr.isConfirmArgs() || expr.isBlock() || expr.isConditionalBranch()) {
            // ignore these calls since they do not affect the user/alexa lines.
            // TODO: why ignore ConfirmArgs?
            // return [];
        }
        else if (expr.isConfirmAction()) {
            if (expectActType.isAffirm() || expectActType.isDeny()) {
                return [];
            }
            return [
                ValidationErrorFactory.InvalidEventFollowingConfirmAction({
                    expr: expectActValue,
                    attributes: {
                        requestAct: expectActType.toString(expect.node),
                    },
                }),
            ];
        }
        else if (expr.isDelegateToIntent() || expr.isDelegateRequest()) {
            return [];
        }
        else if (expr.isResponse()) {
            const nextRequestActType = (_a = expr.nextAct) === null || _a === void 0 ? void 0 : _a.type;
            let requestActType = (_b = expr.act) === null || _b === void 0 ? void 0 : _b.type;
            if (nextRequestActType && !(nextRequestActType.isNothing() || nextRequestActType.isVoid())) {
                requestActType = nextRequestActType;
            }
            if (requestActType === undefined) {
                // could not resolve the request act, so ignore these validations
                return [];
            }
            if (requestActType.isOffer()) {
                // all dialog acts can follow Offer
                return [];
            }
            if (requestActType.isConfirmArgs() || requestActType.isConfirmAction()) {
                if (expectActType.isAffirm() || expectActType.isDeny()) {
                    return [];
                }
                return [invalidEventError("Affirm", "Deny")];
            }
            if (requestActType.isNotify() || requestActType.isReqMore() || requestActType.isBye()) {
                if (expectActType.isInvoke()) {
                    return [];
                }
                return [invalidEventError("Invoke")];
            }
            if (requestActType.isReqAlt()) {
                if (expectActType.isInvoke() || expectActType.isInform()) {
                    return [];
                }
                return [invalidEventError("Invoke", "Inform")];
            }
            if (requestActType.isRequest()) {
                if (expectActType.isInform()) {
                    return [];
                }
                return [invalidEventError("Inform")];
            }
            function invalidEventError(...expected) {
                const suggestions = expected.length === 1
                    ? `'${expected[0]}'`
                    : `${expected
                        .slice(0, expected.length - 1)
                        .map((e) => `'${e}'`)
                        .join(", ")} or '${expected[expected.length - 1]}'`;
                return ValidationErrorFactory.InvalidEventResponse({
                    expr: getExpressionIfLocField(expectActValue, expect),
                    attributes: {
                        responseAct: expectActType === null || expectActType === void 0 ? void 0 : expectActType.toString(expect.node),
                        requestAct: requestActType === null || requestActType === void 0 ? void 0 : requestActType.toString(expect.node),
                        suggestions,
                    },
                });
            }
        }
    }
    if (expectActType.isInvoke()) {
        return [];
    }
    return [
        ValidationErrorFactory.InvalidFirstEvent({
            expr: expectActValue,
            attributes: {
                dialogAct: expectActType.toString(expect.node),
            },
        }),
    ];
}
/**
 * Called to perform Inform validations if the expect's act is inform
 * @param expect expect being evaluated
 * @returns errors for expect with Inform act
 */
function validateExpectInform(expect) {
    var _a, _b, _c;
    const errors = [];
    // Each sample sentence in "inform" event should contain at least one slot.
    const eventValue = (_a = expect.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValue("event");
    if (!expect.checker.isNameReference(eventValue)) {
        // this case should already be caught by other validation
        return errors;
    }
    const nameDecl = expect.checker.resolveNameReference(eventValue);
    if (ask.isCall(nameDecl)) {
        const apply = expect.checker.getApply(nameDecl);
        if ((apply === null || apply === void 0 ? void 0 : apply.getName()) === AlexaConversations.utterances) {
            let items = [];
            const value = apply.getArgumentValue("samples");
            if (expect.checker.isNameReference(value)) {
                const found = expect.checker.resolveNameReference(value);
                const foundType = expect.checker.getType(value);
                if (ask.isCall(found) && ask.isListLiteral(found.arguments) && (foundType === null || foundType === void 0 ? void 0 : foundType.isList())) {
                    items = found.arguments.items;
                }
            }
            else if ((value === null || value === void 0 ? void 0 : value.kind) === "Call" && ask.isListLiteral(value.arguments)) {
                items = value.arguments.items;
            }
            for (const item of items) {
                if (item.item === undefined || item.item.kind !== "Call") {
                    // do nothing, because this case should already be caught by other validation
                }
                else if (typeof item.item.arguments === "string" ||
                    (ask.isUtterance(item.item.arguments) && ((_b = item.item.arguments.names) === null || _b === void 0 ? void 0 : _b.length) === 0)) {
                    errors.push(ValidationErrorFactory.InformUtteranceSampleMissingSlot({
                        expr: getExpressionIfLocField((_c = expect.apply) === null || _c === void 0 ? void 0 : _c.getArgumentValue("event"), expect),
                    }));
                    // only report this error once
                    break;
                }
            }
        }
    }
    return errors;
}
export const evaluateExpect = (expect, state) => {
    var _a, _b, _c, _d, _e, _f;
    // for expect action, the RequestAct could only be Invoke, Inform, Affirm or Deny
    const value = (_a = expect.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValue("act");
    const actType = expect.getActType();
    if (actType === undefined) {
        // don't do anything when type is undefined as it should be caught by another validator
        return state;
    }
    if (!expect.isInvoke() && !expect.isInform() && !expect.isAffirm() && !expect.isDeny()) {
        return state.withError(ValidationErrorFactory.InvalidRequestAct({
            expr: value,
            attributes: { actName: actType === null || actType === void 0 ? void 0 : actType.toString(value) },
        }));
    }
    if ((actType.isAffirm() || actType.isDeny()) && ((_c = (_b = expect.event) === null || _b === void 0 ? void 0 : _b.apply) === null || _c === void 0 ? void 0 : _c.isUtterances())) {
        const utteranceType = (_f = (_e = (_d = expect.event) === null || _d === void 0 ? void 0 : _d.apply) === null || _e === void 0 ? void 0 : _e.getReturnType()) === null || _f === void 0 ? void 0 : _f.getUtteranceEventType();
        if (!(utteranceType === null || utteranceType === void 0 ? void 0 : utteranceType.isNothing()) && !(utteranceType === null || utteranceType === void 0 ? void 0 : utteranceType.isThing())) {
            return state.withError(ValidationErrorFactory.ExpectedEmptyRequestActType({
                expr: value,
                attributes: { typeName: utteranceType === null || utteranceType === void 0 ? void 0 : utteranceType.shortName, actType: actType === null || actType === void 0 ? void 0 : actType.toString(value) },
            }));
        }
        if (actType.isDeny()) {
            // resets pending offer if action is not affirmed
            state = state.clearPendingOffer();
        }
    }
    const eventErrors = validateEventPriorToExpect(expect, actType, value, state.expressionStack);
    if (actType.isInform()) {
        return state.withError(...eventErrors, ...validateExpectInform(expect));
    }
    return state.withError(...eventErrors);
};
/**
 * Validate DelegateRequest action used in dialog sample.
 *
 * - `delegateRequest`'s cannot be chained together.
 * - slots must come from an event or api call, optionally wrapped in a complex object.
 */
export const evaluateDelegateRequest = (requestExpression, state) => {
    var _a, _b, _c, _d;
    const errors = [];
    if ((_b = (_a = requestExpression.updatedRequest) === null || _a === void 0 ? void 0 : _a.apply) === null || _b === void 0 ? void 0 : _b.isIntentRequest()) {
        const slots = ((_c = requestExpression.updatedRequest) === null || _c === void 0 ? void 0 : _c.isObject()) ? requestExpression.updatedRequest.getProperty("slots") : undefined;
        const genericArguments = (_d = requestExpression.updatedRequest.type.genericArguments) !== null && _d !== void 0 ? _d : [];
        const expectedSlotsType = genericArguments[0];
        evaluateUpdatedIntentRequest(requestExpression, expectedSlotsType, slots, errors);
    }
    return state.withError(...errors);
};
/**
 * Validate DelegateToIntent action used in dialog sample.
 *
 * - `delegateToIntent`'s cannot be chained together.
 * - slots must come from an event or api call, optionally wrapped in a complex object.
 */
export const evaluateDelegateToIntent = (requestExpression, state) => {
    var _a;
    const errors = [];
    const genericArguments = (_a = requestExpression.apply.getGenericArguments()) !== null && _a !== void 0 ? _a : [];
    const expectedSlotsType = genericArguments[0];
    evaluateUpdatedIntentRequest(requestExpression, expectedSlotsType, requestExpression.slots, errors);
    return state.withError(...errors);
};
/**
 * Validate the slots of updated intent request passed to a delegation action.
 *
 * @param requestExpression Delegation action.
 * @param slots Value of slots to validate.
 * @param errors Mutable error list to append any errors found.
 */
const evaluateUpdatedIntentRequest = (requestExpression, expectedSlotsType, slots, errors) => {
    if (slots !== undefined && !slots.isNothing()) {
        const requestExpressionName = requestExpression.apply.getName();
        const callName = requestExpressionName ? getName(requestExpressionName) : undefined;
        if (expectedSlotsType === undefined || expectedSlotsType.isThing()) {
            errors.push(ValidationErrorFactory.InvalidDelegationArgumentType({
                expr: requestExpression,
                attributes: {
                    callName,
                },
            }));
        }
        if (!originatesFromApiOrEvent(slots)) {
            errors.push(ValidationErrorFactory.InvalidDelegationSlots({
                expr: requestExpression,
                attributes: {
                    callName,
                },
            }));
        }
    }
};
/**
 * Determines whether the thing values originate from API or event.
 * Complex objects and lists whose leaf values originate from API or event are also considered as valid.
 *
 * @param thing Thing to verify.
 * @param listAllowed Indicates whether lists are allowed. By default, lists are not allowed at top level.
 * @param allowedDepth Allowed depth of complex objects. By default, set to one to prevent nested complex objects.
 * @returns Whether the thing values originate from API or event.
 */
const originatesFromApiOrEvent = (thing, listAllowed = false, allowedDepth = 1) => {
    var _a, _b;
    // lists are not allowed at top level
    if (!listAllowed && ((_a = thing === null || thing === void 0 ? void 0 : thing.apply) === null || _a === void 0 ? void 0 : _a.isList())) {
        return false;
    }
    const originType = getOriginType(thing);
    // values coming from API or event are valid
    if (isFromOrigin(originType, "event", "api")) {
        return true;
    }
    // otherwise, it has to be either a complex object/list with values that originate from API or event
    if (!isFromOrigin(originType, "literal") || !(thing.isObject() || thing.isList())) {
        return false;
    }
    // in the first implementation, the complex objects within complex objects are not allowed (allowedDepth === 1)
    if (allowedDepth < 0 || (thing.isObject() && allowedDepth === 0)) {
        return false;
    }
    // for lists, all item values have to comply with same constraints
    if (thing.isList()) {
        const items = (_b = thing.asList()) === null || _b === void 0 ? void 0 : _b.getItems();
        if (items === undefined || items.length === 0) {
            return false;
        }
        for (const value of items) {
            // not sure when the item value can be undefined, so report an error in such case
            if (value === undefined) {
                return false;
            }
            // evaluate the value recursively with same allowed depth
            if (!originatesFromApiOrEvent(value, true, allowedDepth - 1)) {
                return false;
            }
        }
        return true;
    }
    // for complex objects, all field values have to comply with same constraints
    if (thing.isObject()) {
        const obj = thing.apply;
        if (obj === undefined) {
            return false;
        }
        for (const value of Object.values(obj.getArgumentsThing())) {
            // not sure when the field value can be undefined, so report an error in such case
            if (value === undefined) {
                return false;
            }
            // evaluate the value recursively with decreased allowed depth
            if (!originatesFromApiOrEvent(value, true, allowedDepth - 1)) {
                return false;
            }
        }
        return true;
    }
    return false;
};
/**
 * Validate Response action used in dialog sample
 * including specific validations to the four args (Response, ResponseAct, next ResponseAct, Payload)
 * and make sure those args are used in allowed combination
 */
export const evaluateResponse = (response, state) => validateResponseAct(response, state.withRequestedArguments(false, ...response.getIndividuallyRequestedArguments())).withError(
// 2. validations for the nextAct
...validateNextAct(response, state), 
// 3. validations for the payload
...validatePayload(response, state), 
// 4. validations for the prompt
...validatePrompt(response.apply), ...validatePriorResponseCall(response));
/**
 * Validate the act used in response action
 * 1. The act could only be one of valid ResponseAct: 'Request', 'ConfirmArgs', 'ConfirmAction', 'Notify', 'Offer', 'ReqAlt', 'Bye', 'ReqMore'
 * 2. ReqAlt cannot be the first act
 * 3. for ConfirmArgs, make sure the items in the "arguments" list should be from the same Action
 * 4. for ConfirmArgs, make sure the payload property exist in argument list
 */
export const validateResponseAct = (response, state) => {
    var _a, _b;
    const { act } = response;
    const actNode = response.apply.getArgumentValue("act");
    if (act === undefined || !act.isLiteral()) {
        // don't do anything when actType is undefined as it should be caught by another validator
        return state;
    }
    // 1. The act could only be one of valid ResponseAct
    if (!act.type.isResponseAct()) {
        state = state.withError(ValidationErrorFactory.InvalidDialogActArgument({
            expr: actNode,
            attributes: {
                dialogAct: act.type.toString(actNode),
            },
        }));
    }
    if (act.type.isConfirmAction()) {
        state = evaluateConfirmAction(response, state);
    }
    // 2. ReqAlt cannot be the first act
    if (act.type.isReqAlt()) {
        state = state.withError(ValidationErrorFactory.InvalidReqAltFirstAct({
            expr: actNode,
        }));
    }
    // 3. for ConfirmArgs, make sure the items in the "arguments" list should be from the same Action
    if (act.isObject() && act.type.isConfirmArgs()) {
        const preErrorCount = state.errors.length;
        state = validateConfirmArgsAct(response, state);
        // 4. for ConfirmArgs, make sure the payload property exist in argument list
        if (preErrorCount === state.errors.length) {
            if (act.isObject()) {
                const args = act.getProperty("arguments");
                const nameSet = new Set();
                if ((args === null || args === void 0 ? void 0 : args.isList()) && args.isLiteral()) {
                    args.apply.call.arguments.items.forEach((item) => {
                        var _a, _b, _c, _d, _e;
                        if (response.checker.isNameReference(item.item)) {
                            const nameDecl = response.checker.resolveNameReference(item.item);
                            if ((nameDecl === null || nameDecl === void 0 ? void 0 : nameDecl.kind) !== undefined && nameDecl.kind === "PropertyReference" && ((_a = nameDecl.name) === null || _a === void 0 ? void 0 : _a.name) !== undefined) {
                                nameSet.add(nameDecl.name.name);
                            }
                        }
                        else if (((_b = item.item) === null || _b === void 0 ? void 0 : _b.kind) === "PropertyReference") {
                            if (((_d = (_c = item.item) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.name) !== undefined) {
                                nameSet.add((_e = item.item) === null || _e === void 0 ? void 0 : _e.name.name);
                            }
                        }
                    });
                }
                const payloadValue = response.apply.getPayloadValue();
                if ((payloadValue === null || payloadValue === void 0 ? void 0 : payloadValue.kind) === "Call") {
                    const payloadApply = response.checker.getApply(payloadValue);
                    if (payloadApply !== undefined && payloadApply.call.arguments !== undefined && Array.isArray(payloadApply.call.arguments)) {
                        for (const args of payloadApply.call.arguments) {
                            const name = typeof args.name === "string" ? args.name : (_a = args.name) === null || _a === void 0 ? void 0 : _a.name;
                            if (name !== undefined) {
                                if (!nameSet.has(name)) {
                                    state = state.withError(ValidationErrorFactory.MismatchedConfirmArgsPayloadProperty({
                                        expr: payloadValue,
                                        attributes: {
                                            propertyName: name,
                                        },
                                    }));
                                }
                                else {
                                    nameSet.delete(name);
                                }
                            }
                        }
                        if (nameSet.size > 0) {
                            for (const name of nameSet) {
                                state = state.withError(ValidationErrorFactory.MissingConfirmedArgsInPayload({
                                    expr: payloadValue,
                                    attributes: {
                                        argumentName: name,
                                    },
                                }));
                            }
                        }
                    }
                }
            }
        }
    }
    // 4. OfferAct arguments should belong to the Offered actionName
    if (act.isObject() && act.type.isOffer()) {
        const offerActionName = act.getProperty("actionName");
        const offerArguments = act.getProperty("arguments");
        const offerArgumentsNode = act.apply.getArgumentValue("arguments");
        if (offerArguments === undefined || offerActionName === undefined || !offerActionName.isAction()) {
            if (offerActionName) {
                return addPendingOfferIfAction(act, state);
            }
            return state; // should not happen as actionName for Offer act is required
        }
        // return errors; // should not happen as the arguments for Offer act must be a List Call
        if (offerArguments.isList() && offerArguments.isLiteral()) {
            offerArguments.apply.call.arguments.items.forEach((arg, i) => {
                var _a, _b, _c, _d, _e;
                const argItem = response.checker.isNameReference(arg.item)
                    ? response.checker.resolveNameReference(arg.item)
                    : arg.item;
                if (!ask.isPropRef(argItem)) {
                    return; // TODO: check if "Call" can be assigned to argument(s)
                }
                // determine the precise location for this error
                let expr = response;
                if ((actNode === null || actNode === void 0 ? void 0 : actNode.kind) === "Call") {
                    expr = getExpressionIfLocField(actNode, expr);
                    if ((offerArgumentsNode === null || offerArgumentsNode === void 0 ? void 0 : offerArgumentsNode.kind) === "Call") {
                        expr = getExpressionIfLocField(offerArgumentsNode, expr);
                        if (ask.isListLiteral(offerArgumentsNode.arguments)) {
                            expr = getExpressionIfLocField((_b = (_a = offerArgumentsNode.arguments) === null || _a === void 0 ? void 0 : _a.items[i]) === null || _b === void 0 ? void 0 : _b.item, expr);
                        }
                    }
                }
                const argValueStr = argItem.printPropertyChainThroughRoot();
                const argThing = response.checker.getThing(arg);
                if (((_d = (_c = argThing === null || argThing === void 0 ? void 0 : argThing.parent) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.isAction()) && !argThing.parent.parent.equals(offerActionName)) {
                    state = state.withError(ValidationErrorFactory.MismatchedActionArgumentsListValue({
                        expr,
                        attributes: {
                            argumentValue: argValueStr,
                            actionName: (_e = offerActionName.origin.name) === null || _e === void 0 ? void 0 : _e.name,
                        },
                    }));
                }
            });
        }
        // Offer.carryOverArguments
        const offerCarryoverArguments = act.getProperty("carryOverArguments");
        const offerCarryoverArgumentsNode = act.apply.getArgumentValue("carryOverArguments");
        if (offerCarryoverArguments === undefined || !offerCarryoverArguments.isList() || !offerCarryoverArguments.isLiteral()) {
            return state; // should not happen as the arguments for Offer act must be a List Call
        }
        (_b = offerCarryoverArguments.getItems()) === null || _b === void 0 ? void 0 : _b.forEach((carryOverArgument, i) => {
            var _a, _b, _c, _d, _e, _f;
            if ((carryOverArgument === null || carryOverArgument === void 0 ? void 0 : carryOverArgument.isObject()) && carryOverArgument.isLiteral()) {
                const arg = carryOverArgument.getProperty("argument");
                if ((arg === null || arg === void 0 ? void 0 : arg.type.isArgument()) && ((_b = (_a = arg.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.isAction())) {
                    if (!arg.parent.parent.equals(offerActionName)) {
                        const carryOverValueStr = ask.isPropRef((_c = arg.origin) === null || _c === void 0 ? void 0 : _c.context) ? arg.origin.context.printPropertyChainThroughRoot() : "todo";
                        // determine the most precise location for the argument's error.
                        // TODO: this is gross, refactor it
                        let expr = response;
                        if ((actNode === null || actNode === void 0 ? void 0 : actNode.kind) === "Call") {
                            expr = getExpressionIfLocField(actNode, expr);
                            if ((offerCarryoverArgumentsNode === null || offerCarryoverArgumentsNode === void 0 ? void 0 : offerCarryoverArgumentsNode.kind) === "Call") {
                                expr = getExpressionIfLocField(offerCarryoverArgumentsNode, expr);
                                if (ask.isListLiteral(offerCarryoverArgumentsNode.arguments)) {
                                    const carryOverArgNode = (_e = (_d = offerCarryoverArgumentsNode.arguments) === null || _d === void 0 ? void 0 : _d.items[i]) === null || _e === void 0 ? void 0 : _e.item;
                                    if (carryOverArgNode !== undefined) {
                                        expr = getExpressionIfLocField(carryOverArgNode, expr);
                                        if (carryOverArgNode.kind === "Call") {
                                            expr = getExpressionIfLocField(carryOverArgument.apply.getArgumentValue("argument"), expr);
                                        }
                                    }
                                }
                            }
                        }
                        state = state.withError(ValidationErrorFactory.MismatchedActionCarryOverArguments({
                            expr,
                            attributes: {
                                carryOverValue: carryOverValueStr,
                                actionName: (_f = offerActionName.origin.name) === null || _f === void 0 ? void 0 : _f.name,
                            },
                        }));
                    }
                }
            }
        });
        return state;
    }
    // 5. validate ConfirmAction Act
    // if (act.type.isConfirmAction()) {
    //   errors.push(...validateConfirmAction(apply, checker));
    // }
    // 6. validate Request Act
    if (act.type.isRequest()) {
        const args = act.getProperty("arguments");
        if ((args === null || args === void 0 ? void 0 : args.isList()) && args.isLiteral()) {
            state = state.withError(...validateArgumentList(act.apply.getArgumentValue("arguments"), act.getProperty("arguments")));
        }
        // If the argList contains multiple args, make sure each arg has request prompt
        state = validateRequestPromptInArgsList(response, act, state);
    }
    // 7. For Notify Act, it can only use the last API action name and an API call can only be notified once
    if (act.type.isNotify() && act.isObject() && act.isLiteral()) {
        // const actValueApply = act.apply;
        const actionDecl = act.getProperty("actionName");
        if (actionDecl === null || actionDecl === void 0 ? void 0 : actionDecl.isAction()) {
            const validateNotify = (expr) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                if (expr === undefined) {
                    return [
                        ValidationErrorFactory.InvalidNotifyActionNameUnusedAction({
                            expr: response,
                            attributes: {
                                actionName: (_a = actionDecl.name) === null || _a === void 0 ? void 0 : _a.name,
                            },
                        }),
                    ];
                }
                if (expr.isInvokeApi()) {
                    const actionName = (_b = expr.action) === null || _b === void 0 ? void 0 : _b.actionName;
                    if (actionName && actionName !== ((_c = actionDecl.name) === null || _c === void 0 ? void 0 : _c.name)) {
                        return [
                            ValidationErrorFactory.InvalidNotifyActionNameLastAction({
                                expr: getExpressionIfLocField((actNode === null || actNode === void 0 ? void 0 : actNode.kind) === "Call" ? (_e = (_d = response.apply.getArgumentValueThing("act")) === null || _d === void 0 ? void 0 : _d.apply) === null || _e === void 0 ? void 0 : _e.getArgumentValue("actionName") : actNode, response),
                                attributes: {
                                    currentActionName: (_f = actionDecl.name) === null || _f === void 0 ? void 0 : _f.name,
                                    previousActionName: actionName,
                                },
                            }),
                        ];
                    }
                    return [];
                }
                if (expr.isResponse()) {
                    const actionName = (_g = actionDecl.name) === null || _g === void 0 ? void 0 : _g.name;
                    const { act } = expr;
                    if ((act === null || act === void 0 ? void 0 : act.type.isNotify()) && act.isObject() && act.isLiteral()) {
                        const actionNameProp = act.getProperty("actionName");
                        if ((actionNameProp === null || actionNameProp === void 0 ? void 0 : actionNameProp.isAction()) && actionName === ((_h = actionNameProp.origin.name) === null || _h === void 0 ? void 0 : _h.name)) {
                            return [
                                ValidationErrorFactory.InvalidNotifyActionNameAlreadyNotified({
                                    expr: response,
                                    attributes: {
                                        actionName: (_j = actionDecl.name) === null || _j === void 0 ? void 0 : _j.name,
                                    },
                                }),
                            ];
                        }
                    }
                }
                return validateNotify(expr.prev);
            };
            state = addPendingOfferIfAction(response.nextAct, state.withError(...validateNotify(response.prev)));
        }
    }
    return state;
};
/**
 * Modifies pending offer state if actionName is provided in Offer
 */
export const addPendingOfferIfAction = (act, state) => {
    var _a, _b, _c, _d;
    if (act === null || act === void 0 ? void 0 : act.type.isOffer()) {
        const action = (_a = act.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValueThing("actionName");
        if (((_b = action === null || action === void 0 ? void 0 : action.origin) === null || _b === void 0 ? void 0 : _b.kind) === "ActionDeclaration" && ((_d = (_c = action === null || action === void 0 ? void 0 : action.origin) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.name)) {
            return state.withPendingOffer(action.origin.name.name);
        }
    }
    return state;
};
/**
 * Validate nextAct used in response action
 * 1. next Act could only be Offer, ReqMore, ReqAlt, or Bye.
 * 2. nextAct could only follow Notify act
 * 3. the ReqAlt act can only be the next Act to a Notify Act with "success = false"
 * 4. for ReqAlt, the items in the "arguments" list should be from the same Action
 * 5. for ReqAlt, actionName used in Notify and ReqAlt argument list should be consistent
 */
export const validateNextAct = (response, state) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const errors = [];
    const { act } = response;
    const actArg = response.apply.getArgumentValue("act");
    const actionName = act === null || act === void 0 ? void 0 : act.getProperty("actionName");
    const actType = act === null || act === void 0 ? void 0 : act.type;
    if (actArg === undefined || act === undefined || actType === undefined || !act.isLiteral()) {
        // don't do anything when actType is undefined as it should be caught by another validator
        return [];
    }
    const { nextAct } = response;
    const nextActArg = response.apply.getArgument("nextAct");
    const nextActType = nextAct === null || nextAct === void 0 ? void 0 : nextAct.type;
    if (nextActArg === undefined || nextAct === undefined || nextActType === undefined || nextActType.isNothing() || nextActType.isVoid()) {
        // don't do anything when type is undefined as it is an optional argument
    }
    else if (!nextActType.isOffer() && !nextActType.isBye() && !nextActType.isReqAlt() && !nextActType.isReqMore()) {
        // 1. next Act could only be Offer, ReqMore, ReqAlt, or Bye.
        errors.push(ValidationErrorFactory.InvalidNextAct({
            expr: nextActArg,
            attributes: {
                responseAct: nextActType.toString(nextActArg),
            },
        }));
    }
    else {
        // 2. nextAct could only follow Notify act
        if (!actType.isNotify()) {
            errors.push(ValidationErrorFactory.InvalidNextActNotify({
                expr: actArg,
                attributes: {
                    responseAct: actType.toString(actArg),
                },
            }));
        }
        else {
            // validations for ReqAlt act
            if (nextAct.type.isReqAlt()) {
                const reqAltArguments = nextAct.getProperty("arguments");
                if ((reqAltArguments === null || reqAltArguments === void 0 ? void 0 : reqAltArguments.isList()) && reqAltArguments.isLiteral()) {
                    errors.push(...validateArgumentList((_a = nextAct === null || nextAct === void 0 ? void 0 : nextAct.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValue("arguments"), nextAct.getProperty("arguments")));
                }
                const successValue = act.getProperty("success");
                if (successValue === undefined || !successValue.isBoolean()) {
                    // should be caught by other validation
                    return errors;
                }
                if (successValue.literal === true) {
                    // 3. The ReqAlt act can only be the next Act to a Notify Act with "success = false"
                    errors.push(ValidationErrorFactory.InvalidReqAltNextAct({
                        expr: nextActArg,
                    }));
                }
                if (nextAct.isObject() && nextAct.isLiteral()) {
                    const reqAlt = nextAct.getProperty("arguments");
                    const reqAltNode = nextAct.apply.getArgumentValue("arguments");
                    if ((reqAlt === null || reqAlt === void 0 ? void 0 : reqAlt.isList()) && reqAlt.isLiteral()) {
                        const argumentListErrors = validateArgumentList(reqAltNode, reqAlt);
                        if (argumentListErrors.length > 0) {
                            errors.push(...argumentListErrors);
                        }
                        else {
                            // 5. actionName used in Notify and ReqAlt argument list should be consistent
                            // could rely on the first item to retrieve rootExpr cause we already checked the items in the list are from the same Action
                            const item = reqAlt.getItem(0);
                            if (((_c = (_b = item === null || item === void 0 ? void 0 : item.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.isAction()) && (actionName === null || actionName === void 0 ? void 0 : actionName.isAction())) {
                                if (((_d = item.parent.parent.origin.name) === null || _d === void 0 ? void 0 : _d.name) !== ((_e = actionName.origin.name) === null || _e === void 0 ? void 0 : _e.name)) {
                                    errors.push(ValidationErrorFactory.MismatchedArgsInReqAlt({
                                        expr: reqAltNode,
                                        attributes: {
                                            reqAltActionName: (_f = item.parent.parent.origin.name) === null || _f === void 0 ? void 0 : _f.name,
                                            notifyActionName: (_g = actionName.origin.name) === null || _g === void 0 ? void 0 : _g.name,
                                        },
                                    }));
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return errors;
};
/**
 * Validate confirmAction action used in dialog sample
 */
export const evaluateConfirmAction = (confirm, state) => {
    var _a, _b, _c, _d, _e;
    let action;
    // location of the ConfirmAction act on which we will attach errors.
    let errorExpr;
    // let actionNameLoc: ask.SourceLocation | undefined;
    if (confirm.isResponse()) {
        if (!((_a = confirm.act) === null || _a === void 0 ? void 0 : _a.type.isConfirmAction())) {
            // why?
            return state;
        }
        const actionName = confirm.act.getProperty("actionName");
        if (actionName === null || actionName === void 0 ? void 0 : actionName.isAction()) {
            action = actionName;
            errorExpr =
                ((_b = confirm.actNode) === null || _b === void 0 ? void 0 : _b.kind) === "Call"
                    ? getExpressionIfLocField((_c = confirm.act.apply) === null || _c === void 0 ? void 0 : _c.getArgumentValue("actionName"), confirm.actNode, confirm)
                    : getExpressionIfLocField(confirm.actNode, confirm);
        }
        else {
            return state;
        }
    }
    else if (confirm.isConfirmAction()) {
        action = confirm.actionName;
        errorExpr = getExpressionIfLocField((_d = confirm.actionNameNode) === null || _d === void 0 ? void 0 : _d.value, confirm);
    }
    const confirmedPayload = confirm.payload;
    if (action === undefined) {
        return state;
    }
    if (!action.isAction()) {
        return state;
    }
    const actionName = (_e = action.origin.name) === null || _e === void 0 ? void 0 : _e.name;
    return state.withError(...[
        validatePayload(confirm, state),
        confirm.flow.interpret((expr) => interpret(expr, state), confirm).map((state) => state.errors),
    ].flat(2));
    function interpret(expr, state, foundEvent = false) {
        var _a;
        const errorArguments = {
            expr: errorExpr,
            attributes: {
                actionName,
            },
        };
        const missingApiInvocationError = ValidationErrorFactory.MissingApiInvocationAfterConfirmAction(errorArguments);
        const missingAffirmOrDenyError = ValidationErrorFactory.MissingAffirmORDenyEventAfterConfirmAction(errorArguments);
        if (expr.isEnd()) {
            return state.withError(missingApiInvocationError);
        }
        if (expr.isInvokeApi()) {
            if ((_a = expr.action) === null || _a === void 0 ? void 0 : _a.equals(action)) {
                if (!foundEvent) {
                    return state.withError(missingAffirmOrDenyError);
                }
                if (confirmedPayload) {
                    return validateConfirmPayload(state, confirm, expr);
                }
                return state;
            }
        }
        else if (expr.isDelegateToIntent() || expr.isDelegateRequest()) {
            return state.withError(ValidationErrorFactory.InvalidDelegationActionConfirmation(errorArguments));
        }
        else if (expr.isResponse() || expr.isConfirmAction()) {
            return foundEvent ? state.withError(missingApiInvocationError) : state.withError(missingAffirmOrDenyError, missingApiInvocationError);
        }
        else if (expr.isExpect()) {
            const type = expr.getActType();
            if (type !== undefined) {
                if (type.isAffirm() || (type === null || type === void 0 ? void 0 : type.isDeny())) {
                    if (type.isDeny()) {
                        // it's ok for an api call to not proceed a deny.
                        return state;
                    }
                    return (next) => interpret(next, state.pushExpr(expr), true);
                }
                return state.withError(missingAffirmOrDenyError);
            }
        }
        return (next) => interpret(next, state.pushExpr(expr), foundEvent);
    }
};
/**
 * Validate confirmArgs action used in dialog sample
 * traverse the confirmArgs list and do the following validations
 * 1. Make sure each response contain APL-A
 * 2. Make sure all arguments in the argument list refer to the same action
 * 3. Make sure all arguments in the argument list has request prompt
 */
export const evaluateConfirmArgs = (confirm, state) => {
    var _a, _b;
    if (confirm.node === undefined) {
        return state;
    }
    const errors = [];
    // const confirmArgs = act.getArgumentValueThing("confirmArgs");
    if (((_a = confirm.confirmArgs) === null || _a === void 0 ? void 0 : _a.isList()) && confirm.confirmArgs.isLiteral()) {
        if (confirm.isResponse())
            errors.push(...validateConfirmArgsFlow(confirm, state));
        for (const arg of (_b = confirm.confirmArgs.getItems()) !== null && _b !== void 0 ? _b : []) {
            if ((arg === null || arg === void 0 ? void 0 : arg.type.isConfirmArguments()) && arg.isObject() && arg.isLiteral()) {
                errors.push(...validatePrompt(arg.apply));
                const confirmedArgs = arg.getProperty("arguments");
                const confirmedArgsNode = arg.apply.getArgumentValue("arguments");
                if ((confirmedArgs === null || confirmedArgs === void 0 ? void 0 : confirmedArgs.isList()) && (confirmedArgs === null || confirmedArgs === void 0 ? void 0 : confirmedArgs.isLiteral())) {
                    // the items in the "arguments" list should be from the same Action
                    errors.push(...validateArgumentList(confirmedArgsNode, confirmedArgs));
                    // Make sure all arguments in the argument list has request prompt
                    state = validateRequestPromptInArgsList(confirm, arg, state);
                }
            }
        }
    }
    return state.withError(...errors);
};
/**
 * Validate the ConfirmArgs act used in response action
 * 1. make sure the items in the "arguments" list should be from the same Action
 * 2. make sure all arguments in the argument list has request prompt
 * 3. make sure there exist Affirm or Deny event after ConfirmArgs Act
 * 4. make sure the next api call is consistent with the action whose arguments are been confirmed
 * @param response
 * @param confirmArgsAct
 * @param branch
 */
export const validateConfirmArgsAct = (confirm, state) => {
    var _a, _b;
    const errors = [];
    const args = (_a = confirm.act) === null || _a === void 0 ? void 0 : _a.getProperty("arguments");
    const argsNode = (_b = confirm.apply) === null || _b === void 0 ? void 0 : _b.getArgumentValue("act");
    if ((args === null || args === void 0 ? void 0 : args.isList()) && args.isLiteral()) {
        const argumentListErrors = validateArgumentList(argsNode, args);
        errors.push(...argumentListErrors);
        // when all arguments in the list are from the same action
        // make sure the next api call is consistent with the action whose arguments are been confirmed
        if (argumentListErrors.length === 0) {
            errors.push(...validateConfirmArgsFlow(confirm, state));
        }
        // Make sure all arguments in the argument list has request prompt
        state = validateRequestPromptInArgsList(confirm, confirm.act, state);
    }
    return state.withError(...errors);
};
/**
 * The next api call after Confirm Args dialog act must be consistent with the action which is been confirmed.
 */
export const validateConfirmArgsFlow = (confirm, state) => {
    var _a, _b, _c;
    let actionDeclaration = undefined;
    const args = (_a = confirm.act) === null || _a === void 0 ? void 0 : _a.getProperty("arguments");
    if (args === null || args === void 0 ? void 0 : args.isList()) {
        for (const arg of (_b = args.getItems()) !== null && _b !== void 0 ? _b : []) {
            const argItem = arg === null || arg === void 0 ? void 0 : arg.asArgument();
            if (!argItem) {
                continue;
            }
            actionDeclaration = argItem.getReferencedActionArgumentActionDeclaration();
            if (actionDeclaration) {
                break;
            }
        }
    }
    else if (args === null || args === void 0 ? void 0 : args.isUnion()) {
        // TODO: validate each variation of the arguments.
        // return state;
        throw new Error("should be impossible.");
    }
    if (actionDeclaration === undefined) {
        return [];
    }
    const actionName = (_c = actionDeclaration.name) === null || _c === void 0 ? void 0 : _c.name;
    const errorExpr = getExpressionIfLocField(confirm.apply.getArgumentValue("act"), confirm);
    return confirm.flow
        .interpret((expr) => visit(expr, state), confirm)
        .map((state) => state.errors)
        .flat();
    function visit(expr, state, affirmed = false) {
        var _a;
        const { flow } = expr;
        const missingEventAfterConfirmArgsError = ValidationErrorFactory.MissingAffirmORDenyEventAfterConfirmArgs({
            expr: errorExpr,
            attributes: {
                actionName,
            },
        });
        if (expr.isEnd()) {
            const missingApiError = ValidationErrorFactory.MissingApiInvocationAfterConfirmArgs({
                expr: errorExpr,
                attributes: {
                    actionName,
                },
            });
            return affirmed ? state.withError(missingApiError) : state.withError(missingEventAfterConfirmArgsError, missingApiError);
        }
        if (expr.isAction()) {
            if (expr === null || expr === void 0 ? void 0 : expr.isInvokeApi()) {
                if (!affirmed) {
                    return state.withError(missingEventAfterConfirmArgsError, ValidationErrorFactory.MissingAffirmORDenyEventAfterConfirmArgsBeforeCall({
                        expr,
                        attributes: {
                            calledActionName: (_a = expr.action) === null || _a === void 0 ? void 0 : _a.actionName,
                            confirmedActionName: actionName,
                        },
                    }));
                }
                if (confirm.payload) {
                    return validateConfirmPayload(state, confirm, expr);
                }
                return state;
            }
            if (expr.isExpect() && !affirmed) {
                const actType = expr.getActType();
                if ((actType === null || actType === void 0 ? void 0 : actType.isAffirm()) || (actType === null || actType === void 0 ? void 0 : actType.isDeny())) {
                    if (actType.isDeny()) {
                        return state;
                    }
                    return (next) => visit(next, state.pushExpr(expr), true);
                }
                if (actType) {
                    return state.withError(missingEventAfterConfirmArgsError, ValidationErrorFactory.MissingAffirmORDenyEventAfterConfirmArgsBeforeExpect({
                        expr,
                        attributes: {
                            actionName,
                            requestAct: actType.toString(flow.expression),
                        },
                    }));
                }
            }
            else if (!affirmed && ((expr === null || expr === void 0 ? void 0 : expr.isResponse()) || (expr === null || expr === void 0 ? void 0 : expr.isConfirmAction()))) {
                return state.withError(ValidationErrorFactory.MissingAffirmORDenyEventAfterConfirmArgs({
                    expr: confirm,
                    attributes: {
                        actionName,
                    },
                }));
            }
        }
        return (next) => visit(next, state.pushExpr(expr), affirmed);
    }
};
/**
 * Validate the arguments to an API match the payload in a previous ConfirmArgs or ConfirmAction act.
 */
function validateConfirmPayload(state, confirm, apiOrDelegate) {
    var _a;
    const confirmedPayload = confirm.isResponse() || confirm.isConfirmAction() ? confirm.payload : undefined;
    const payload = apiOrDelegate.getConfirmPayload();
    const errors = Object.entries((_a = payload.arguments) !== null && _a !== void 0 ? _a : {})
        .map(([name, arg]) => {
        var _a, _b;
        const actualArg = confirmedPayload === null || confirmedPayload === void 0 ? void 0 : confirmedPayload.getProperty(name);
        if (actualArg === undefined || actualArg.equals(arg)) {
            return [];
        }
        // return a pair of errors for the mis-matched argument
        return [
            ValidationErrorFactory.MismatchedPayloadPropertyValueActionArgument({
                expr: getExpressionIfLocField((_a = confirm.apply) === null || _a === void 0 ? void 0 : _a.getArgument("payload"), confirm),
                attributes: {
                    propertyName: name,
                    actionName: payload.actionName,
                },
            }),
            ValidationErrorFactory.MismatchedPayloadPropertyValuePreviouslyConfirmed({
                expr: getExpressionIfLocField((_b = apiOrDelegate.apply) === null || _b === void 0 ? void 0 : _b.getArgumentValue(name), arg),
                attributes: {
                    argumentName: name,
                    actionName: payload.actionName,
                },
            }),
        ];
    })
        .reduce((a, b) => a.concat(b), []);
    return state.withError(...errors);
}
/**
 * Validate ensure action used in dialog sample
 * traverse the requestArgs list and do the following validations
 * 1. Make sure each response contain APL-A
 * 2. Make sure each all arguments in the argument list refer to the same action
 * 3. When the arguments list of RequestArguments contains multiple args, make sure each arg has request prompt
 */
export const evaluateEnsure = (ensure, state) => {
    var _a, _b;
    if (ensure.node === undefined) {
        return state;
    }
    const errors = [];
    state = state.withRequestedArguments(true, ...ensure.getIndividuallyRequestedArguments());
    // const requestArgsNode = ensure.requestArgs.origin;
    if (((_a = ensure.requestArgs) === null || _a === void 0 ? void 0 : _a.isList()) && ensure.requestArgs.isLiteral()) {
        for (const requestArg of (_b = ensure.requestArgs.getItems()) !== null && _b !== void 0 ? _b : []) {
            const args = requestArg === null || requestArg === void 0 ? void 0 : requestArg.getProperty("arguments");
            errors.push(...validateArgumentListThing(args, args === null || args === void 0 ? void 0 : args.origin));
            if (requestArg === null || requestArg === void 0 ? void 0 : requestArg.apply) {
                errors.push(...validatePrompt(requestArg.apply));
            }
            if (requestArg === null || requestArg === void 0 ? void 0 : requestArg.apply) {
                state = validateRequestPromptInArgsList(ensure, requestArg, state);
            }
        }
    }
    return state.withError(...errors);
};
/**
 * Validations of the List<Argument<Thing>> type
 * the items in the "arguments" list should be from the same Action
 * @param value
 * @param branch
 */
export function validateArgumentList(value, valueThing) {
    return validateArgumentListThing(valueThing, value);
}
export function validateArgumentListThing(list, expr) {
    var _a, _b;
    const parseErrors = [];
    if (list === undefined) {
        return parseErrors;
    }
    else if (list.isUnion()) {
        return list.things.map((t) => validateArgumentListThing(t, expr)).reduce((a, b) => a.concat(b), []);
    }
    else if ((list === null || list === void 0 ? void 0 : list.isLiteral()) && list.isList()) {
        const actionNamesSet = new Set();
        const items = (_a = list.getItems()) !== null && _a !== void 0 ? _a : [];
        if (items.length === 0) {
            parseErrors.push(ValidationErrorFactory.ExpectedNonEmptyArgumentList({ expr }));
            return parseErrors;
        }
        for (const itemThing of (_b = list.getItems()) !== null && _b !== void 0 ? _b : []) {
            if (itemThing === undefined) {
                // This will happen when referring to the arguments of a reusable dialog:
                //    ensure(RequestArguments {arguments = [saveRating.arguments.arg0], response = feedback_prompt})
                // saveRating is an argument to the reusable dialog:
                //    dialog Nothing GetFeedback(Action1<Number, Nothing> saveRating)
                // For this case, currently skipping the validations for argument reference and type below
                continue;
            }
            if (!itemThing.isArgument()) {
                continue;
            }
            const argumentInformation = itemThing.getReferencedActionArgumentTypeInformation();
            if (!argumentInformation || !argumentInformation.actionName) {
                parseErrors.push(ValidationErrorFactory.ArgumentMustReferToActionArgument({
                    expr: { loc: itemThing === null || itemThing === void 0 ? void 0 : itemThing.loc, uri: expr === null || expr === void 0 ? void 0 : expr.uri },
                    attributes: { argumentName: itemThing.argumentName },
                }));
            }
            else {
                actionNamesSet.add(argumentInformation.actionName);
                if (argumentInformation.type && !argumentInformation.type.isValidForUtterance()) {
                    parseErrors.push(ValidationErrorFactory.ArgumentMustReferToActionArgumentWithUtteranceType({
                        expr: { loc: itemThing === null || itemThing === void 0 ? void 0 : itemThing.loc, uri: expr === null || expr === void 0 ? void 0 : expr.uri },
                        attributes: { argumentName: itemThing.argumentName, typeName: argumentInformation.type.toString() },
                    }));
                }
            }
        }
        if (actionNamesSet.size > 1) {
            const actionNames = Array.from(actionNamesSet.values())
                .map((n) => "'" + n + "'")
                .join(", ");
            return [
                ValidationErrorFactory.MismatchedActionArgumentsList({
                    expr,
                    attributes: {
                        actionNames: actionNames,
                    },
                }),
            ];
        }
    }
    return parseErrors;
}
/**
 * Validate response argument in response, confirmAction, ensure and confirmArgs actions
 * The type of response should be APL-A
 *
 * Right now the type validation won't check response type cause the response type could be anything
 */
export const validatePrompt = (apply) => {
    var _a, _b, _c;
    const errors = [];
    const promptNode = apply.getArgumentValue("response");
    const prompt = apply.getArgumentValueThing("response");
    if (prompt !== undefined) {
        if (((_a = prompt.type) === null || _a === void 0 ? void 0 : _a.isApla()) || ((_b = prompt.type) === null || _b === void 0 ? void 0 : _b.isMultiModalResponse())) {
            // APLA and MultiModalResponse are valid prompt
            // TODO: we should probably check if the APLA property is set, right?
        }
        else {
            errors.push(ValidationErrorFactory.MissingAplaInResponse({
                expr: promptNode,
                attributes: {
                    type: (_c = prompt.type) === null || _c === void 0 ? void 0 : _c.toString(promptNode),
                },
            }));
        }
    }
    return errors;
};
export const validateRequestPromptInArgsList = (expr, act, state) => {
    var _a, _b, _c, _d;
    if (act === undefined) {
        return state;
    }
    if (act.isUnion()) {
        // return args.things.map((thing) => validateRequestPromptInArgsList(thing, state)).reduce((a, b) => a.concat(b), []);
        throw new Error("this should be impossible.");
    }
    else if (expr.isConfirmArgs() || act.type.isRequest() || act.type.isRequestArguments() || act.type.isConfirmArgs()) {
        const args = (_c = (_b = (_a = act.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValueThing("arguments")) === null || _b === void 0 ? void 0 : _b.asLiteralList()) === null || _c === void 0 ? void 0 : _c.getItems();
        if (args && args.length > 1) {
            for (const arg of args) {
                const argName = (_d = arg === null || arg === void 0 ? void 0 : arg.origin) === null || _d === void 0 ? void 0 : _d.name;
                if ((arg === null || arg === void 0 ? void 0 : arg.isArgument()) && argName !== undefined) {
                    if ((expr.isResponse() || expr.isEnsure() || expr.isConfirmArgs()) && !state.isArgumentRequested(arg)) {
                        state = state.withPendingRequestPromptValidation(expr, arg);
                    }
                }
            }
        }
    }
    return state;
};
/**
 * Validate the user Defined api call inside dialog sample
 * 1. make sure the argument is api result or event result
 * 2. make sure the required argument has Request Prompt
 * 3. make sure the argument(event result) has not been reset
 * 4. make sure all of the api arguments leaf types are primitive or backed by a catalog
 * 5. make sure the the api return value leaf types are primitive or backed by a catalog
 */
export const evaluateInvokeApi = (api, state) => {
    var _a;
    if (api.node === undefined) {
        return state;
    }
    const apiName = (_a = api.action) === null || _a === void 0 ? void 0 : _a.actionName;
    const shortApiName = getName(apiName !== null && apiName !== void 0 ? apiName : "");
    const errors = [
        ...validateLoadContextIsCalledOnce(),
        ...validateArguments(),
        ...validateOfferedApiInvocation(),
        ...validateReturnValue(),
    ];
    return state.withError(...errors).clearPendingOffer();
    // Validate the return value of an api is not an empty type or contains an empty sub-type
    function validateReturnValue() {
        var _a;
        const returnType = (_a = api.apply) === null || _a === void 0 ? void 0 : _a.getReturnType();
        const invalidLeafs = returnType === null || returnType === void 0 ? void 0 : returnType.getEmptyLeafTypes();
        if (invalidLeafs === null || invalidLeafs === void 0 ? void 0 : invalidLeafs.length) {
            return [
                ValidationErrorFactory.InvalidApiReturnType({
                    expr: api.node,
                    attributes: {
                        apiName: shortApiName,
                        unbackedMessage: unbackedCatalogMsg(invalidLeafs),
                    },
                }),
            ];
        }
        return [];
    }
    function validateArguments() {
        var _a, _b, _c, _d;
        return ((_d = (_c = (_b = (_a = api.action) === null || _a === void 0 ? void 0 : _a.getArguments()) === null || _b === void 0 ? void 0 : _b.getArgumentsList()) === null || _c === void 0 ? void 0 : _c.flatMap((arg) => {
            const argValueNode = api.apply.getArgumentValue(arg);
            const argValue = api.apply.getArgumentValueThing(arg);
            if (argValue !== undefined) {
                return validateArgValue(argValueNode, argValue, arg);
            }
            return [];
        })) !== null && _d !== void 0 ? _d : []);
    }
    function validateOfferedApiInvocation() {
        var _a, _b;
        const invokedAction = (_b = (_a = api.apply) === null || _a === void 0 ? void 0 : _a.decl.name) === null || _b === void 0 ? void 0 : _b.name;
        if (state.pendingOffer && state.pendingOffer != invokedAction) {
            return [
                ValidationErrorFactory.InvokedActionNotOffered({
                    expr: api,
                    attributes: {
                        offeredAction: state.pendingOffer,
                        invokedAction: invokedAction,
                    },
                }),
            ];
        }
        return [];
    }
    /**
     * Validate argument value
     *
     * 1. make sure the argument value is api result or event result
     * 2. when the argValue is event result, make sure it has request prompt
     * 3. ensure the sub types of the argument are non-empty or backed by a catalog
     *
     * @param argValue the argument value
     * @param argDecl the declaration of the argument, we could know the argument name, type and whether the argument is optional based on it
     * @returns Parse errors
     */
    function validateArgValue(argValue, argValueThing, argDecl) {
        var _a, _b;
        const argDeclType = argDecl.type.getArgumentType();
        const invalidApiArgumentError = ValidationErrorFactory.InvalidApiArgument({
            expr: argValue,
        });
        const errors = [...validateArgHasNoEmptyLeafTypes(argDeclType)];
        if (argValueThing.isNothing()) {
            return errors;
        }
        if (argValueThing.isLiteral()) {
            // A literal argument can only be a list
            if (argValueThing.isList()) {
                errors.push(...((_b = (_a = argValueThing.getItems()) === null || _a === void 0 ? void 0 : _a.flatMap(validateArgValueThing)) !== null && _b !== void 0 ? _b : []));
            }
            else {
                // TODO: validate type literal with multiple properties
                // errors.push(invalidApiArgumentError);
            }
        }
        else {
            errors.push(...validateArgValueThing(argValueThing));
        }
        return errors;
        // Validates that the base type or any sub-type is non empty.
        function validateArgHasNoEmptyLeafTypes(type) {
            const emptyLeaves = type === null || type === void 0 ? void 0 : type.getEmptyLeafTypes();
            if (emptyLeaves === null || emptyLeaves === void 0 ? void 0 : emptyLeaves.length) {
                return [
                    ValidationErrorFactory.ApiArgumentWithNoCatalog({
                        expr: argValue,
                        attributes: {
                            argName: argDecl.argumentName,
                            apiName: shortApiName,
                            unbackedMessage: unbackedCatalogMsg(emptyLeaves),
                        },
                    }),
                ];
            }
            return [];
        }
        // Validates the origin of an argument. For now it must be from an API result or an entity produced by an event.
        function validateArgValueThing(argValueThing) {
            var _a;
            const origin = getOriginType(argValueThing);
            if (argValueThing === undefined || argValueThing.isNothing()) {
                return [];
            }
            if (argValueThing.isUnion()) {
                return argValueThing.things.map(validateArgValueThing).reduce((a, b) => a.concat(b), []);
            }
            if (argValueThing.parent === undefined) {
                // if we're directly referencing a value, it must be an API cal
                if (isFromOrigin(origin, "api") === false) {
                    return [invalidApiArgumentError];
                }
            }
            else if (isFromOrigin(origin, "event", "api") === false) {
                // if we're indexing an object, it can be from an event or an API call.
                return [invalidApiArgumentError];
            }
            if (isFromOrigin(origin, "event")) {
                if (!state.isArgumentRequested(argDecl, argValueThing)) {
                    if (!((argDeclType === null || argDeclType === void 0 ? void 0 : argDeclType.isOptional()) || (argDeclType === null || argDeclType === void 0 ? void 0 : argDeclType.isArgs()))) {
                        // if this is a required argument and it has not been requested in this dialog flow, we must keep track of it
                        // and only error if we don't find an `ensure` block later in the dialog flow.
                        // const arg = api.action?.getArgument(argDecl);
                        state = state.withPendingRequestPromptValidation(api, argDecl);
                    }
                }
            }
            // Both the eventResult and apiResult follow the same reset rule
            if (api.flow.isArgumentReset(argValueThing, api.apply.decl)) {
                const argumentName = (argValue === null || argValue === void 0 ? void 0 : argValue.kind) === "PropertyReference" ? argValue.printPropertyChainThroughRoot() : (_a = argValue === null || argValue === void 0 ? void 0 : argValue.name) === null || _a === void 0 ? void 0 : _a.name;
                return [
                    ValidationErrorFactory.ResetArgument({
                        expr: argValue,
                        attributes: {
                            argumentName,
                        },
                    }),
                ];
            }
            return [];
        }
    }
    /**
     * A call to the configured loadContext action must be called at most once per dialog sample.
     *
     * @see https://github.com/alexa/ask-ac/issues/225
     */
    function validateLoadContextIsCalledOnce() {
        var _a, _b, _c;
        if (apiName && ((_c = (_b = (_a = state.skillContext) === null || _a === void 0 ? void 0 : _a.loadContext) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.name) === apiName) {
            return api.flow.visitPrevious(function walk(flow) {
                var _a;
                if ((flow === null || flow === void 0 ? void 0 : flow.expression) === undefined) {
                    return [];
                }
                if (((_a = flow === null || flow === void 0 ? void 0 : flow.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call") {
                    const apply = flow.checker.getApply(flow.expression);
                    if (apply === null || apply === void 0 ? void 0 : apply.isUserDefinedApi()) {
                        const thisName = apply === null || apply === void 0 ? void 0 : apply.getName();
                        if (thisName) {
                            if (thisName === apiName) {
                                return [
                                    ValidationErrorFactory.InvalidLoadContextMultipleCall({
                                        expr: api,
                                        attributes: {
                                            actionName: apiName,
                                        },
                                    }),
                                ];
                            }
                            return [
                                ValidationErrorFactory.InvalidLoadContextNotFirstCall({
                                    expr: api,
                                    attributes: {
                                        actionName: apiName,
                                    },
                                }),
                            ];
                        }
                    }
                }
                return flow.visitPrevious(walk);
            });
        }
        return [];
    }
    // Stringifies types into a readable catalog error message
    function unbackedCatalogMsg(types) {
        const stringifiedTypeNames = types.map((type) => `"${type.shortName}"`).join(", ");
        return types.length === 1
            ? `refers to a type ${stringifiedTypeNames} that has no properties and is not associated with a catalog.`
            : `refers to the types ${stringifiedTypeNames} that have no properties and are not associated with a catalog.`;
    }
};
/**
 * Validate payload argument in response and confirmAction action
 *
 * 1. the expression assigned to payload is either null, Thing, or an ObjectLiteral
 * 2. the value assigned to payload property can only be a name directly referring to an api result or a type used in an event
 * 3. validate payload against next api call
 *
 * The Simulator can only understand payload values to be either a slot in the event or the return value of an api invocation
 */
export const validatePayload = (response, state) => {
    var _a;
    if (response.payload === undefined) {
        return [];
    }
    const errors = [];
    const expr = getExpressionIfLocField((_a = response.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValue("payload"), response);
    validatePayloadThing(response.payload);
    return errors;
    function validatePayloadThing(payload) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (payload.isUnion()) {
            throw new Error("this should be impossible.");
            // payload.things.forEach(validatePayloadThing);
        }
        else if (payload.isPrimitive()) {
            if (payload.isLiteral() && (payload.isVoid() || payload.isNothing())) {
                // null and nothing literals are allowed.
            }
            else {
                // TODO: i need to properly handle Optional -> which is AnyThing right now
                errors.push(ValidationErrorFactory.InvalidPayloadType({
                    expr,
                }));
            }
        }
        else if (!payload.isLiteral()) {
            errors.push(ValidationErrorFactory.InvalidPayloadType({
                expr,
            }));
        }
        else {
            // now we have an object literal `{ prop = value }`
            Object.entries((_a = payload.getProperties()) !== null && _a !== void 0 ? _a : {}).forEach(([name, propThing]) => {
                if (propThing !== undefined) {
                    const origin = getOriginType(propThing);
                    if (propThing.parent === undefined) {
                        // if we're directly referencing a value, it must be an API cal
                        if (isFromOrigin(origin, "api") === false) {
                            errors.push(ValidationErrorFactory.InvalidPayloadPropertyValue({
                                expr,
                            }));
                        }
                    }
                    else if (isFromOrigin(origin, "event", "api") === false) {
                        // if we're indexing an object, it can be from an event or an API call.
                        errors.push(ValidationErrorFactory.InvalidPayloadPropertyValue({
                            expr,
                        }));
                    }
                }
            });
        }
        // payload type should be consistent with response type
        if (((_c = (_b = response.response) === null || _b === void 0 ? void 0 : _b.type) === null || _c === void 0 ? void 0 : _c.genericArguments) && ((_e = (_d = response.response) === null || _d === void 0 ? void 0 : _d.type) === null || _e === void 0 ? void 0 : _e.genericArguments.length) > 0) {
            const responseGenericType = (_g = (_f = response.response) === null || _f === void 0 ? void 0 : _f.type) === null || _g === void 0 ? void 0 : _g.genericArguments[0];
            if (responseGenericType !== undefined && !payload.type.extends(responseGenericType)) {
                errors.push(typeError(payload.type, responseGenericType, response.node, getExpressionIfLocField((_h = response.apply) === null || _h === void 0 ? void 0 : _h.getArgumentValue("payload"), response)));
            }
        }
    }
};
function isFromOrigin(actualOrigin, ...expectedOrigin) {
    const allowedOrigins = new Set(expectedOrigin);
    if (actualOrigin === undefined) {
        return undefined;
    }
    if (typeof actualOrigin === "string") {
        return allowedOrigins.has(actualOrigin);
    }
    let accumulator = true;
    for (const o of actualOrigin) {
        if (o === undefined) {
            return undefined;
        }
        accumulator = allowedOrigins.has(o) && accumulator;
    }
    return accumulator;
}
function getOriginType(thing) {
    var _a;
    if (thing === undefined) {
        return undefined;
    }
    if (thing.parent !== undefined) {
        // a thing is from an API call or an Event if the root is from an API or expect event
        return getOriginType(thing.parent);
    }
    if (thing.isLiteral()) {
        return "literal";
    }
    if (thing.isUnion()) {
        return thing.things
            .map((t) => getOriginType(t))
            .reduce((a, b) => {
            if (Array.isArray(a) && Array.isArray(b)) {
                return a.concat(b);
            }
            if (Array.isArray(a)) {
                return [...a, b];
            }
            if (Array.isArray(b)) {
                return [a, ...b];
            }
            return [a, b];
        }, []);
    }
    if (((_a = thing.origin) === null || _a === void 0 ? void 0 : _a.kind) === "ArgumentDeclaration") {
        // origin is an argument declaration, this relies on re-usable dialog expansion logic ....
        // for now, return false?
        return "argument";
    }
    const { apply } = thing;
    if (apply === undefined) {
        return undefined;
    }
    if (apply.isExpect()) {
        return "event";
    }
    if (apply.isUserDefinedApi()) {
        return "api";
    }
    if (apply.isOperator()) {
        return "operator";
    }
    if (apply.isNativeAction()) {
        return "native";
    }
    if (apply.isBuiltin()) {
        return "built-in";
    }
    return undefined;
}
export function validateGlobalWelcome(project, checker) {
    const welcomeCalls = project.modules
        .map((module) => {
        var _a, _b, _c;
        return (_c = (_b = (_a = module.content) === null || _a === void 0 ? void 0 : _a.expressions) === null || _b === void 0 ? void 0 : _b.map((expr) => {
            var _a;
            if (expr.kind === "Call" || (expr.kind === "NameDeclaration" && ((_a = expr.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call")) {
                const apply = checker.getApply(expr.kind === "Call" ? expr : expr.expression);
                if (apply === null || apply === void 0 ? void 0 : apply.isWelcome()) {
                    return [expr];
                }
            }
            return [];
        }).reduce((a, b) => a.concat(b), [])) !== null && _c !== void 0 ? _c : [];
    })
        .reduce((a, b) => a.concat(b), []);
    if (welcomeCalls.length > 1) {
        return welcomeCalls.map((welcome) => ValidationErrorFactory.TooManyWelcomeCalls({
            expr: welcome,
            attributes: {
                welcomeCallCount: welcomeCalls.length,
            },
        }));
    }
    return [];
}
/**
 * validate all required prompts are exist in current skill
 */
export function validateSkillLevelResponses(project) {
    var _a;
    const errors = [];
    const promptsNameSet = new Set();
    // Check if required prompts exist in current skill
    (_a = project.responseTemplates) === null || _a === void 0 ? void 0 : _a.forEach((prompt) => {
        if (prompt.isPrompt()) {
            promptsNameSet.add(prompt.name);
        }
    });
    Object.values(ask.AlexaConversationPrompts).forEach((requiredPrompt) => {
        if (!promptsNameSet.has(requiredPrompt)) {
            errors.push(ValidationErrorFactory.MissingRequiredPrompts({
                attributes: {
                    promptName: requiredPrompt,
                },
            }));
        }
    });
    return errors;
}
/**
 * Verify the expect of Invoke event exists by recursively calling the @function doesSampleStartWithInvoke
 *
 * E.G. Below is a valid example, as it has expect with Invoke event:
 * dialog void A {
 *   sample {
 *     expect(Invoke, invocationUtterances)
 *     // ... conversation flow's logic
 *     response(APLA {}, Bye {})
 *   }
 * }
 *
 * It makes sure all the branches have an Invoke event if conditional branches exist.
 * E.G. The dialog below is not a valid one as it misses Invoke in one condition branch:
 * dialog void B {
 *   sample {
 *     if (some_condition) {
 *       expect(RequestAlt, invocationUtterances)
 *     } else {
 *       expect(Invoke, invocationUtterances)
 *     }
 *     response(APLA {}, Bye {})
 *   }
 * }
 *
 * @param sample sample node to validate through the expressions to find Invoke event
 * @param flow type checker
 * @returns
 */
export const validateSampleStartWithInvoke = (flow, state) => {
    const sample = flow.expression;
    const dialogDecl = sample.context;
    return flow
        .interpret((expr) => visit(expr, state), undefined)
        .map((state) => state.errors)
        .flat();
    function visit(expr, state) {
        var _a, _b, _c;
        if (expr.isEnd()) {
            // if we reach the end then don't report any error - the sample will be flagged as not having an expressions.
            return state;
        }
        if (expr.isDialogExpansion()) {
            // skip dialog expansion (treat it as transient).
            return (next) => visit(next, state);
        }
        if (expr.isExpect()) {
            if (expr.isInvoke()) {
                return state;
            }
            // TODO: specialize error message for the wrong act typ
            // TODO: is the origin location a bad idea?
            return state.withError(ValidationErrorFactory.MissingExpectInvokeEvent({
                expr: getExpressionIfLocField((_a = expr.apply) === null || _a === void 0 ? void 0 : _a.getArgumentValue("act"), expr, sample),
                attributes: {
                    dialogName: (_b = dialogDecl.name) === null || _b === void 0 ? void 0 : _b.name,
                },
            }));
        }
        if (expr.isEnsure() || expr.isConditionalBranch() || expr.isDialogExpansion() || expr.isBlock()) {
            // these blocks don't count as evaluated actions, so we  move to the next expressions
            // return expr.flow.interpret(state, EvaluationState.combine, evaluate);
            return (next) => visit(next, state.pushExpr(expr));
        }
        return state.withError(ValidationErrorFactory.MissingExpectInvokeEvent({
            expr: getExpressionIfLocField(expr, sample),
            attributes: {
                dialogName: (_c = dialogDecl.name) === null || _c === void 0 ? void 0 : _c.name,
            },
        }));
    }
};
/**
 * Returns true if conditionExpressionThing or its root parent is from the last API/from expect
 * or an operator/native action with at least one argument that is from the last API/from expect.
 * This will recursevely follow conditionExpressionThing.parent to find the root parent. Once there
 * returns true if it is either:
 *   1) the last user defined API or
 *   2) an event out of an expect call or
 *   3) an operator or native action where at least one argument is 1) or 2)
 * @param conditionExpressionThing condition expression thing
 * @param lastApiName name of the last user defined API called
 * @returns true if conditionExpressionThing or its root parent is from the last API/from expect
 * or an operator/native action with at least one argument that is from the last API/from expect.
 */
const isConditionExpressionFromLastApiOrFromExpect = (conditionExpressionThing, lastApiName) => {
    if (conditionExpressionThing === undefined) {
        return false;
    }
    if (conditionExpressionThing.parent !== undefined) {
        return isConditionExpressionFromLastApiOrFromExpect(conditionExpressionThing.parent, lastApiName);
    }
    if (!conditionExpressionThing.apply) {
        return false;
    }
    if (conditionExpressionThing.apply.isExpect()) {
        return true;
    }
    if (conditionExpressionThing.apply.isUserDefinedApi()) {
        return conditionExpressionThing.apply.getName() === lastApiName;
    }
    if (conditionExpressionThing.apply.isOperator() || conditionExpressionThing.apply.isNativeAction()) {
        for (const arg in conditionExpressionThing.apply.getArguments()) {
            const argThing = conditionExpressionThing.apply.getArgumentValueThing(arg);
            if (!argThing || isConditionExpressionFromLastApiOrFromExpect(argThing, lastApiName)) {
                return true;
            }
        }
    }
    return false;
};
/**
 * This function validates Condition.when for the following checkpoints:
 * 2. validate the when condition contains any data from the last API invocation call
 * 3. validate then when expression to have a boolean return type
 *
 * @param cond Condition.when Call | NameReference
 * @param condition type checker for querying the expressions
 * @returns type Validator<T>
 */
export const evaluateConditionalBranch = (condition, state) => {
    var _a, _b;
    state = state.withError(...validateFirstExpressionInCondition());
    const { when } = condition.flow.expression;
    if ((when === null || when === void 0 ? void 0 : when.expression) === undefined) {
        return state;
    }
    if (!isConditionExpressionFromLastApiOrFromExpect(condition.expr, (_b = (_a = state.previousApi) === null || _a === void 0 ? void 0 : _a.apply) === null || _b === void 0 ? void 0 : _b.getName())) {
        return state.withError(ValidationErrorFactory.ConditionWhenMustCompareApiResponse({
            expr: getExpressionIfLocField(when, when.context),
        }));
    }
    return state;
    // check that the first expression in each conditional block is another ConditionalBranch, API invocation, Notify Response or Confirm Action
    function validateFirstExpressionInCondition() {
        return condition.flow
            .interpret(function visit(expr, block) {
            var _a;
            if (expr.isEnd() || !isInCondition(expr)) {
                // This Expression does not exist within the ConditionalBranch, so let the "a condition must contain at least one expression" validator catch this.
                return [
                    ValidationErrorFactory.ExprRequiredInConditionBlock({
                        expr: getExpressionIfLocField(block, condition),
                    }),
                ];
            }
            if (expr.isConditionalBranch()) {
                // if the next expression is a Conditional, it's valid
                return [];
            }
            if (expr.isBlock() && block === undefined) {
                // this is the first block encountered after the Conditional Branch, we should use this as the location of the errors.
                return (next) => visit(next, expr);
            }
            if (expr.isDialogExpansion() || expr.isEnsure() || expr.isConfirmArgs() || expr.isBlock()) {
                // if we encounter another conditional branch, dialog expansion or an ambient expression such as ensure or confirmArgs - continue evaluating the dialog flow
                return (expr) => visit(expr, block);
            }
            if (expr.isInvokeApi() || expr.isDelegateToIntent() || expr.isDelegateRequest()) {
                // we allow API invocations (including builtin delegation actions) and ConfirmAction
                // TODO: need to confirm whether ConfirmAction is allowed in a Conditional Branch. I can't remember why ... it doesn't seem to align with requirements?
                return [];
            }
            if (expr.isResponse()) {
                if (((_a = expr.act) === null || _a === void 0 ? void 0 : _a.type.isNotify()) === false) {
                    return [
                        ValidationErrorFactory.InvalidFirstResponseInConditionBlock({
                            expr: getExpressionIfLocField(expr.actNode, expr),
                        }),
                    ];
                }
                // Notify Response is valid, no error.
                return [];
            }
            return [
                ValidationErrorFactory.InvalidFirstExprInConditionBlock({
                    expr,
                }),
            ];
        }, condition)
            .flat();
    }
    /**
     * HACK: Check if this Expression is directly in the context of the ConditionalBranch being expanded.
     *
     * We need this hack because of a short-coming of interpret (ugh!) - we don't know when an Expression
     * in the Stream originated from within a Condition or outside, making this validation difficult.
     */
    function isInCondition(expr) {
        if (expr.flow.stack.length === 0) {
            return false;
        }
        for (const prevExpr of expr.flow.stack) {
            if (prevExpr.kind === "Condition") {
                return prevExpr === condition.flow.expression;
            }
        }
        return false;
    }
};
/**
 * Validates that a `delegateToIntent` call was not the previous expression.
 *
 * @param expr - Expression that is not allowed to follow delegation
 * @param state - EvaluationState
 */
export const validatePriorDelegation = (expr) => {
    const errors = [];
    const { prev } = expr;
    if ((prev === null || prev === void 0 ? void 0 : prev.isDelegateToIntent()) || (prev === null || prev === void 0 ? void 0 : prev.isDelegateRequest())) {
        const directive = prev;
        const callName = getCallName(expr);
        errors.push(ValidationErrorFactory.InvalidExpressionAfterDelegation({
            expr: expr,
            attributes: {
                directiveName: directive.apply.getShortName(),
                callName: callName,
            },
        }));
    }
    return errors;
    // Gets a name for the invalid expression call that wasn't allowed after the delegate directive.
    function getCallName(expression) {
        var _a, _b;
        if (expression.kind === "Action") {
            return (_a = expression.apply) === null || _a === void 0 ? void 0 : _a.getShortName();
        }
        return ask.isCall(expression.node) ? (_b = expression.node.name) === null || _b === void 0 ? void 0 : _b.name : undefined;
    }
};
/**
 * Returns true if the flow originated from a dialog call.
 */
function isFlowFromDialogCall(flow) {
    if ((flow === null || flow === void 0 ? void 0 : flow.stack.length) !== 1) {
        return false;
    }
    const stackNode = flow.stack[0];
    if ((stackNode === null || stackNode === void 0 ? void 0 : stackNode.kind) === "Call") {
        const apply = flow.checker.getApply(stackNode);
        return apply === null || apply === void 0 ? void 0 : apply.isDialog();
    }
    return false;
}
/**
 * Validates if response calls with 'Request' request acts are called consecutively
 */
export const validatePriorResponseCall = (response) => {
    var _a, _b, _c, _d;
    const errors = [];
    if ((_a = response.prev) === null || _a === void 0 ? void 0 : _a.isResponse()) {
        const reqAct = response.apply.getArgumentValue("act");
        const prevReqAct = response.prev.apply.getArgumentValue("act");
        if (((_b = reqAct === null || reqAct === void 0 ? void 0 : reqAct.name) === null || _b === void 0 ? void 0 : _b.name) === ((_c = prevReqAct === null || prevReqAct === void 0 ? void 0 : prevReqAct.name) === null || _c === void 0 ? void 0 : _c.name) && ((_d = prevReqAct === null || prevReqAct === void 0 ? void 0 : prevReqAct.name) === null || _d === void 0 ? void 0 : _d.name) === "Request") {
            errors.push(ValidationErrorFactory.InvalidEventInform({
                expr: response,
                attributes: {
                    requestAct: "Inform",
                },
            }));
        }
    }
    return errors;
};
//# sourceMappingURL=data:application/json;base64,